{"version":3,"sources":["Components/GridStructure.js","Components/SortDemo.js","Components/Intro.js","Components/RuleOfThumb.js","Components/ComplexityAnalysis.js","Components/SelectionSort.js","Components/Insertion.js","Components/MergeSortBasic.js","Components/MergeSort.js","Components/SortingAlgorithms.js","App.js","serviceWorker.js","index.js","Components/image/timeplot.png","Components/image/spaceplot.png"],"names":["GridStructure","_Component","props","gridWidth","gridHeight","rows","cols","padding","margin","id","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nRow","nCol","width","height","drawLine","bind","assertThisInitialized","visulizeBox","drawBasicStructure","generateRandomArray","getX","getY","getSVG","drawVerticalGrid","drawHorizontalGrid","drawSeparator","drawIndicator","select","deselect","sorted","move","shift","warn","inherits","createClass","key","value","x1","y1","x2","y2","color","arguments","length","undefined","svg","append","style","attr","i","row","col","x","y","sep","text","indicator","callback","duration","d3","transition","on","yPadding","xPadding","newX","newY","direction","shiftSplit","split","elements","elementsSplit","firstPosition","elementID","next","widthGrid","heightGrid","boxColor","textColor","borderRadius","rectGroup","textX","textY","left","top","right","bottom","minLength","maxLength","Math","round","random","newArray","floor","Component","SortDemo","_GridStructure","input","initViz","initCol","default","state","order","prevProps","prevState","_this2","nums","push","num","sort","a","b","num1","num2","_this3","react_default","createElement","className","onChange","e","setState","target","selected","Intro","SortDemo_SortDemo","RuleOfThumb","ComplexityAnalysis","displayTimePlot","handleChangePlot","plotImage","Image","src","timePlot","spacePlot","lib_default","Context","Node","inline","Table","responsive","Nav","variant","defaultActiveKey","Item","Link","eventKey","onClick","SelectionSort","indicatorInitial","separatorInitial","getInitialPosition","getAction","visulizeFind","visulizeMove","visulizeFindInverse","visulizeMoveInverse","clearViz","initArray","actions","array","step","speed","setNewArray","animation","positionMap","selectAll","remove","position","nextProps","nextState","update1","update2","update3","update4","update5","action","desc","how","moveAction","to","selectAction","from","indicatorID","_this4","indicatorMoveAction","indicatorTo","elementStage1","elementMove1","separatorAction","sepID","newSepPosition","elementMove2","elementMove3","_this5","elementStage3","elementFrom3","elementFrom2","elementFrom1","indicatorFrom","arrayMap","positions","indexes","indicatorRow","sepPosition","JSON","parse","stringify","number","index","elementPosition","elementInitial","findMin","shiftPosition","sepCur","elementNewCol","elementStage2","_this6","cur","min","run","ButtonGroup","Button","disabled","newAction","window","clearInterval","animationStep","setInterval","Insertion","visFirst","vizBeginInsertion","vizFirstCompare","vizFoundPlace","vizInsert","vizWarn","vizNextInsertion","vizCompareNearestTow","visFirstInverse","vizBeginInsertionInverse","vizFirstCompareInverse","vizFoundPlaceInverse","vizInsertInverse","vizWarnInverse","vizNextInsertionInverse","vizCompareNearestTowInverse","instruction","prevInstruction","sepMove","sepTo","sortAct","sepFrom","deselectAct","indicatorAct","moveAct","moveTo","moveFrom","select1","select2","sepIndex","moveIndex","indicatorIndex","sortAct2","itemMove","itemTo","indicatorMove","selectAct","selectAct2","itemFrom","unsorted","toConsumableArray","indicatorPosition","initSep","newSep","firstElementCol","size","numID","elementRow","elementCol","j","hasSorted","action1","action2","action3","sortedIndex","sortPosition","sortedNum","shiftElements","slice","k","elementCurPosition","numPosition","numPositionFrom","newPositionTo","MergeSortBasic","getActions","getShiftIndex","vizCompare","vizMin","vizPush","vizSortOneArray","arrayStartCol","first","second","initActions","inverse","actionSplit","elem1","elem2","elem","shiftDirection","moveDir","movePosit","firstArray","secondArray","result","num1Position","num2Position","newPosition","num1ID","num2ID","shiftCommand","animationSign","newArray1","newArray2","MergeSort","drawMergeGrid","getActionHandler","visSplit","vizSort","vizMerge","shiftLength","callBack","moveTarget","level","ceil","shiftStartIndex","shiftInitPosition","initCoordinate","initPosition","copyArray1","copyArray2","splice","copyArray3","sortNewAction","copyArray4","initRow","pushAction","originalPosit","newPosit","SortingAlgorithms","SelectionSort_SelectionSort","Insertion_Insertion","MergeSortBasic_MergeSortBasic","MergeSort_MergeSort","App","Intro_Intro","SortingAlgorithms_SortingAlgorithms","ComplexityAnalysis_ComplexityAnalysis","RuleOfThumb_RuleOfThumb","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3aa8cb07.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nexport class GridStructure extends Component {\n    constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n        super(props)\n\n        this.gridWidth = gridWidth;\n\n        this.gridHeight = gridHeight;\n        this.nRow = rows;\n        this.nCol = cols;\n        this.width = this.gridWidth * this.nCol;\n        this.height = this.gridHeight * this.nRow;\n        this.padding = padding;\n        this.margin = margin\n        this.id = id;\n        \n        this.drawLine = this.drawLine.bind(this);\n        this.visulizeBox = this.visulizeBox.bind(this);\n        this.drawBasicStructure = this.drawBasicStructure.bind(this);\n        this.generateRandomArray = this.generateRandomArray.bind(this);\n\n        this.getX = this.getX.bind(this);\n        this.getY = this.getY.bind(this);\n        this.getSVG = this.getSVG.bind(this);\n\n\n        this.drawVerticalGrid = this.drawVerticalGrid.bind(this);\n        this.drawHorizontalGrid = this.drawHorizontalGrid.bind(this);\n        this.drawSeparator = this.drawSeparator.bind(this);\n        this.drawIndicator = this.drawIndicator.bind(this);\n\n\n        this.select = this.select.bind(this)\n        this.deselect = this.deselect.bind(this);\n        this.sorted = this.sorted.bind(this);\n        this.move = this.move.bind(this);\n        this.shift = this.shift.bind(this);\n        this.warn = this.warn.bind(this)\n    }\n\n    drawLine(x1, y1, x2, y2, color = \"gray\") {\n        this.svg.append(\"line\").style(\"stroke\", color)\n                        .attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1))\n                        .attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2))\n    }\n\n    drawBasicStructure() {\n        this.drawLine(0, 0, this.width, 0)\n        this.drawLine(0, this.height, this.width, this.height)\n        this.drawLine(0, 0, 0, this.height)\n        this.drawLine(this.width, 0, this.width, this.height)\n    }\n\n    drawHorizontalGrid() {\n        for (let i = 1; i <= this.nRow - 1; i++) {\n            this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow)\n        }\n    }\n\n    drawVerticalGrid() {\n        for (let i = 1; i <= this.nCol - 1; i++) {\n            this.drawLine(i * this.width / this.nCol, 0, i * this.width / this.nCol, this.height)\n        }\n    }\n\n    drawSeparator(row, col, id) {\n        let x = this.gridWidth * col;\n        let y = (row - 0.5) * this.gridHeight;\n\n        let sep = this.svg.append(\"g\").attr(\"id\", \"separator-\" + id)\n                    .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n        \n        sep.append(\"line\").attr(\"x1\", 0)\n                          .attr(\"y1\", 0)\n                          .attr(\"x2\", 0)\n                          .attr(\"y2\", 1.5 * this.gridHeight)\n                          .style(\"stroke\", \"gray\")\n        \n        sep.append(\"line\").attr(\"x1\", 0)\n                          .attr(\"y1\", 0.45 * this.gridHeight)\n                          .attr(\"x2\", 1.7 * this.gridHeight)\n                          .attr(\"y2\", 0.45 * this.gridHeight)\n                          .style(\"stroke\", \"gray\")\n\n\n        sep.append(\"text\").attr(\"fill\", \"gray\")\n                          //.style(\"text-anchor\", \"middle\")\n                          //.style(\"alignment-baseline\", \"central\")\n                          .attr(\"font-size\", \"0.9rem\")\n                          .attr(\"dy\", 0.4 * this.gridHeight)\n                          .attr(\"dx\", 0.05 * this.gridWidth)\n                          .text(\"Unsort\")\n\n        \n    }\n\n    drawIndicator(row, col, text = null, id) {\n        let padding = 0.05;\n\n        let topAdditional = 0.1\n\n        let x = (col + padding - 1) * this.gridWidth; \n        let y = (row + padding - 1 + topAdditional) * this.gridHeight;\n\n        let indicator = this.svg.append(\"g\").attr(\"id\", \"indicator-\" + id)\n                            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n        \n        indicator.append(\"line\").attr(\"x1\", 0)\n                            .attr(\"y1\", (0.5 - padding) * this.gridHeight)\n                            .attr(\"x2\", (0.5 - padding) * this.gridWidth)\n                            .attr(\"y2\", 0)\n                            .style(\"stroke\", \"gray\")\n        \n        indicator.append(\"line\").attr(\"x1\", (0.5 - padding) * this.gridWidth)\n                            .attr(\"y1\", 0)\n                            .attr(\"x2\", (1 - 2 * padding) * this.gridWidth)\n                            .attr(\"y2\", (0.5 - padding) * this.gridHeight)\n                            .style(\"stroke\", \"gray\")\n        \n        if (text) {\n            indicator.append(\"text\").attr(\"fill\", \"gray\")\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", \"0.7rem\")\n                    .attr(\"dy\", (0.5 - padding) * this.gridHeight)\n                    .attr(\"dx\", (0.5 - padding) * this.gridWidth)\n                    .text(text)\n        }\n\n    }\n\n    select(id, callback = null, duration) {\n        if (callback) {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\").on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\")\n        }\n    }\n\n    deselect(id, callback = null, duration = 500) {\n        if (callback) {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"gray\").on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"gray\")\n        }\n    }\n\n    sorted(id, duration) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"green\")\n    }\n\n    warn(id, duration) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"red\")\n    }\n\n    move(id, row, col, yPadding = 0.05, xPadding = 0.05, callback = null, duration = 500) {\n        let newX = this.gridWidth * (+col - 1 + xPadding)\n        let newY = this.gridHeight * (+row - 1 + yPadding)\n\n        if (callback) {\n            d3.select(\"#\" + id).transition().duration(duration)\n                .attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\")\n                .on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id).transition().duration(duration)\n                .attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\")\n        }        \n    }\n\n    shift(shift, callback = null, duration = 500, direction) {\n        let shiftSplit = shift.split(/[ ]+/)\n        let elements = shiftSplit[1]\n        if (elements === \"null\") {\n            if (callback !== null) {\n                callback();\n            }\n        } else {\n            let elementsSplit = elements.split(\",\")\n            let firstPosition = shiftSplit[2].split(\"-\")\n            for (let i = 0; i < elementsSplit.length; i++) {\n                let elementID = elementsSplit[i]\n                let next = null;\n                if (i === elementsSplit.length - 1) {\n                    next = callback;\n                }\n                this.move(elementID, firstPosition[0], +firstPosition[1] + i + direction, \n                                0.05, 0.05, next, duration)\n            }\n        }\n    } \n\n    visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor = \"gray\", textColor = \"white\", \n                    borderRadius = 5, xPadding = 0.05, yPadding = 0.05) {\n        let width = (1 - 2 * xPadding) * this.gridWidth * widthGrid;\n        let height = (1 - 2 * yPadding) * this.gridHeight * heightGrid;\n        let x = (col - 1 + xPadding) * this.gridWidth;\n        let y = (row - 1 + yPadding) * this.gridHeight;\n\n        let rectGroup = this.svg.append(\"g\")\n            .attr(\"id\", id)\n            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n\n        let textX = (0.5 - xPadding) * this.gridWidth * widthGrid;\n        let textY = (0.5 - yPadding) * this.gridHeight * heightGrid; \n        let textSize = 1 + \"rem\";\n\n        rectGroup.append(\"rect\")\n                .attr(\"rx\", borderRadius).attr(\"ry\", borderRadius)\n                .attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor)\n        \n        rectGroup.append(\"text\").attr(\"fill\", textColor)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", textSize)\n                    .attr(\"dy\", textY)\n                    .attr(\"dx\", textX)\n                    .text(text)\n    }\n\n    getX(x) {\n        return(x + this.margin.left);\n    }\n\n    getY(y) {\n        return(y + this.margin.top)\n    }\n\n    getSVG() {\n        let svg = d3.select(\"#\" + this.id).append(\"svg\")\n                    .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                    .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n        return(svg)\n    }\n\n    generateRandomArray(minLength, maxLength) {\n        let length = Math.round(Math.random() * (maxLength - minLength) + minLength)\n        let newArray = []\n        for (let i = 0; i < length; i++) {\n            newArray[i] = Math.floor(Math.random() * 20) - 4;\n        }\n        return(newArray);\n    }\n}","import React from 'react';\nimport {GridStructure} from './GridStructure'\n\nexport class SortDemo extends GridStructure {\n    constructor(props) {\n        super(props, 30, 30, 3, 9, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"SortDemo\")\n\n        this.input = [3, 2, 6, 2, 9, 8, 4]\n        this.svg = null;\n        this.initViz = this.initViz.bind(this)\n\n        this.initCol = 3\n\n        this.default = \"unsort\"\n\n        this.state = {\n            order: this.default\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        let x = 120;\n        let y = 30;\n        this.drawBasicStructure();\n        this.drawHorizontalGrid();\n        this.drawLine(x + 3, y + 15, x + 15, y + 27)\n        this.drawLine(x + 27, y + 15, x + 15, y + 27)\n        this.drawLine(x + 12, y + 3, x + 12, y + 24)\n        this.drawLine(x + 18, y + 3, x + 18, y + 24)\n        this.initViz();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.order !== this.state.order) {\n            let nums = []\n            for (let i = 0; i < this.input.length; i++) {\n                nums.push({\n                    num: this.input[i],\n                    id: i\n                })\n            }\n            if (this.state.order === \"unsort\") {\n                for (let i = 0; i < this.input.length; i++) {\n                    let id = \"Output-\" + i;\n                    this.move(id, 3, this.initCol + i, 0.05, 0.05, null, 300)\n                    this.deselect(id, null, 300)\n                }\n            } else {\n                nums.sort((a, b) => {\n                    let num1 = a.num;\n                    let num2 = b.num\n                    if (this.state.order === \"aesc\") {\n                        return(num1 - num2)\n                    } else {\n                        return(num2 - num1)\n                    }\n                })\n\n                for (let i = 0; i < nums.length; i++) {\n                    let id = \"Output-\" + nums[i].id;\n                    this.move(id, 3, this.initCol + i, 0.05, 0.05, null, 300)\n                    this.sorted(id, null, 300)\n                }\n            }\n        }\n    }\n\n    initViz() {\n        this.visulizeBox(1, 1, 2, 1, \"Input\", \"Input-Tag\", \"#007bff\", \"white\")\n        this.visulizeBox(3, 1, 2, 1, \"Output\", \"Output-Tag\", \"#007bff\", \"white\")\n        for (let i = 0; i < this.input.length; i++) {\n            this.visulizeBox(1, i + this.initCol, 1, 1, this.input[i], \"Input-\" + i, \"gray\", \"white\")\n            this.visulizeBox(3, i + this.initCol, 1, 1, this.input[i], \"Output-\" + i, \"gray\", \"white\")\n        }\n\n    }\n\n    render() {\n        return(\n            <div id=\"SortDemo\" className=\"animationBox\">\n                <select onChange = {(e) => {\n                    this.setState({\n                        order: e.target.value\n                    })\n                }} value={this.state.order} selected={this.default}>\n                    <option value=\"unsort\">Unsort</option>\n                    <option value=\"aesc\">Sort by Ascending</option>\n                    <option value=\"desc\">Sort by Descending</option>\n                </select>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {SortDemo} from './SortDemo'\n\nexport class Intro extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n\n    render() {\n        return(\n            <div className=\"intro-container\">\n                <h1>Introduction</h1>\n                <p className='intro-text'>\n                As we live in the tech-driven world and interact with computer software on a daily basis, \n                have you ever wondered how we can a computer show a list of students’ names in alphabetical order \n                or rank them by credits earned either ascendingly or desendingly under the hood? \n                </p>\n                <p className='intro-text'>\n                Here comes the magic behind various computer operations and data arrangement--sorting algorithms. \n                Since sorting is a very common operation that we want to perform on a collection of data in various real-world use cases \n                and many other advanced algorithms are based on sorting including binary search, \n                people have come up with assorted ways rearrange a given array or list elements according to a certain order.\n                </p>\n                <p className='intro-text'>\n                Different algorithms have different logic and, therefore, different characteristics and efficiency. \n                Through the interactive explorable explanation, you are going to master various sorting algorithm mechanisms \n                and how to apply them to real world situations. \n                </p>\n\n                <h3>Sorting Demo</h3>\n                <SortDemo />\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport class RuleOfThumb extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        return(\n            <div className=\"intro-container\">\n                <h1>Rule of Thumb</h1>\n                <p className='intro-text'>\n                    In real life, not all cases are general cases. Somtimes those analysis may not work under some special cases. One example can be,\n                     suppose the lists in your application are almost sorted, meaning there is a fix number of items that are not sorted. In this case, \n                      since the number of insertion is fixed and not dependent on the length of the array, insertion sort actually performs better since its runtime \n                      is just O(n) once the number of insertion is fixed. With those in mind, if you just want to have the algorithm with the best trade-off, considering \n                      the properties of your lists in the app can sometimes give you good advices.\n                </p>\n\n                <p className='intro-text'>Another thing you may consider is the property of sorting algorithm: stability. Stability means, \n                 suppose two items have the same value, if the sorted list still keeps the relative order as if they are in the unsorted list. This property has lots of \n                 important applications such as sort an array with multiple categories. If you are building applications which need those features, keeping in mind \n                 about stability can help you filter some sorting algorithms that are not suitable.</p>\n\n                <p className='intro-text'>\n                 Last but not the least, try to use the trial and error technique: there are far more three sorting algorithms mentioned in this explorable explaination:\n                 quick sort, heap sort, rainbow sort, random sort... There are just so many sorting algorithms invented by computer scientists. This means, if you still not sure\n                  which sort algorithm is good for your application based in previous suggestions, just try everything. And eventually, one of them will give you the best result.</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Nav, Image, Table} from 'react-bootstrap';\nimport timePlot from './image/timeplot.png';\nimport spacePlot from './image/spaceplot.png';\nimport MathJax from 'react-mathjax2'\n\nexport class ComplexityAnalysis extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            displayTimePlot: true\n        }\n        this.handleChangePlot = this.handleChangePlot.bind(this)\n    }\n   \n    handleChangePlot() {\n        this.setState({displayTimePlot: !this.state.displayTimePlot})\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        let plotImage;\n        if (this.state.displayTimePlot) {\n            plotImage = <Image src={timePlot}></Image>\n        } else {\n            plotImage = <Image src={spacePlot}></Image>\n        }\n\n\n        return(\n            <div className=\"intro-container\">\n                <h1>Complexity Analysis</h1>\n                \n                <p className='intro-text'>\n                There are many sorting algorithms in programming world. However, there exist tradeoffs among the algorithms. In order to compare the performance of different algorithms, we should consider time complexity and space complexity. Time complexity denotes the amount of time taken by an algorithm to run based on the length of the input. Similarly, space complexity denotes the amount of space or memory taken by an algorithm to run based on the length of the input.\n\n                </p>\n                <MathJax.Context input='tex'>\n                    <p className='intro-text'>\n                        Normally, we use Big O-notation to analyze algorithms. This concept determines which is the dominant term of a function. In order words, it asks which term in the function grows the fastest when n is huge.\n                        For example, if a function <MathJax.Node inline>{'f(n)=0.00001n^2+2n+100'}</MathJax.Node>, even the coefficent of <MathJax.Node inline>{'n^2'}</MathJax.Node> is small, it still grows the\n                        fastest when n goes to infinity, which means <MathJax.Node inline>{'O(f(n))=n^2'}</MathJax.Node>\n                        <br></br>\n                        <br></br>\n                        If you are interested in the rigorious definition, here it is:\n                    </p>\n                </MathJax.Context>\n\n                <div>\n                    <MathJax.Context input='tex'>\n                        <p>\n                            There is a positive number <MathJax.Node inline>{'n_0'}</MathJax.Node> and positive constant <MathJax.Node inline>{'c'}</MathJax.Node> such that, \n                            for all positive number <MathJax.Node inline>{'n\\\\ge n_0'}</MathJax.Node> if there exists a positive \n                            integer <MathJax.Node inline>{'n_0'}</MathJax.Node> and a positive constant <MathJax.Node inline>{'c'} </MathJax.Node> \n                            such that, if for all positive integer <MathJax.Node inline>{'n'}</MathJax.Node> that is greater than <MathJax.Node inline>{'n_0'}</MathJax.Node>, then \n                            <MathJax.Node inline>{'f(n)\\\\leq cg(n)'}</MathJax.Node>, we then say <MathJax.Node inline>{'O(f(n))=g(n)'}</MathJax.Node>.\n                        </p>\n                    </MathJax.Context>\n                </div>\n\n                <h2>Selection Sort</h2>\n\n                <MathJax.Context input='tex'>\n                <p className='intro-text'>\n                    For each time to pick the minimum of the unsorted list, it is most likely to go through all of the items in the unsorted list. If you calculate arithemetic sum, the dominant term is <MathJax.Node inline>{'n^2'}</MathJax.Node>,\n                    which means, in general, the runtime complexity for selection sort is <MathJax.Node inline>{'O(n^2)'}</MathJax.Node> \n                    <br></br>\n                    <br></br>\n                    And as for space complexity, the sorting can be done within the given array so that it does not require extra memory (see the animation). Thus, the space complexity is <MathJax.Node inline>{'O(1)'}</MathJax.Node>.\n                </p>\n                </MathJax.Context>\n\n                <h2>Insertion Sort</h2>\n\n                <MathJax.Context input='tex'>\n                <p className='intro-text'>\n                    Similar to selection sort, for each iteration of the insertion, an item is likely to search for the entire sorted list. This means the sum of the operation is similar wi\n                    th the sum in selection sort, which makes it has the time complexity <MathJax.Node inline>{'O(n^2)'}</MathJax.Node>.\n                    <br></br>\n                    <br></br>\n                    Similarily, as demonstrated by the animation, insertion sort does not need extra space, which means it has space complexity is <MathJax.Node inline>{'O(1)'}</MathJax.Node>.\n                </p>\n                </MathJax.Context>\n\n                <h2>Merge Sort</h2>\n\n                <MathJax.Context input='tex'>\n                <p className='intro-text'>\n                    The time complexity of the merge sort is quite hard to analyze since it involves recursion. However, if you want to do the quick estimation, there are some tricks: \n                    for an array whose length is n, merge sort need to take <MathJax.Node inline>{'log_2(n)'}</MathJax.Node> levels, and for <MathJax.Node inline>{'i^{th}'}</MathJax.Node> level, \n                    the length of array for processing is <MathJax.Node inline input = 'tex'>{'\\\\frac{n}{2^i}'}</MathJax.Node>. Since merging two arrays need to iterate both arrays, if you take the sum,\n                    the dominant term for merge sort is <MathJax.Node inline>{'O(nlogn)'}</MathJax.Node>.\n                    <br></br>\n                    <br></br>\n                    \n                    For each level, it will create a new array, pass it to the next level, and then destroy the array in the current level. \n                    This means, as each level goes through, the is at most 1 new created array, which means ts space is just <MathJax.Node inline>{'O(n)'}</MathJax.Node>\n                </p>\n                </MathJax.Context>\n\n\n                <h2>Time and Space Complexity Comparison Table </h2>\n\n                <Table responsive>\n                    <thead>\n                        <tr>\n                        <th>Sorting Algorithm</th>\n                        <th>General Time Complexity</th>\n                        <th>General Space Complexity</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        \n                        <tr>\n                        <td>Selection Sort</td>\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(n^2)'}</MathJax.Node></td>\n                        </MathJax.Context>\n\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(1)'}</MathJax.Node></td>\n                        </MathJax.Context>\n                        </tr>\n\n                        <tr>\n                        <td>Insertion Sort</td>\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(n^2)'}</MathJax.Node></td>\n                        </MathJax.Context>\n\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(1)'}</MathJax.Node></td>\n                        </MathJax.Context>\n                        </tr>\n                        \n                        <tr>\n                        <td>MergeSort</td>\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(nlogn)'}</MathJax.Node></td>\n                        </MathJax.Context>\n\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(n)'}</MathJax.Node></td>\n                        </MathJax.Context>\n                        </tr>\n                    </tbody>\n                </Table>\n                <h2>Time and Space Complexity Plots</h2>\n                <Nav variant=\"tabs\" defaultActiveKey=\"time\">\n                <Nav.Item>\n                    <Nav.Link eventKey=\"time\" onClick={this.handleChangePlot}>Time</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"space\" onClick={this.handleChangePlot}>Space</Nav.Link>\n                </Nav.Item>\n                </Nav>\n                {plotImage}\n\n                <p className='intro-text'>\n                 With the change of rumtime and memory usage as the length of the list increases, we can see, in general case, if your application is more\n                 optimized for speed, then MergeSort can be a strong candidate within all three algorithms. On the other hand, if your application can only\n                 be run in limit amount of space, you should consider selection sort or insertion sort to alleviate the space constraint.\n                </p>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {GridStructure} from './GridStructure'\nimport {Button, ButtonGroup} from 'react-bootstrap';\n\n\nexport class SelectionSort extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 3\n        // 4: nCol: 10\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 3, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"selection\")\n\n        this.svg = null;\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n        this.visulizeFind = this.visulizeFind.bind(this);\n        this.visulizeMove = this.visulizeMove.bind(this);\n        this.visulizeFindInverse = this.visulizeFindInverse.bind(this);\n        this.visulizeMoveInverse = this.visulizeMoveInverse.bind(this);\n        this.initViz = this.initViz.bind(this)\n        this.clearViz = this.clearViz.bind(this)\n\n        let initArray = [3, 2, 6, 2, 9, 8, 4]\n\n        let actions = this.getAction(initArray)\n\n        this.state = {\n            array: initArray,\n            actions: actions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 2\n            }\n        } \n        return(positionMap)\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n        this.setState({\n            actions: this.getAction()\n        })\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    initViz() {\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"selection-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"selection\");\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, \"min\", \"selection\");\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        let update1 = this.state.step !== nextState.step;\n        let update2 = nextState.setNewArray;\n        let update3 = nextState.animation !== this.state.animation\n        let update4 = nextState.animation \n        let update5 = nextState.step >= 0 && nextState.step < nextState.actions.length;\n\n        return (update1 || update2 || update3 || update4) && update5\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.setNewArray) {\n            this.clearViz();\n            this.initViz();\n            this.setState({\n                setNewArray: false\n            })\n        } else {\n            if (this.state.step > prevState.step) {\n                let action = this.state.actions[this.state.step];\n                if (action.desc === \"Find the Lowest #\") {\n                    this.visulizeFind(action.how)\n                } else if (action.desc === \"Move the Lowest # to the End of Sorted Array\") {\n                    this.visulizeMove(action.how)\n                }\n            } else if (this.state.step < prevState.step) {\n                let action = this.state.actions[prevState.step];\n                if (action.desc === \"Find the Lowest #\") {\n                    this.visulizeFindInverse(action.how);\n                } else if (action.desc === \"Move the Lowest # to the End of Sorted Array\") {\n                    this.visulizeMoveInverse(action.how)\n                }\n            }   \n        }\n    }\n\n    visulizeFind(how) {\n        let moveAction = how[0].split(\" \")        \n\n        let id = moveAction[1]\n        let to = moveAction[3].split(\"-\")\n\n        this.move(id, to[0], to[1], 0.15, 0.05, () => {\n            let selectAction = how[1]\n            this.select(selectAction.split(\" \")[1], null, this.state.speed)\n        }, this.state.speed)\n    }\n\n    visulizeFindInverse(how) {\n        let selectAction = how[1]\n        this.deselect(selectAction.split(\" \")[1], () => {\n            let moveAction = how[0].split(\" \")\n            let from = moveAction[2].split(\"-\")\n            let indicatorID = moveAction[1];\n            this.move(indicatorID, from[0], from[1], 0.15, 0.05, null, this.state.speed)\n        },this.state.speed)\n    }\n\n    visulizeMove(how) {\n        let indicatorMoveAction = how[0].split(\" \");\n        let indicatorID = indicatorMoveAction[1];\n        let indicatorTo = indicatorMoveAction[3].split(\"-\")\n        this.move(indicatorID, indicatorTo[0], indicatorTo[1], 0.15, 0.05, () => {\n            let elementStage1 = how[1].split(\" \")\n            let elementID = elementStage1[1]\n            let elementMove1 = elementStage1[3].split(\"-\")\n            this.move(elementID, elementMove1[0], elementMove1[1], 0.05, 0.05, () => {\n                this.shift(how[2], () => {\n                    let separatorAction = how[3].split(\" \")\n                    let sepID = separatorAction[1]\n                    let newSepPosition = separatorAction[3].split(\"-\")\n                    this.move(sepID, newSepPosition[0], newSepPosition[1], 0.5, 1, () => {\n                        let elementStage2 = how[4].split(\" \")\n                        let elementMove2 = elementStage2[3].split(\"-\")\n                        this.move(elementID, elementMove2[0], elementMove2[1], 0.05, 0.05, () => {\n                            let elementStage3 = how[5].split(\" \")\n                            let elementMove3 = elementStage3[3].split(\"-\")\n                            this.move(elementID, elementMove3[0], elementMove3[1], 0.05, 0.05, () => {\n                                this.sorted(elementID, this.state.speed)\n                            }, this.state.speed)\n                        }, this.state.speed)\n                    }, this.state.speed)\n                }, this.state.speed, 1)\n            }, this.state.speed)\n        }, this.state.speed)\n    }\n\n\n\n    visulizeMoveInverse(how) {\n        let elementStage3 = how[5].split(\" \")\n        let elementID = elementStage3[1]\n        this.select(elementID, () => {\n            let elementFrom3 = elementStage3[2].split(\"-\")\n            this.move(elementID, elementFrom3[0], elementFrom3[1], 0.05, 0.05, () => {\n                let elementStage2 = how[4].split(\" \")\n                let elementFrom2 = elementStage2[2].split(\"-\")\n                this.move(elementID, elementFrom2[0], elementFrom2[1], 0.05, 0.05, () => {\n                    let separatorAction = how[3].split(\" \")\n                    let sepID = separatorAction[1]\n                    let newSepPosition = separatorAction[2].split(\"-\") \n                    this.move(sepID, newSepPosition[0], newSepPosition[1], 0.5, 1, () => {\n                        this.shift(how[2], () => {\n                            let elementStage1 = how[1].split(\" \")\n                            let elementFrom1 = elementStage1[2].split(\"-\")\n                            this.move(elementID, elementFrom1[0], elementFrom1[1], 0.05, 0.05, () => {\n                                let indicatorMoveAction = how[0].split(\" \");\n                                let indicatorID = indicatorMoveAction[1];\n                                let indicatorFrom = indicatorMoveAction[2].split(\"-\") \n                                this.move(indicatorID, indicatorFrom[0], indicatorFrom[1], 0.15, 0.05, null, this.state.speed)\n                            }, this.state.speed)\n                        }, this.state.speed, 0)\n                    }, this.state.speed)\n                }, this.state.speed)\n            }, this.state.speed)\n        }, this.state.speed)\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }];\n        let arrayMap = [];\n        let positions = this.getInitialPosition(array);\n        let indexes = [];\n        let indicatorRow = this.indicatorInitial.row;\n\n        let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n\n        for (let i = 0; i < array.length; i++) {\n            indexes.push(i);\n            arrayMap.push({\n                number: array[i],\n                index: i\n            })\n        }\n\n        arrayMap = arrayMap.sort((a, b) => {\n            return a.number - b.number;\n        })\n        \n        for (let i = 0; i < arrayMap.length; i++) {\n            let index = arrayMap[i].index;\n            let elementPosition = positions[index]\n\n            let indicatorFrom = indicatorRow + \"-\" + this.indicatorInitial.col;\n            let indicatorTo = indicatorRow + \"-\" + elementPosition.col;\n\n            let elementID = \"selection-\" + index\n            let elementInitial = elementPosition.row + \"-\" + elementPosition.col;\n\n            let findMin = {\n                desc: \"Find the Lowest #\",\n                how: [\"Move indicator-selection \" + indicatorFrom + \" \" + indicatorTo, \n                        \"Select \" + elementID]\n            }\n\n            indexes[index] = null;\n\n            let shift = [];\n\n            let shiftPosition = null\n\n            for (let i = 0; i < index; i++) {\n                if (indexes[i] !== null) {\n                    let index = indexes[i];\n                    if (shift.length === 0) {\n                        shiftPosition = positions[index].row + \"-\" + positions[index].col\n                    }\n                    positions[index].col++;\n                    shift.push(\"selection-\" + index);\n                }\n            }\n\n\n            let sepCur = sepPosition.row + \"-\" + sepPosition.col;\n            sepPosition.col++;\n\n            let elementStage1 = (elementPosition.row + 1) + \"-\" + elementPosition.col;\n            let elementNewCol = sepPosition.col;\n            let elementStage2 = (elementPosition.row + 1) + \"-\" + elementNewCol;\n            let elementStage3 = elementPosition.row + \"-\" + elementNewCol;\n\n            let sepNext = sepPosition.row + \"-\" + sepPosition.col;\n\n            let move = {\n                desc: \"Move the Lowest # to the End of Sorted Array\",\n                how:[\"Move indicator-selection \" + indicatorTo + \" \" + indicatorFrom,\n                     \"Move \" + elementID + \" \" + elementInitial + \" \" + elementStage1,\n                     \"Shift \" + shift + \" \" + shiftPosition,\n                     \"Move separator-selection \" + sepCur + \" \" + sepNext,\n                     \"Move \" + elementID + \" \" + elementStage1 + \" \" + elementStage2,\n                     \"Move \" + elementID + \" \" + elementStage2 + \" \" + elementStage3\n                ]\n            }\n            actions.push(findMin);\n            actions.push(move);\n        }\n\n        actions.push({\n            desc: \"Sort Finished\",\n            how: []\n        })\n\n        return(actions)\n    }\n\n    render() {\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            let cur = Math.min(this.state.actions.length - 1, this.state.step)\n            actionDisplay = this.state.actions[cur].desc;\n        }\n\n        let run = \"Play\"\n        if (this.state.animation) {\n            run = \"Pause\"\n        }\n\n        let step = this.state.actions[this.state.step].desc\n        if (this.state.step !== 0 && this.state.step !== this.state.actions.length - 1) {\n            step = \"Step \" + this.state.step + \": \" + step;\n        }\n\n        return(\n            <div id=\"selection\" className=\"animationBox\">\n                <div>{step}</div>\n                <ButtonGroup>\n                <Button variant=\"secondary\" onClick={() => {\n                    if (this.state.step > 0) {\n                        this.setState({\n                            step: this.state.step - 1\n                        })\n                    }\n                }} disabled={this.state.step === 0 || this.state.animation}>Prev</Button>\n\n                <Button variant=\"secondary\" onClick={() => {\n                    if (this.state.step < this.state.actions.length - 1) {\n                        this.setState({\n                            step: this.state.step + 1\n                        })\n                    }\n                }} disabled={this.state.step === this.state.actions.length - 1 || this.state.animation}>Next</Button>\n\n                <Button variant=\"secondary\" onClick={() => {\n                    let newArray = this.generateRandomArray(5, 8);\n                    let newAction = this.getAction(newArray);\n                    this.setState({\n                         array: newArray,\n                         actions: newAction,\n                         step: 0,\n                         setNewArray: true\n                    })\n                }} disabled={this.state.animation}>Generate New Array</Button>\n\n                <Button variant=\"secondary\" onClick={() => {\n                    if (!this.state.animation) {\n                        let animationStep = () => {\n                            this.setState({\n                                animation: window.setInterval(() => {\n                                    if (this.state.step < this.state.actions.length - 1) {\n                                        this.setState({\n                                            step: this.state.step + 1\n                                        })   \n                                    } else {\n                                        window.clearInterval(this.state.animation);\n                                        this.setState({\n                                            animation: false\n                                        })\n                                    }\n                                }, 1200)\n                            })\n                        }\n\n                        if (this.state.step === this.state.actions.length - 1) {\n                            this.setState({\n                                step: 0\n                            }, () => {\n                                this.clearViz();\n                                this.initViz();\n                                animationStep();\n                            })\n                        } else {\n                            animationStep();\n                        }\n                    } else {\n                        window.clearInterval(this.state.animation);\n                        this.setState({\n                            animation: false\n                        })\n                    }\n                }}>{run}</Button>\n                </ButtonGroup>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\nimport { thisExpression } from '@babel/types';\nimport {Button, ButtonGroup} from 'react-bootstrap';\n\n\nexport class Insertion extends GridStructure {\n    constructor(props) {\n        super(props, 30, 30, 3.5, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"insertion\")\n\n        this.svg = null;\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n        this.visFirst = this.visFirst.bind(this)\n        this.vizBeginInsertion = this.vizBeginInsertion.bind(this)\n        this.vizFirstCompare = this.vizFirstCompare.bind(this)\n        this.vizFoundPlace = this.vizFoundPlace.bind(this)\n        this.vizInsert = this.vizInsert.bind(this)\n        this.vizWarn = this.vizWarn.bind(this)\n        this.vizNextInsertion = this.vizNextInsertion.bind(this)\n        this.vizCompareNearestTow = this.vizCompareNearestTow.bind(this)\n\n        this.visFirstInverse = this.visFirstInverse.bind(this)\n        this.vizBeginInsertionInverse = this.vizBeginInsertionInverse.bind(this)\n        this.vizFirstCompareInverse = this.vizFirstCompareInverse.bind(this)\n        this.vizFoundPlaceInverse = this.vizFoundPlaceInverse.bind(this)\n        this.vizInsertInverse = this.vizInsertInverse.bind(this)\n        this.vizWarnInverse = this.vizWarnInverse.bind(this)\n        this.vizNextInsertionInverse = this.vizNextInsertionInverse.bind(this)\n        this.vizCompareNearestTowInverse = this.vizCompareNearestTowInverse.bind(this)\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        let initArray = [3, 2, 6, 2, 9, 8, 4]\n\n        let actions = this.getAction(initArray)\n\n        this.state = {\n            array: initArray,\n            actions: actions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n        this.setState({\n            actions: this.getAction(this.state.array)\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if (this.state.setNewArray) {\n            this.clearViz();\n            this.initViz();\n            this.setState({\n                setNewArray: false\n            })\n        } else {\n            if (prevState.step < this.state.step) {\n                let instruction = this.state.actions[this.state.step]\n                if (instruction.desc === \"Move First Item into Sorted Array\") {\n                    this.visFirst(instruction.how)\n                } else if (instruction.desc === \"Begin Insertion\") {\n                    this.vizBeginInsertion(instruction.how)\n                } else if (instruction.desc === \"Compare with the First\") {\n                    this.vizFirstCompare(instruction.how)\n                } else if (instruction.desc === \"Yeah! We Found the Place\") {\n                    this.vizFoundPlace(instruction.how)\n                } else if (instruction.desc === \"Inserting\") {\n                    this.vizInsert(instruction.how)\n                } else if (instruction.desc === \"Seems Like This is Not the Place\") {\n                    this.vizWarn(instruction.how)\n                } else if (instruction.desc === \"Go to the Next Insertion Point\") {\n                    this.vizNextInsertion(instruction.how)\n                } else if (instruction.desc === \"Compare with the Nearest Two\") {\n                    this.vizCompareNearestTow(instruction.how)\n                }\n            } else if (prevState.step > this.state.step) {\n                let prevInstruction = prevState.actions[prevState.step]\n                if (prevInstruction.desc === \"Move First Item into Sorted Array\") {\n                    this.visFirstInverse(prevInstruction.how)\n                } else if (prevInstruction.desc === \"Begin Insertion\") {\n                    this.vizBeginInsertionInverse(prevInstruction.how)\n                } else if (prevInstruction.desc === \"Compare with the First\") {\n                    this.vizFirstCompareInverse(prevInstruction.how)\n                } else if (prevInstruction.desc === \"Yeah! We Found the Place\") {\n                    this.vizFoundPlaceInverse(prevInstruction.how)\n                } else if (prevInstruction.desc === \"Inserting\") {\n                    this.vizInsertInverse(prevInstruction.how)\n                } else if (prevInstruction.desc === \"Seems Like This is Not the Place\") {\n                    this.vizWarnInverse(prevInstruction.how)\n                } else if (prevInstruction.desc === \"Go to the Next Insertion Point\") {\n                    this.vizNextInsertionInverse(prevInstruction.how)\n                } else if (prevInstruction.desc === \"Compare with the Nearest Two\") {\n                    this.vizCompareNearestTowInverse(prevInstruction.how)\n                }\n            }\n        } \n    }\n\n    visFirst(how) {\n        let sepMove = how[0].split(\" \")\n        let sepTo = sepMove[3].split(\"-\")\n        this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n            let sortAct = how[1].split(\" \")\n            this.sorted(sortAct[1], this.state.speed)\n        }, this.state.speed)\n    }\n\n    visFirstInverse(how) {\n        let sepMove = how[0].split(\" \")\n        let sepFrom = sepMove[2].split(\"-\")\n        this.move(sepMove[1], +sepFrom[0], +sepFrom[1], 0.5, 1, () => {\n            let deselectAct = how[1].split(\" \")\n            this.deselect(deselectAct[1], null, this.state.speed)\n        }, this.state.speed)\n    }\n\n    vizBeginInsertion(how) {\n        let indicatorAct = how[0].split(\" \")\n        let indicatorTo = indicatorAct[3].split(\"-\")\n        this.move(indicatorAct[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed)\n\n        let moveAct = how[1].split(\" \")\n        let moveTo = moveAct[3].split(\"-\")\n        this.move(moveAct[1], moveTo[0], moveTo[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    vizBeginInsertionInverse(how) {\n        let indicatorAct = how[0].split(\" \")\n        let indicatorFrom = indicatorAct[2].split(\"-\")\n        this.move(indicatorAct[1], indicatorFrom[0], indicatorFrom[1], \n                    0.15, 0.05, null, this.state.speed)\n\n        let moveAct = how[1].split(\" \")\n        let moveFrom = moveAct[2].split(\"-\")\n        this.move(moveAct[1], moveFrom[0], moveFrom[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    vizFirstCompare(how) {\n        let select1 = how[0].split(\" \")\n        let select2 = how[1].split(\" \")\n\n        this.select(select1[1], null, this.state.speed)\n        this.select(select2[1], null, this.state.speed)\n    }\n\n    vizFirstCompareInverse(how) {\n        let select1 = how[0].split(\" \")\n        let select2 = how[1].split(\" \")\n\n        this.sorted(select1[1], null, this.state.speed)\n        this.deselect(select2[1], null, this.state.speed)\n    }\n\n    vizCompareNearestTow(how) {\n        for (let i = 0; i < how.length; i++) {\n            this.select(how[i].split(\" \")[1], null, this.state.speed)\n        }\n    }\n\n    vizCompareNearestTowInverse(how) {\n        this.sorted(how[0].split(\" \")[1], null, this.state.speed)\n        this.sorted(how[1].split(\" \")[1], null, this.state.speed)\n        this.deselect(how[2].split(\" \")[1], null, this.state.speed)\n    }\n\n    vizFoundPlace(how) {\n        let sort = how[0].split(\" \")\n        this.sorted(sort[1], null, this.state.speed)\n    }\n\n    vizFoundPlaceInverse(how) {\n        let select = how[0].split(\" \")\n        this.select(select[1], null, this.state.speed)\n    }\n\n    vizInsert(how) {\n        let sepIndex = 0;\n        let moveIndex = 1;\n        let indicatorIndex = 2;\n\n        if (how.length > 3) {\n            let shift = how[0]\n            this.shift(shift, null, this.state.speed, 1)  \n            sepIndex++;\n            moveIndex++;\n            indicatorIndex++;\n            let sortAct = how[4].split(\" \")\n            this.sorted(sortAct[1], null, this.state.speed)\n            if (how.length === 6) {\n                let sortAct2 = how[5].split(\" \")\n                this.sorted(sortAct2[1], null, this.state.speed)\n            }\n        }\n\n        let sepMove = how[sepIndex].split(\" \")\n        let sepTo = sepMove[3].split(\"-\")\n        this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n\n            let itemMove = how[moveIndex].split(\" \")\n            let itemTo = itemMove[3].split(\"-\")\n            this.move(itemMove[1], itemTo[0], itemTo[1], 0.05, 0.05, () => {\n            }, this.state.speed)\n            \n            let indicatorMove = how[indicatorIndex].split(\" \")\n            let indicatorTo = indicatorMove[3].split(\"-\")\n            this.move(indicatorMove[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed)\n        }, this.state.speed)\n    }\n\n    vizInsertInverse(how) {\n        let sepIndex = 0;\n        let moveIndex = 1;\n        let indicatorIndex = 2;\n\n        if (how.length > 3) {\n            let shift = how[0]\n            this.shift(shift, null, this.state.speed, 0)  \n            sepIndex++;\n            moveIndex++;\n            indicatorIndex++;\n            let selectAct = how[4].split(\" \")\n            this.select(selectAct[1], null, this.state.speed)\n            if (how.length === 6) {\n                let selectAct2 = how[5].split(\" \")\n                this.select(selectAct2[1], null, this.state.speed)\n            }\n        }\n\n        let sepMove = how[sepIndex].split(\" \")\n        let sepFrom = sepMove[2].split(\"-\")\n        this.move(sepMove[1], +sepFrom[0], +sepFrom[1], 0.5, 1, () => {\n\n            let itemMove = how[moveIndex].split(\" \")\n            let itemFrom = itemMove[2].split(\"-\")\n            this.move(itemMove[1], itemFrom[0], itemFrom[1], 0.05, 0.05, () => {\n            }, this.state.speed)\n            \n            let indicatorMove = how[indicatorIndex].split(\" \")\n            let indicatorFrom = indicatorMove[2].split(\"-\")\n            this.move(indicatorMove[1], indicatorFrom[0], indicatorFrom[1], 0.15, 0.05, null, this.state.speed)\n        }, this.state.speed)\n    }\n\n    vizWarn(how) {\n        let warn = how[0].split(\" \")\n        this.warn(warn[1], this.state.speed)\n    }\n\n    vizWarnInverse(how) {\n        let select = how[0].split(\" \")\n        this.select(select[1], null, this.state.speed)\n    }\n\n    vizNextInsertion(how) {\n        let itemMove = how[0].split(\" \")\n        let itemTo = itemMove[3].split(\"-\")\n        this.move(itemMove[1], itemTo[0], itemTo[1], 0.05, 0.05, null, this.state.speed)\n\n        let indicatorMove = how[1].split(\" \")\n        let indicatorTo = indicatorMove[3].split(\"-\")\n        this.move(indicatorMove[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed)\n        this.sorted(how[2].split(\" \")[1], null, this.state.speed)\n        \n        this.deselect(itemMove[1], null, this.speed)\n        if (how.length > 4) {\n            this.sorted(how[4].split(\" \")[1], null, this.state.speed)\n        }\n    }\n\n    vizNextInsertionInverse(how) {\n        let itemMove = how[0].split(\" \")\n        let itemFrom = itemMove[2].split(\"-\")\n        this.move(itemMove[1], itemFrom[0], itemFrom[1], 0.05, 0.05, null, this.state.speed)\n\n        let indicatorMove = how[1].split(\" \")\n        let indicatorFrom = indicatorMove[2].split(\"-\")\n        this.move(indicatorMove[1], indicatorFrom[0], indicatorFrom[1], 0.15, 0.05, null, this.state.speed)\n        \n        this.select(how[2].split(\" \")[1], null, this.state.speed)\n        \n        this.warn(itemMove[1], null, this.speed)\n        if (how.length > 4) {\n            this.select(how[4].split(\" \")[1], null, this.state.speed)\n        }\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    initViz() {\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"insertion-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"insertion\");\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, null, \"insertion\");\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n        let unsorted = [...array];\n        let sorted = [];\n\n\n        let positions = this.getInitialPosition(array);\n        let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n        let indicatorPosition = JSON.parse(JSON.stringify(this.indicatorInitial));\n\n        let initSep = sepPosition.row + \"-\" + sepPosition.col\n\n        sepPosition.col++;\n\n        let newSep = sepPosition.row + \"-\" + sepPosition.col\n        let firstElementCol = positions[0].col\n\n        actions.push({\n            desc: \"Move First Item into Sorted Array\",\n            how: [\n                \"Move separator-insertion \" + initSep + \" \" + newSep,\n                \"Sort insertion-0\" \n            ]\n        })\n\n        sorted.push({\n            num: unsorted.shift(),\n            index: 0\n        });\n\n        let size = unsorted.length\n        for (let i = 0; i < size; i++) {\n            let num = unsorted.shift();\n            let numID = i + 1;\n            let elementPosition = positions[numID]\n            let elementID = \"insertion-\" + (numID);\n\n            let elementRow = elementPosition.row;\n            let elementCol = elementPosition.col;\n\n            indicatorPosition.row = 3;\n            indicatorPosition.col = (firstElementCol - 0.5);\n            actions.push({\n                desc: \"Begin Insertion\",\n                how: [\n                    \"Move indicator-insertion \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \"\n                                                + 3 + \"-\" + (firstElementCol - 0.5),\n                    \"Move \" + elementID + \" \" + elementRow + \"-\" + elementCol + \" \" +  3.5 + \"-\" + (firstElementCol - 0.5)\n                ]\n            })\n\n            positions[numID].col = (firstElementCol - 0.5)\n            positions[numID].row = 3.5\n\n\n            let j = 0;\n            let hasSorted = false;\n            while(j < sorted.length && !hasSorted) {\n                let action1 = {};\n                let action2 = {};\n                let action3 = {};\n\n                let sortedIndex = sorted[j].index;\n                let sortPosition = positions[sortedIndex]\n                let sortedNum = sorted[j].num;\n\n                if (j === 0) {\n                    action1.desc = \"Compare with the First\"\n                    action1.how = [\n                        \"Select insertion-\" + sortedIndex,\n                        \"Select insertion-\" + numID\n                    ]\n                } else {\n                    action1.desc = \"Compare with the Nearest Two\"\n                    action1.how = [\n                        \"Select insertion-\" + sortedIndex,\n                        \"Select insertion-\" + sorted[j - 1].index,\n                        \"Select insertion-\" + numID\n                    ]   \n                }\n\n                if (num < sortedNum) {\n                    hasSorted = true;\n                    action2.desc = \"Yeah! We Found the Place\"\n                    action2.how = [\"Sort insertion-\" + numID]\n                    action3.desc = \"Inserting\"\n                    sepPosition.col++;\n\n\n                    let shiftElements = sorted.slice(j, sorted.length);\n                    \n                    for (let k = 0; k < shiftElements.length; k++) {\n                        shiftElements[k] = \"insertion-\" + shiftElements[k].index\n                    }\n                    \n                    let elementCurPosition = positions[numID].row + \"-\" + positions[numID].col\n\n                    action3.how = [\n                        \"Shift \" + shiftElements + \" \" + sortPosition.row + \"-\" + sortPosition.col,\n                        \"Move separator-insertion \" + sepPosition.row + \"-\" + (sepPosition.col - 1) + \" \" \n                                                    + sepPosition.row + \"-\" + sepPosition.col,\n                        \"Move \" + elementID + \" \" + elementCurPosition + \n                                              \" \" + sortPosition.row + \"-\" + sortPosition.col,\n                        \"Move indicator-insertion \" + (indicatorPosition.row) + \"-\" + (indicatorPosition.col)\n                                                        + \" \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col,\n                        \"Sort insertion-\" + sortedIndex\n                    ]\n\n                    if (j > 0) {\n                        action3.how.push(\"Sort insertion-\" + sorted[j - 1].index)\n                    }\n\n                    indicatorPosition.col = this.indicatorInitial.col\n                    indicatorPosition.row = this.indicatorInitial.row\n\n                    positions[numID].row = sortPosition.row\n                    positions[numID].col = sortPosition.col\n\n                    for (let k = j; k < sorted.length; k++) {\n                        positions[sorted[k].index].col++;\n                    }\n\n                    sorted.push({\n                        num: num,\n                        index: numID\n                    })\n\n                    sorted.sort((a, b) => { \n                        return a.num - b.num;\n                    })\n                } else {\n                    action2.desc = \"Seems Like This is Not the Place\"\n                    action2.how = [\"Warn insertion-\" + numID]\n\n                    action3.desc = \"Go to the Next Insertion Point\"\n\n                    let numPosition = positions[numID]\n                    let numPositionFrom = numPosition.row + \"-\" + numPosition.col\n                    numPosition.col++;\n\n                    let newPositionTo = numPosition.row + \"-\" + numPosition.col\n\n                    let indicatorFrom = indicatorPosition.row + \"-\" + indicatorPosition.col\n                    indicatorPosition.col++;\n                    let indicatorTo = indicatorPosition.row + \"-\" + indicatorPosition.col\n\n                    action3.how = [\n                        \"Move \" + elementID + \" \" + numPositionFrom + \" \" + newPositionTo,\n                        \"Move indicator-insertion \" + indicatorFrom + \" \" + indicatorTo,\n                        \"Sort insertion-\" + sortedIndex,\n                        \"Deselect \" + elementID\n                    ]\n\n                    if (j > 0) {\n                        action3.how.push(\"Sort insertion-\" + sorted[j - 1].index)\n                    }\n                }\n                actions.push(action1)\n                actions.push(action2)\n                actions.push(action3)\n                j++\n            }\n            \n            if (!hasSorted) {\n                actions.push({\n                    desc: \"Yeah! We Found the Place\",\n                    \n                    how: [\n                        \"Sort \" + elementID\n                    ]\n                })\n\n                actions.push({\n                    desc: \"Inserting\",\n                    how: [\n                        \"Move separator-insertion \" + sepPosition.row + \"-\" + sepPosition.col + \" \" \n                                                    + sepPosition.row + \"-\" + (sepPosition.col + 1),\n                        \"Move \" + elementID + \" \" + positions[numID].row + \"-\" + positions[numID].col \n                                            + \" \" + (sepPosition.row + 1) + \"-\" + (sepPosition.col + 1),\n                        \"Move indicator-insertion \" + (indicatorPosition.row) + \"-\" + (indicatorPosition.col)  + \" \" \n                                            + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col\n                        \n                    ]\n                })\n                positions[numID].row = (sepPosition.row + 1)\n                positions[numID].col = (sepPosition.col + 1)\n                sepPosition.col++;\n                indicatorPosition.row = this.indicatorInitial.row\n                indicatorPosition.col = this.indicatorInitial.col\n\n                sorted.push({\n                    num: num,\n                    index: numID\n                })\n                sorted.sort((a, b) => {\n                    return a.num < b.num;\n                })\n            }\n        }\n        actions.push({\n            desc: \"Insert Sort Finished\",\n            how: []\n        })\n        return(actions)\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 2\n            }\n        } \n        return(positionMap)\n    }\n\n    render() {\n\n        let run = \"Play\"\n        if (this.state.animation) {\n            run = \"Pause\"\n        }\n\n        let step = this.state.actions[this.state.step].desc\n        if (this.state.step !== 0 && this.state.step !== this.state.actions.length - 1) {\n            step = \"Step \" + this.state.step + \": \" + step;\n        }\n        return(\n            <div id=\"insertion\" className=\"animationBox\">\n                <div>{step}</div>\n                \n                <ButtonGroup >\n\n                <Button variant=\"secondary\" onClick={() => {\n                        if (this.state.step > 0) {\n                            this.setState({\n                                step: this.state.step - 1\n                            })\n                        }\n                }} disabled={this.state.step === 0 || this.state.animation}>Prev</Button>\n\n                <Button variant=\"secondary\" onClick={() => {\n                    if (this.state.step < this.state.actions.length - 1) {\n                        this.setState({\n                            step: this.state.step + 1\n                        })\n                    }\n                }} disabled={this.state.step === this.state.actions.length - 1 || this.state.animation}>Next</Button>\n\n                <Button variant=\"secondary\" onClick={() => {\n                    let newArray = this.generateRandomArray(5, 8);\n                    let newAction = this.getAction(newArray);\n                    this.setState({\n                         array: newArray,\n                         actions: newAction,\n                         step: 0,\n                         setNewArray: true\n                    })\n                }} disabled={this.state.animation}>Generate New Array</Button>\n\n                <Button variant=\"secondary\" onClick={() => {\n                    if (!this.state.animation) {\n                        let animationStep = () => {\n                            this.setState({\n                                animation: window.setInterval(() => {\n                                    if (this.state.step < this.state.actions.length - 1) {\n                                        this.setState({\n                                            step: this.state.step + 1\n                                        })   \n                                    } else {\n                                        window.clearInterval(this.state.animation);\n                                        this.setState({\n                                            animation: false\n                                        })\n                                    }\n                                }, 1200)\n                            })\n                        }\n                        \n                        if (this.state.step === this.state.actions.length - 1) {\n                            this.setState({\n                                step: 0\n                            }, () => {\n                                this.clearViz();\n                                this.initViz();\n                                animationStep();\n                            })\n                        } else {\n                            animationStep();\n                        }\n                    } else {\n                        window.clearInterval(this.state.animation);\n                        this.setState({\n                            animation: false\n                        })\n                    }\n                }}>{run}</Button>\n                </ButtonGroup>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\nimport {Button, ButtonGroup} from 'react-bootstrap';\n\nexport class MergeSortBasic extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 3\n        // 4: nCol: 13\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 3, 12, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"MergeBasic\")\n\n        this.svg = null;\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.initViz = this.initViz.bind(this)\n        this.getActions = this.getActions.bind(this)\n        this.getShiftIndex = this.getShiftIndex.bind(this)\n        this.vizCompare = this.vizCompare.bind(this)\n        this.vizMin = this.vizMin.bind(this)\n        this.vizPush = this.vizPush.bind(this)\n        this.vizSortOneArray = this.vizSortOneArray.bind(this)\n        this.clearViz = this.clearViz.bind(this)\n\n        this.arrayStartCol = 3;\n\n        let first = [1, 2, 4, 5]\n        let second = [2, 3, 4, 7, 8]\n\n        let initActions = this.getActions(first, second)\n\n        this.state = {\n            first: first,\n            second: second,\n            actions: initActions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.setNewArray) {\n            this.clearViz();\n            this.initViz();\n            this.setState({\n                setNewArray: false\n            })\n        } else {\n            let inverse = this.state.step < prevState.step\n            let action = this.state.actions[this.state.step];\n            if (inverse) {\n                action = prevState.actions[prevState.step];\n            }\n            let actionSplit = [];\n            if (action.desc !== null) {\n                actionSplit = action.desc.split(\" \")\n            }\n            \n            if (action.desc === \"Compare the Minimum of Two Arrays\") {\n                this.vizCompare(action.how, inverse)\n            } else if (actionSplit[0] === \"Looks\" && actionSplit[1] === \"Like\") {\n                this.vizMin(action.how, inverse)\n            } else if (actionSplit[0] === \"Push\") {\n                this.vizPush(action.how, inverse)\n            } else if (actionSplit[0] === \"Just\") {\n                this.vizSortOneArray(action.how, inverse)\n            }\n         \n        }\n    }\n\n    initViz() {\n        this.drawHorizontalGrid();\n        this.visulizeBox(1, 1, 2, 1, \"1st\", \"First-Tag\", \"gray\", \"white\")\n        this.visulizeBox(2, 1, 2, 1, \"2nd\", \"Second-Tag\", \"gray\", \"white\")\n        this.visulizeBox(3, 1, 2, 1, \"Result\", \"Result-Tag\", \"green\", \"white\")\n        this.drawLine(57, 0, 57, 90)\n        for (let i = 0; i < this.state.first.length; i++) {\n            this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.first[i], \"MergeBasic-\" + 1 + i, \"gray\", \"white\")\n        }\n\n        for (let i = 0; i < this.state.second.length; i++) {\n            this.visulizeBox(2, i + this.arrayStartCol, 1, 1, this.state.second[i], \"MergeBasic-\" + 2 + i, \"gray\", \"white\")\n        }\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    vizCompare(how, inverse) {\n        let elem1 = how[0].split(\" \")\n        let elem2 = how[1].split(\" \")\n        if (!inverse) {\n            this.select(elem1[1], null, this.state.speed)\n            this.select(elem2[1], null, this.state.speed)\n        } else {\n            this.deselect(elem1[1], null, this.state.speed)\n            this.deselect(elem2[1], null, this.state.speed)\n        }\n    }\n\n    vizMin(how, inverse) {\n        let elem = how[0].split(\" \")[1]\n        if (!inverse) {\n            this.sorted(elem, null, this.state.speed)\n        } else {\n            this.select(elem, null, this.state.speed)\n        }\n    }\n\n    vizPush(how, inverse) {\n        let shiftDirection = -1\n        let moveDir = 3\n        if (inverse) {\n            shiftDirection = 0\n            moveDir = 2;\n            this.select(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.deselect(how[0].split(\" \")[1], null, this.state.speed)\n        }\n\n        this.shift(how[2], null, this.state.speed, shiftDirection)\n        let move = how[1].split(\" \");\n        let movePosit = move[moveDir].split(\"-\")\n        this.move(move[1], +movePosit[0], +movePosit[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    vizSortOneArray(how, inverse) {\n        let shiftDirection = -1\n        let moveDir = 3\n        if (inverse) {\n            shiftDirection = 0\n            moveDir = 2;\n            this.deselect(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.sorted(how[0].split(\" \")[1], null, this.state.speed)\n        }\n\n        this.shift(how[2], null, this.state.speed, shiftDirection)\n        let move = how[1].split(\" \");\n        let movePosit = move[moveDir].split(\"-\")\n        this.move(move[1], +movePosit[0], +movePosit[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    getActions(firstArray = this.state.first, secondArray = this.state.second) {\n        let first = [];\n        let second = [];\n        let result = [];\n        for (let i = 0; i < firstArray.length; i++) {\n            first.push({\n                num: firstArray[i],\n                id: i\n            })\n        }\n\n        for (let i = 0; i < secondArray.length; i++) {\n            second.push({\n                num: secondArray[i],\n                id: i\n            })\n        }\n\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n        let num1Position = 1 + \"-\" + this.arrayStartCol;\n        let num2Position = 2 + \"-\" + this.arrayStartCol;\n        while (first.length > 0 && second.length > 0) {\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n            let num1 = first[0].num;\n            let num2 = second[0].num;\n            let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n            let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n            actions.push({\n                desc: \"Compare the Minimum of Two Arrays\",\n                how: [\n                    \"Select \" + num1ID, \"Select \" + num2ID\n                ]\n            })\n\n            if (num1 <= num2) {\n                actions.push({\n                    desc: \"Looks Like the First Array Has the Lower Value\",\n                    how: [\n                        \"Sort \" + num1ID\n                    ]\n                })\n\n                result.push(first.shift())\n\n                let shiftCommand = this.getShiftIndex(first, 1)\n\n                actions.push({\n                    desc: \"Push the Minimum of the First Array to the End of the Result\",\n                    how: [\n                        \"Deselect \" + num2ID,\n                        \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition,\n                        shiftCommand\n                    ]\n                })\n            } else {\n                actions.push({\n                    desc: \"Looks Like the Second Array Has the Lower Value\",\n                    how: [\n                        \"Sort \" + num2ID\n                    ]\n                })\n                result.push(second.shift())\n\n                let shiftCommand = this.getShiftIndex(second, 2)\n\n                actions.push({\n                    desc: \"Push the Minimum of the Second Array to the End of the Result\",\n                    how: [\n                        \"Deselect \" + num1ID,\n                        \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition,\n                        shiftCommand\n                    ]\n                })\n            }\n        }\n\n        while(first.length > 0) {\n            let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n            result.push(first.shift())\n            let shiftCommand = this.getShiftIndex(first, 1)\n\n            actions.push({\n                desc: \"Just One Array: Push the Minimum to the End of the Result\",\n                how: [\n                    \"Sort \" + num1ID,\n                    \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition,\n                    shiftCommand\n                ]\n            })\n        }\n\n        while(second.length > 0) {\n            let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n\n            result.push(second.shift())\n            let shiftCommand = this.getShiftIndex(second, 2)\n\n            actions.push({\n                desc: \"Just One Array: Push the Minimum to the End of the Result\",\n                how: [\n                    \"Sort \" + num2ID,\n                    \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition,\n                    shiftCommand\n                ]\n            })\n        }\n\n        actions.push({\n            desc: \"Sort Finished\",\n            how: []\n        })\n\n        return(actions)\n    }\n\n    getShiftIndex(nums, row) {\n        let shiftCommand = \"Shift \";\n\n        let result = [];\n\n        for (let i = 0; i < nums.length; i++) {\n            result.push(\"MergeBasic-\" + row + nums[i].id)\n        }\n\n        shiftCommand += result;\n\n        if (nums.length > 0) {\n            shiftCommand += \" \" + row + \"-\" + (this.arrayStartCol + 1)\n        } else {\n            shiftCommand += \" null\"\n        }\n        return(shiftCommand)\n    }\n\n    \n    render() {\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            let cur = Math.min(this.state.actions.length - 1, this.state.step)\n            actionDisplay = this.state.actions[cur].desc;\n        }\n\n        let animationSign = \"Play\"\n        if (this.state.animation) {\n            animationSign = \"Pause\"\n        }\n\n        let step = this.state.actions[this.state.step].desc\n        if (this.state.step !== 0 && this.state.step !== this.state.actions.length - 1) {\n            step = \"Step \" + this.state.step + \": \" + step;\n        }\n        return(\n            <div id=\"MergeBasic\" className=\"animationBox\">\n                <div>{step}</div>\n                <div>\n                <ButtonGroup >\n                    <Button variant=\"secondary\" onClick={() => {\n                        if (this.state.step > 0) {\n                            this.setState({\n                                step: this.state.step - 1\n                            })\n                        }\n                    }} disabled={this.state.step === 0 || this.state.animation}>Prev</Button>\n                    <Button variant=\"secondary\" onClick={() => {\n                        if (this.state.step < this.state.actions.length - 1) {\n                            this.setState({\n                                step: this.state.step + 1\n                            })\n                        }\n                    }} disabled={this.state.step === this.state.actions.length - 1 || this.state.animation}>Next</Button>\n\n                    <Button variant=\"secondary\" onClick={() => {\n                        let newArray1 = this.generateRandomArray(4, 5);\n                        let newArray2 = this.generateRandomArray(4, 5);\n                        newArray1.sort((a, b) => {\n                            return(a - b)\n                        })\n\n                        newArray2.sort((a, b) => {\n                            return(a - b)\n                        })\n\n                        let newAction = this.getActions(newArray1, newArray2);\n                        this.setState({\n                            first: newArray1,\n                            second: newArray2,\n                            actions: newAction,\n                            step: 0,\n                            setNewArray: true\n                        })\n                    }} disabled={this.state.animation}>Generate New Array</Button>\n\n                    <Button variant=\"secondary\" onClick={() => {\n                        if (!this.state.animation) {\n                            let animationStep = () => {\n                                this.setState({\n                                    animation: window.setInterval(() => {\n                                        if (this.state.step < this.state.actions.length - 1) {\n                                            this.setState({\n                                                step: this.state.step + 1\n                                            })   \n                                        } else {\n                                            window.clearInterval(this.state.animation);\n                                            this.setState({\n                                                animation: false\n                                            })\n                                        }\n                                    }, 800)\n                                })\n                            }\n\n                            if (this.state.step === this.state.actions.length - 1) {\n                                this.setState({\n                                    step: 0\n                                }, () => {\n                                    this.clearViz();\n                                    this.initViz();\n                                    animationStep();\n                                })\n                            } else {\n                                animationStep();\n                            }\n                        } else {\n                            this.setState({\n                                animation: false\n                            })\n                            window.clearInterval(this.state.animation);\n                        }\n                    }}>{animationSign}</Button>\n                                    </ButtonGroup>\n\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {GridStructure} from './GridStructure'\nimport {Button, ButtonGroup} from 'react-bootstrap';\n\n\nexport class MergeSort extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 4\n        // 4: nCol: 15\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 4, 15, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"MergeSort\")\n\n        this.drawMergeGrid = this.drawMergeGrid.bind(this);\n        this.initViz = this.initViz.bind(this)\n        this.clearViz = this.clearViz.bind(this)\n        this.getInitialPosition = this.getInitialPosition.bind(this)\n        this.getAction = this.getAction.bind(this)\n        this.getActionHandler = this.getActionHandler.bind(this)\n        this.visSplit = this.visSplit.bind(this)\n        this.vizSort = this.vizSort.bind(this)\n        this.vizMerge = this.vizMerge.bind(this)\n        this.vizPush = this.vizPush.bind(this)\n\n        let initArray = [3, 2, 6, 2, 9, 8, 4, -3]\n        this.arrayStartCol = 1;\n\n        let actions = this.getAction(initArray)\n        this.state = {\n            array: initArray,\n            actions: actions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.drawHorizontalGrid();\n        //this.drawMergeGrid();\n        this.initViz();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.setNewArray) {\n            this.clearViz();\n            this.initViz();\n            this.setState({\n                setNewArray: false\n            })\n        } else {\n            let inverse = this.state.step < prevState.step\n            let action = this.state.actions[this.state.step];\n            if (inverse) {\n                action = prevState.actions[prevState.step];\n            }\n            \n            if (action.desc === \"Split Array into Smaller Pieces\") {\n                this.visSplit(action.how, inverse)\n            } else if (action.desc === \"Array with Single Item is Sorted\") {\n                this.vizSort(action.how, inverse)\n            } else if (action.desc === \"Merge Two Sorted Array\") {\n                this.vizMerge(action.how, inverse)\n            } else if (action.desc === \"Push the Minimum to Next Level\") {\n                this.vizPush(action.how, inverse)\n            }\n         \n        }\n    }\n\n    initViz() {\n        for (let i = 0; i < this.state.array.length; i++) {\n            this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.array[i], \"MergeSort-\" + i, \"gray\", \"white\")\n        }\n\n        let xPadding = 0.40\n        this.visulizeBox(2, 8, 1, 1, \"\", \"Barriar-1\", \"#525252\", \"white\", 0, xPadding, 0)\n        this.visulizeBox(3, 8, 1, 1, \"\", \"Barriar-2\", \"#525252\", \"white\", 0, xPadding, 0)\n        this.visulizeBox(3, 4, 1, 1, \"\", \"Barriar-3\", \"#525252\", \"white\", 0, xPadding, 0)\n        this.visulizeBox(3, 12, 1, 1, \"\", \"Barriar-4\", \"#525252\", \"white\", 0, xPadding, 0)\n        for (let i = 1; i <= 7; i++) {\n            this.visulizeBox(4, 2 * i, 1, 1, \"\", \"Barriar-\" + (4 + i), \"#525252\", \"white\", 0, xPadding, 0)\n        }\n\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    visSplit(how, inverse) {\n        let shift = how[0].split(\" \")\n        let shiftCommand = shift[0] + \" \" + shift[1] + \" \" + shift[2]\n        let shiftLength = +shift[3]\n        let moveDir = 3;\n        if (inverse) {\n            shiftLength = 0;\n            moveDir = 2\n        }\n        if (!inverse) {\n            this.shift(shiftCommand, () => {\n                for (let i = 1; i < how.length; i++) {\n                    let move = how[i].split(\" \")\n                    let moveTarget = move[moveDir].split(\"-\")\n                    this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, null, this.state.speed)\n                }\n            }, this.state.speed, shiftLength)\n        } else {\n\n            let callBack = null;\n            for (let i = 1; i < how.length; i++) {\n                let move = how[i].split(\" \")\n                let moveTarget = move[moveDir].split(\"-\")\n                if (i === how.length - 1) {\n                    callBack = () => {\n                        this.shift(shiftCommand, null, this.state.speed, shiftLength)\n                    }\n                }\n                this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, callBack, this.state.speed)\n            }\n        }\n    }\n\n    vizSort(how, inverse) {\n        if (inverse) {\n            this.deselect(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.sorted(how[0].split(\" \")[1], null, this.state.speed)\n        }\n    }\n\n    vizMerge(how, inverse) {\n        for (let i = 0; i < how.length; i++) {\n            if (inverse) {\n                this.sorted(how[i].split(\" \")[1], null, this.state.speed)\n            } else {\n                this.select(how[i].split(\" \")[1], null, this.state.speed)\n            }\n        } \n    }\n\n    vizPush(how, inverse) {\n        let moveDir = 3;\n        if (inverse) {\n            moveDir = 2;\n            this.select(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.sorted(how[0].split(\" \")[1], null, this.state.speed)\n        }\n        let move = how[1].split(\" \")\n        let moveTarget = move[moveDir].split(\"-\")\n        this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    drawMergeGrid() {\n        for (let i = 1; i <= 14; i++) {\n            this.drawLine(i * 30, 90, i * 30, 120)\n        }\n        this.drawLine(210, 30, 210, 60)\n        this.drawLine(240, 30, 240, 60)\n\n        for (let i = 1; i <= 3; i++) {\n            this.drawLine(120 * i, 60, 120 * i, 90)\n            this.drawLine(120 * i - 30, 60, 120 * i - 30, 90)\n        }\n        \n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 1,\n                col: i + this.arrayStartCol\n            }\n        } \n        return(positionMap)\n    }\n\n    getAction(array) {\n        let actions = [{\n            desc: \"Start Sort\",\n            how: []\n        }]\n\n        let newArray = []\n        for (let i = 0; i < array.length; i++) {\n            newArray.push({\n                num: array[i],\n                id: i\n            })\n        }\n        let position = this.getInitialPosition(array);\n        this.getActionHandler(newArray, position, 1, actions);\n\n        actions.push({\n            desc: \"Sort Finish\",\n            how: []\n        })\n        return(actions)\n    }\n\n    getActionHandler(array, position, level, actions) {\n        if (array.length === 1) {\n            let id = \"MergeSort-\" + array[0].id\n            actions.push({\n                desc: \"Array with Single Item is Sorted\",\n                how: [\"Sort \" + id]\n            })\n        } else {\n            let shiftLength = Math.ceil(array.length / 2)\n            let shiftStartIndex = Math.floor(array.length / 2)\n            let shiftInitPosition = position[array[shiftStartIndex].id]\n            let initCoordinate = shiftInitPosition.row + \"-\" + shiftInitPosition.col\n            let shiftCommand = \"Shift \"\n            let shift = []\n            for (let i = shiftStartIndex; i < array.length; i++) {\n                let id = array[i].id\n                shift.push(\"MergeSort-\" + id)\n                position[id].col += shiftLength\n            }\n            shiftCommand += shift + \" \" + initCoordinate + \" \" + shiftLength\n\n            let action = {};\n            action.desc = \"Split Array into Smaller Pieces\"\n            action.how = [shiftCommand]\n\n            for (let i = 0; i < array.length; i++) {\n                let id = array[i].id\n                let initPosition = position[id].row + \"-\" + position[id].col;\n                position[id].row++;\n                let newPosition = position[id].row + \"-\" + position[id].col;\n                action.how.push(\"Move MergeSort-\" + id + \" \" + initPosition + \" \" + newPosition)\n            }\n\n            actions.push(action)\n            let copyArray1 = [...array]\n            let copyArray2 = copyArray1.splice(shiftStartIndex)\n\n            let copyArray3 = [...array]\n            this.getActionHandler(copyArray1, position, level + 1, actions);\n            this.getActionHandler(copyArray2, position, level + 1, actions)\n\n            let sortNewAction = {};\n            sortNewAction.desc = \"Merge Two Sorted Array\"\n            sortNewAction.how = [];\n            for (let i = 0; i < copyArray3.length; i++) {\n                sortNewAction.how.push(\"Select MergeSort-\" + array[i].id)\n            }\n            actions.push(sortNewAction);\n            let copyArray4 = copyArray3.splice(shiftStartIndex)\n            copyArray3.sort((a, b) => {\n                return a.num - b.num\n            })\n\n            copyArray4.sort((a, b) => {\n                return a.num - b.num\n            })\n\n            let initPosition = position[copyArray3[0].id]\n            let initRow = initPosition.row - 1;\n            let initCol = initPosition.col;\n\n            let i = 0;\n            let j = 0;\n            let result = [];\n            while (i < copyArray3.length && j < copyArray4.length) {\n                let num1 = copyArray3[i].num\n                let num2 = copyArray4[j].num\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray3[i].id\n                if (num2 < num1) {\n                    numID = copyArray4[j].id\n                    j++;\n                } else {\n                    i++;\n                }\n                let originalPosit = position[numID].row + \"-\" + (position[numID].col);\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol+ result.length;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n\n            \n            while (i < copyArray3.length)  {\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray3[i].id\n                i++;\n                \n                let originalPosit = position[numID].row + \"-\" + position[numID].col\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol + result.length;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n\n            while (j < copyArray4.length) {\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray4[j].id\n                j++;\n                let originalPosit = position[numID].row + \"-\" + position[numID].col\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol + result.length;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n        }\n    }\n\n\n    render() {\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            let cur = Math.min(this.state.actions.length - 1, this.state.step)\n            actionDisplay = this.state.actions[cur].desc;\n        }\n\n        let animationSign = \"Play\"\n        if (this.state.animation) {\n            animationSign = \"Pause\"\n        }\n\n        let step = this.state.actions[this.state.step].desc\n        if (this.state.step !== 0 && this.state.step !== this.state.actions.length - 1) {\n            step = \"Step \" + this.state.step + \": \" + step;\n        }\n\n        return(\n            <div id=\"MergeSort\" className=\"animationBox\">\n                <div>{step}</div>\n                <div>\n                    <ButtonGroup>\n                    <Button variant=\"secondary\" onClick={() => {\n                        if (this.state.step > 0) {\n                            this.setState({\n                                step: this.state.step - 1\n                            })\n                        }\n                    }} disabled={this.state.step === 0 || this.state.animation}>Prev</Button>\n                    <Button variant=\"secondary\" onClick={() => {\n                        if (this.state.step < this.state.actions.length - 1) {\n                            this.setState({\n                                step: this.state.step + 1\n                            })\n                        }\n                    }} disabled={this.state.step === this.state.actions.length - 1 || this.state.animation}>Next</Button>\n\n                    <Button variant=\"secondary\" onClick={() => {\n                        let newArray = this.generateRandomArray(8, 8);\n\n                        let newAction = this.getAction(newArray);\n                        this.setState({\n                            array: newArray,\n                            actions: newAction,\n                            step: 0,\n                            setNewArray: true\n                        })\n                    }} disabled={this.state.animation}>Generate New Array</Button>\n\n                    <Button variant=\"secondary\" onClick={() => {\n                        if (!this.state.animation) {\n                            let animationStep = () => {\n                                this.setState({\n                                    animation: window.setInterval(() => {\n                                        if (this.state.step < this.state.actions.length - 1) {\n                                            this.setState({\n                                                step: this.state.step + 1\n                                            })   \n                                        } else {\n                                            window.clearInterval(this.state.animation);\n                                            this.setState({\n                                                animation: false\n                                            })\n                                        }\n                                }, 700)})}\n                            if (this.state.step === this.state.actions.length - 1) {\n                                this.setState({\n                                    step: 0\n                                }, () => {\n                                    this.clearViz();\n                                    this.initViz();\n                                    animationStep();\n                                })\n                            } else {\n                                animationStep();\n                            }\n                        } else {\n                            window.clearInterval(this.state.animation);\n                            this.setState({\n                                animation: false\n                            })\n                        }\n                    }}>{animationSign}</Button>\n                    </ButtonGroup>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {SelectionSort} from './SelectionSort'\nimport {Insertion} from './Insertion'\nimport {MergeSortBasic} from './MergeSortBasic'\nimport {MergeSort} from './MergeSort'\n\nexport class SortingAlgorithms extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        return(\n            <div className=\"intro-container\">\n                <h1>Sorting Algorithms</h1>\n                <h2>Selection Sort</h2>\n                <p className='intro-text'>\n                Selection sort is based on the fact that, every time when we remove the minimum of an unsorted array, and attach removed value one by one, then the final array is sorted. And the reason why it works is that, we first put the first smallest item at the front of the list, then put the second smallest item after the first smallest, and then the third smallest item after the second smallest list; and the processes will continue until the largest item is put in the last position. And the following pseudocode shows the basic logic to instruct computers to process selection sort:\n                </p>\n                <div className='code-block'>\n                <code>\n                Step 1 − Set MIN to location 0 <br></br>\n                Step 2 − Search the minimum element in the list <br></br>\n                Step 3 − Swap with value at location MIN <br></br>\n                Step 4 − Increment MIN to point to next element<br></br>\n                Step 5 − Repeat until list is sorted<br></br>\n                </code>\n                </div>\n                <p className='intro-text'>\n                Interestingly, although there are the removed values need to joint together, it does NOT need an extra array to save the sorted values. This means, the selection sorted is considered as an in-place sort, which means this sorting algorithm may not need other computer memory usage other than just the given place for the initial array. And the following animation shows the general process of selection sort, and why this sorting algorithm can be considered as an in-place sort.\n                </p>\n\n                <h3>Demo</h3>\n                <SelectionSort />\n\n\n                <h2>Insertion Sort</h2>\n                <p className='intro-text'>\n                Insertion sort using facts that are even more obvious than the fact for selection sort. For this sorting algorithm works, there are two major requirements: <br></br>\n                </p>\n\n                <p className='intro-text'>\n                1. An array with only one or zero element is considered as a sorted array. <br></br>\n                2. A sorted array is still sorted when a new item is inserted at the position where its value is between its neighbors. {`(Such as 1st Neighbor < Inserted Value <2nd Neighbor)`}\n                </p>\n\n                <p className='intro-text'>\n                With those two facts, we can have an iteration that, we pick the first item of the unsorted array, and then the value is inserted into the appropriate place. And once there is no more item to be picked, we can get a sorted array. And the following pseudocode shows the basic logic to instruct computers to process insertion:\n                </p>\n\n                <div className='code-block'>\n                <code>\n                Step 1 − Put the first item into sorted list;<br></br>\n                Step 2 − Pick next element<br></br>\n                Step 3 − Compare with all elements in the sorted sub-list<br></br>\n                Step 4 − Shift all the elements in the sorted sub-list that is greater than the \n                        value to be sorted<br></br>\n                Step 5 − Insert the value<br></br>\n                Step 6 − Repeat until list is sorted<br></br>\n                </code>\n                </div>\n\n                <p className='intro-text'>\n                Similar with selection, with appropriate array manipulations such as shifting items in the array, the insertion sort can also be done without any further computer storage and memory requirement, which is consider another common in-place sorting algorithm. And the following animation shows the general process of insertion sort, and why this sorting algorithm can be considered as an in-place sort.\n                </p>\n                <h3>Demo</h3>\n                <Insertion />\n\n\n\n                <h2>Merge Sort</h2>\n                <p className='intro-text'>\n                Unlike both Insertion Sort and Selection Sort, the theory behind Merge Sort can be a little bit hard to comprehend. Basically, it also requires two facts to make it an efficient sorting algorithm:\n                </p>\n                <p className='intro-text'>\n                1: An array with only one element is considered as a sorted array. <br></br>\n\t            2: It is super easy to merge two sorted arrays into one sorted array.\n\n                </p>\n                <p className='intro-text'>\n                The first one is kind of making sense. However, the second one may need some deeper thought. Basically, you can consider this as a selection sort where the minimum is always at the front of the two arrays. This means the computer does not need to iterate through the array for finding the minimum, which makes merge two sorted arrays be an easy task. And the following animation shows why such merging process is an easy task for your computer.\n                </p>\n                <h3>Demo</h3>\n                <MergeSortBasic />\n\n                <p className='intro-text'>\n                With those two facts, the interesting though about Merge Sort is that: suppose we first break the unsorted array into smaller and smaller pieces, until the pieces only contain 1 item. Then, since merging two sorted arrays is an easy task, we then merge those separated pieces into one joint array. This means, by using both facts, we can successfully sort the pieces. And the following pseudocode shows the basic logic to break the arrays and merge them back.\n                </p>\n\n                <div className='code-block'>\n                <code>\n                Step 1 − if it is only one element in the list it is already sorted, return.<br></br>\n                Step 2 − divide the list recursively into two halves until it can no more be divided.<br></br>\n                Step 3 − merge two sorted list into one and return it.<br></br>\n                </code>\n                </div>\n                <p className='intro-text'>\n                However, this algorithm does have some imperfection on memory storage. For each time, the computer breaks the array into smaller pieces, it must store it in other place in order to further process the smaller ones. This means in terms of computer storage usage; this algorithm is not as efficient as insertion sort and selection sort. However, it does shine in other aspects, which will be introduced in time complexity section. And the following animation shows the general process of merge sort, and why it may need some auxiliary storage. \n                </p>\n\n                <h3>Demo</h3>\n                <MergeSort />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Intro } from './Components/Intro'\nimport { RuleOfThumb } from './Components/RuleOfThumb';\nimport {ComplexityAnalysis} from './Components/ComplexityAnalysis'\nimport {SortingAlgorithms} from './Components/SortingAlgorithms'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"title-box\">\n      <p id=\"main-title\">Sorting Algorithm 101</p>\n      <p id=\"sub-title\">Better than the Algorithm Class in College</p>\n      <p>By Tao Long, Haoran Pu, Yichao Wang</p>\n      </div>\n      <Intro />\n      <SortingAlgorithms/>\n      <ComplexityAnalysis />\n      <RuleOfThumb />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/timeplot.1abd1fac.png\";","module.exports = __webpack_public_path__ + \"static/media/spaceplot.29d7fe4d.png\";"],"sourceRoot":""}