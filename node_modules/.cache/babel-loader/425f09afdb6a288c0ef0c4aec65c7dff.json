{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/ComplexityAnalysis.js\";\nimport React, { Component } from 'react';\nimport { Nav, Image, Table } from 'react-bootstrap';\nimport timePlot from './image/timeplot.png';\nimport spacePlot from './image/spaceplot.png';\nimport MathJax from 'react-mathjax2';\nexport class ComplexityAnalysis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayTimePlot: true\n    };\n    this.handleChangePlot = this.handleChangePlot.bind(this);\n  }\n\n  handleChangePlot() {\n    this.setState({\n      displayTimePlot: !this.state.displayTimePlot\n    });\n  }\n\n  componentDidMount() {}\n\n  render() {\n    let plotImage;\n\n    if (this.state.displayTimePlot) {\n      plotImage = React.createElement(Image, {\n        src: timePlot,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      });\n    } else {\n      plotImage = React.createElement(Image, {\n        src: spacePlot,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"intro-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Complexity Analysis\"), React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"There are many sorting algorithms in programming world. However, there exist tradeoffs among the algorithms. In order to compare the performance of different algorithms, we should consider time complexity and space complexity. Time complexity denotes the amount of time taken by an algorithm to run based on the length of the input. Similarly, space complexity denotes the amount of space or memory taken by an algorithm to run based on the length of the input.\"), React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Normally, we use Big O-notation to analyze algorithms. It defines an upper bound of an algorithm. The mathematic definition of Big O-notation is shown below:\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, 'f(n)=O(g(n))'), \" if there exists a positive integer \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, 'n_0'), \" and a positive constant \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, 'c', \" \"), \" such that \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, 'f(n)\\\\leq cg(n) \\\\forall n \\\\geq n_0'), \".\"))), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Selection Sort\"), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"For each time to pick the minimum of the unsorted list, it is most likely to go through all of the items in the unsorted list. If you calculate arithemetic sum, the dominant term is \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, 'n^2'), \", which means, in general, the runtime complexity for selection sort is \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, 'O(n^2)'), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), \"However, the sorting can be done within the given array so that it does not require extra memory. Thus, the space complexity is \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, 'O(1)'), \".\")), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Insertion Sort\"), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Similar to selection sort, time complexity for insertion sort is \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, 'O(n^2)'), \" and space complexity is \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, 'O(1)'), \".\")), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Merge sort is a divide and conquer algorithm. Thus, its time complexity is \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, 'O(nlogn)'), \" as merge sort always divides the array in two halves and take linear time to merge two halves. However, its space complexity become \", React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, 'O(n)'), \" since it always need to store the elements somewhere else.\")), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Time and Space Complexity Comparison Table \"), React.createElement(Table, {\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Sorting Algorithm\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Time Complexity (Average and Worst Case)\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Space Complexity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Stablility\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Selection Sort\"), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, 'O(n^2)'))), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, 'O(1)'))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Unstable\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Insertion Sort\"), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, 'O(n^2)'))), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, 'O(1)'))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Stable\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"MergeSort\"), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, 'O(nlogn)'))), React.createElement(MathJax.Context, {\n      input: \"tex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(MathJax.Node, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, 'O(n)'))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Stable\")))), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Time and Space Complexity Plots\"), React.createElement(Nav, {\n      variant: \"tabs\",\n      defaultActiveKey: \"time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"time\",\n      onClick: this.handleChangePlot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Time\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"space\",\n      onClick: this.handleChangePlot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Space\"))), plotImage, React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"From above, we can see although the time complexity for merge sort is O(nlogn) which is faster than insertion and selection sort, it takes more space to run.\"), React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"In addition to time and space complexity, sometimes we also care stability of the sorting algorithms. A sorting technique is stable if it does not change the order of elements with the same value. Insertion sort and merge sort are stable while selection sort is not.\"), React.createElement(\"p\", {\n      className: \"intro-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Therefore, we can choose the best algorithm to solve particular problem by evaluate these tradeoffs.\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/ComplexityAnalysis.js"],"names":["React","Component","Nav","Image","Table","timePlot","spacePlot","MathJax","ComplexityAnalysis","constructor","props","state","displayTimePlot","handleChangePlot","bind","setState","componentDidMount","render","plotImage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Nav, Image, Table} from 'react-bootstrap';\nimport timePlot from './image/timeplot.png';\nimport spacePlot from './image/spaceplot.png';\nimport MathJax from 'react-mathjax2'\n\nexport class ComplexityAnalysis extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            displayTimePlot: true\n        }\n        this.handleChangePlot = this.handleChangePlot.bind(this)\n    }\n   \n    handleChangePlot() {\n        this.setState({displayTimePlot: !this.state.displayTimePlot})\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        let plotImage;\n        if (this.state.displayTimePlot) {\n            plotImage = <Image src={timePlot}></Image>\n        } else {\n            plotImage = <Image src={spacePlot}></Image>\n        }\n\n\n        return(\n            <div className=\"intro-container\">\n                <h1>Complexity Analysis</h1>\n                \n                <p className='intro-text'>\n                There are many sorting algorithms in programming world. However, there exist tradeoffs among the algorithms. In order to compare the performance of different algorithms, we should consider time complexity and space complexity. Time complexity denotes the amount of time taken by an algorithm to run based on the length of the input. Similarly, space complexity denotes the amount of space or memory taken by an algorithm to run based on the length of the input.\n\n                </p>\n\n                <p className='intro-text'>\n                Normally, we use Big O-notation to analyze algorithms. It defines an upper bound of an algorithm. The mathematic definition of Big O-notation is shown below:\n                </p>\n\n                <div>\n                    <MathJax.Context input='tex'>\n                        <p>\n                            <MathJax.Node inline>{'f(n)=O(g(n))'}</MathJax.Node> if there exists a positive integer <MathJax.Node inline>{'n_0'}</MathJax.Node> and a positive constant <MathJax.Node inline>{'c'} </MathJax.Node> such that <MathJax.Node inline>{'f(n)\\\\leq cg(n) \\\\forall n \\\\geq n_0'}</MathJax.Node>.\n                        </p>\n                    </MathJax.Context>\n                </div>\n\n                <h2>Selection Sort</h2>\n\n                <MathJax.Context input='tex'>\n                <p className='intro-text'>\n                    For each time to pick the minimum of the unsorted list, it is most likely to go through all of the items in the unsorted list. If you calculate arithemetic sum, the dominant term is <MathJax.Node inline>{'n^2'}</MathJax.Node>,\n                    which means, in general, the runtime complexity for selection sort is <MathJax.Node inline>{'O(n^2)'}</MathJax.Node> \n                    <br></br>\n                    However, the sorting can be done within the given array so that it does not require extra memory. Thus, the space complexity is <MathJax.Node inline>{'O(1)'}</MathJax.Node>.\n                </p>\n                </MathJax.Context>\n\n                <h2>Insertion Sort</h2>\n\n                <MathJax.Context input='tex'>\n                <p className='intro-text'>\n                Similar to selection sort, time complexity for insertion sort is <MathJax.Node inline>{'O(n^2)'}</MathJax.Node> and space complexity is <MathJax.Node inline>{'O(1)'}</MathJax.Node>.\n                </p>\n                </MathJax.Context>\n\n                <h2>Merge Sort</h2>\n\n                <MathJax.Context input='tex'>\n                <p className='intro-text'>\n                Merge sort is a divide and conquer algorithm. Thus, its time complexity is <MathJax.Node inline>{'O(nlogn)'}</MathJax.Node> as merge sort always divides the array in two halves and take linear time to merge two halves. However, its space complexity become <MathJax.Node inline>{'O(n)'}</MathJax.Node> since it always need to store the elements somewhere else.\n                </p>\n                </MathJax.Context>\n\n\n                <h2>Time and Space Complexity Comparison Table </h2>\n\n                <Table responsive>\n                    <thead>\n                        <tr>\n                        <th>Sorting Algorithm</th>\n                        <th>Time Complexity (Average and Worst Case)</th>\n                        <th>Space Complexity</th>\n                        <th>Stablility</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        \n                        <tr>\n                        <td>Selection Sort</td>\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(n^2)'}</MathJax.Node></td>\n                        </MathJax.Context>\n\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(1)'}</MathJax.Node></td>\n                        </MathJax.Context>\n                        <td>Unstable</td>\n                        </tr>\n\n                        <tr>\n                        <td>Insertion Sort</td>\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(n^2)'}</MathJax.Node></td>\n                        </MathJax.Context>\n\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(1)'}</MathJax.Node></td>\n                        </MathJax.Context>\n                        <td>Stable</td>\n                        </tr>\n                        \n                        <tr>\n                        <td>MergeSort</td>\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(nlogn)'}</MathJax.Node></td>\n                        </MathJax.Context>\n\n                        <MathJax.Context input='tex'>\n                        <td><MathJax.Node inline>{'O(n)'}</MathJax.Node></td>\n                        </MathJax.Context>\n                        <td>Stable</td>\n                        </tr>\n                    </tbody>\n                </Table>\n                <h2>Time and Space Complexity Plots</h2>\n                <Nav variant=\"tabs\" defaultActiveKey=\"time\">\n                <Nav.Item>\n                    <Nav.Link eventKey=\"time\" onClick={this.handleChangePlot}>Time</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"space\" onClick={this.handleChangePlot}>Space</Nav.Link>\n                </Nav.Item>\n                </Nav>\n                {plotImage}\n\n                <p className='intro-text'>\n                From above, we can see although the time complexity for merge sort is O(nlogn) which is faster than insertion and selection sort, it takes more space to run. \n                </p>\n\n                <p className='intro-text'>\n                In addition to time and space complexity, sometimes we also care stability of the sorting algorithms. A sorting technique is stable if it does not change the order of elements with the same value. Insertion sort and merge sort are stable while selection sort is not.\n                </p>\n\n                <p className='intro-text'>\n                Therefore, we can choose the best algorithm to solve particular problem by evaluate these tradeoffs.  \n                </p>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}