{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSortBasic.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class MergeSortBasic extends GridStructure {\n  constructor(props) {\n    // 1: Grid Width 30px\n    // 2: Grid Height 30px\n    // 3: nRow: 3\n    // 4: nCol: 13\n    // 5: padding: 0.05\n    // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n    super(props, 30, 30, 3, 12, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"MergeBasic\");\n    this.svg = null;\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    this.separatorInitial = {\n      row: 1,\n      col: 1\n    };\n    this.initViz = this.initViz.bind(this);\n    this.getActions = this.getActions.bind(this);\n    this.getShiftIndex = this.getShiftIndex.bind(this);\n    this.vizCompare = this.vizCompare.bind(this);\n    this.vizMin = this.vizMin.bind(this);\n    this.vizPush = this.vizPush.bind(this);\n    this.vizSortOneArray = this.vizSortOneArray.bind(this);\n    this.clearViz = this.clearViz.bind(this);\n    this.arrayStartCol = 3;\n    let first = [1, 2, 4, 5];\n    let second = [2, 3, 4, 7, 8];\n    let initActions = this.getActions(first, second);\n    this.state = {\n      first: first,\n      second: second,\n      actions: initActions,\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.initViz();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.setNewArray) {\n      this.clearViz();\n      this.initViz();\n      this.setState({\n        setNewArray: false\n      });\n    } else {\n      let inverse = this.state.step < prevState.step;\n      let action = this.state.actions[this.state.step];\n\n      if (inverse) {\n        action = prevState.actions[prevState.step];\n      }\n\n      let actionSplit = [];\n\n      if (action.desc !== null) {\n        actionSplit = action.desc.split(\" \");\n      }\n\n      if (action.desc === \"Compare the Minimum of Two Arrays\") {\n        this.vizCompare(action.how, inverse);\n      } else if (actionSplit[0] === \"Looks\" && actionSplit[1] === \"Like\") {\n        this.vizMin(action.how, inverse);\n      } else if (actionSplit[0] === \"Push\") {\n        this.vizPush(action.how, inverse);\n      } else if (actionSplit[0] === \"Just\") {\n        this.vizSortOneArray(action.how, inverse);\n      }\n    }\n  }\n\n  initViz() {\n    this.drawHorizontalGrid();\n    this.visulizeBox(1, 1, 2, 1, \"1st\", \"First-Tag\", \"gray\", \"white\");\n    this.visulizeBox(2, 1, 2, 1, \"2nd\", \"Second-Tag\", \"gray\", \"white\");\n    this.visulizeBox(3, 1, 2, 1, \"Result\", \"Result-Tag\", \"green\", \"white\");\n    this.drawLine(57, 0, 57, 90);\n\n    for (let i = 0; i < this.state.first.length; i++) {\n      this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.first[i], \"MergeBasic-\" + 1 + i, \"gray\", \"white\");\n    }\n\n    for (let i = 0; i < this.state.second.length; i++) {\n      this.visulizeBox(2, i + this.arrayStartCol, 1, 1, this.state.second[i], \"MergeBasic-\" + 2 + i, \"gray\", \"white\");\n    }\n  }\n\n  clearViz() {\n    this.svg.selectAll(\"g\").remove();\n  }\n\n  vizCompare(how, inverse) {\n    let elem1 = how[0].split(\" \");\n    let elem2 = how[1].split(\" \");\n\n    if (!inverse) {\n      this.select(elem1[1], null, this.state.speed);\n      this.select(elem2[1], null, this.state.speed);\n    } else {\n      this.deselect(elem1[1], null, this.state.speed);\n      this.deselect(elem2[1], null, this.state.speed);\n    }\n  }\n\n  vizMin(how, inverse) {\n    let elem = how[0].split(\" \")[1];\n\n    if (!inverse) {\n      this.sorted(elem, null, this.state.speed);\n    } else {\n      this.select(elem, null, this.state.speed);\n    }\n  }\n\n  vizPush(how, inverse) {\n    let shiftDirection = -1;\n    let moveDir = 3;\n\n    if (inverse) {\n      shiftDirection = 0;\n      moveDir = 2;\n      this.select(how[0].split(\" \")[1], null, this.state.speed);\n    } else {\n      this.deselect(how[0].split(\" \")[1], null, this.state.speed);\n    }\n\n    this.shift(how[2], null, this.state.speed, shiftDirection);\n    let move = how[1].split(\" \");\n    let movePosit = move[moveDir].split(\"-\");\n    this.move(move[1], +movePosit[0], +movePosit[1], 0.05, 0.05, null, this.state.speed);\n  }\n\n  vizSortOneArray(how, inverse) {\n    let shiftDirection = -1;\n    let moveDir = 3;\n\n    if (inverse) {\n      shiftDirection = 0;\n      moveDir = 2;\n      this.deselect(how[0].split(\" \")[1], null, this.state.speed);\n    } else {\n      this.sorted(how[0].split(\" \")[1], null, this.state.speed);\n    }\n\n    this.shift(how[2], null, this.state.speed, shiftDirection);\n    let move = how[1].split(\" \");\n    let movePosit = move[moveDir].split(\"-\");\n    this.move(move[1], +movePosit[0], +movePosit[1], 0.05, 0.05, null, this.state.speed);\n  }\n\n  getActions(firstArray = this.state.first, secondArray = this.state.second) {\n    let first = [];\n    let second = [];\n    let result = [];\n\n    for (let i = 0; i < firstArray.length; i++) {\n      first.push({\n        num: firstArray[i],\n        id: i\n      });\n    }\n\n    for (let i = 0; i < secondArray.length; i++) {\n      second.push({\n        num: secondArray[i],\n        id: i\n      });\n    }\n\n    let actions = [{\n      desc: \"Start Sorting\",\n      how: []\n    }];\n    let num1Position = 1 + \"-\" + this.arrayStartCol;\n    let num2Position = 2 + \"-\" + this.arrayStartCol;\n\n    while (first.length > 0 && second.length > 0) {\n      let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol);\n      let num1 = first[0].num;\n      let num2 = second[0].num;\n      let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n      let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n      actions.push({\n        desc: \"Compare the Minimum of Two Arrays\",\n        how: [\"Select \" + num1ID, \"Select \" + num2ID]\n      });\n\n      if (num1 <= num2) {\n        actions.push({\n          desc: \"Looks Like the First Array Has the Lower Value\",\n          how: [\"Sort \" + num1ID]\n        });\n        result.push(first.shift());\n        let shiftCommand = this.getShiftIndex(first, 1);\n        actions.push({\n          desc: \"Push the Minimum of the First Array to the End of the Result\",\n          how: [\"Deselect \" + num2ID, \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition, shiftCommand]\n        });\n      } else {\n        actions.push({\n          desc: \"Looks Like the Second Array Has the Lower Value\",\n          how: [\"Sort \" + num2ID]\n        });\n        result.push(second.shift());\n        let shiftCommand = this.getShiftIndex(second, 2);\n        actions.push({\n          desc: \"Push the Minimum of the Second Array to the End of the Result\",\n          how: [\"Deselect \" + num1ID, \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition, shiftCommand]\n        });\n      }\n    }\n\n    while (first.length > 0) {\n      let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n      let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol);\n      result.push(first.shift());\n      let shiftCommand = this.getShiftIndex(first, 1);\n      actions.push({\n        desc: \"Just One Array: Push the Minimum to the End of the Result\",\n        how: [\"Sort \" + num1ID, \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition, shiftCommand]\n      });\n    }\n\n    while (second.length > 0) {\n      let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n      let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol);\n      result.push(second.shift());\n      let shiftCommand = this.getShiftIndex(second, 2);\n      actions.push({\n        desc: \"Just One Array: Push the Minimum to the End of the Result\",\n        how: [\"Sort \" + num2ID, \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition, shiftCommand]\n      });\n    }\n\n    actions.push({\n      desc: \"Sort Finished\",\n      how: []\n    });\n    return actions;\n  }\n\n  getShiftIndex(nums, row) {\n    let shiftCommand = \"Shift \";\n    let result = [];\n\n    for (let i = 0; i < nums.length; i++) {\n      result.push(\"MergeBasic-\" + row + nums[i].id);\n    }\n\n    shiftCommand += result;\n\n    if (nums.length > 0) {\n      shiftCommand += \" \" + row + \"-\" + (this.arrayStartCol + 1);\n    } else {\n      shiftCommand += \" null\";\n    }\n\n    return shiftCommand;\n  }\n\n  render() {\n    let actionDisplay = \"Finding Algorithm\";\n\n    if (this.state.actions.length > 0) {\n      let cur = Math.min(this.state.actions.length - 1, this.state.step);\n      actionDisplay = this.state.actions[cur].desc;\n    }\n\n    let animationSign = \"Run!\";\n\n    if (this.state.animation) {\n      animationSign = \"Stop\";\n    }\n\n    return React.createElement(\"div\", {\n      id: \"MergeBasic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, actionDisplay), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step > 0) {\n          this.setState({\n            step: this.state.step - 1\n          });\n        }\n      },\n      disabled: this.state.step === 0 || this.state.animation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Prev\"), React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step < this.state.actions.length - 1) {\n          this.setState({\n            step: this.state.step + 1\n          });\n        }\n      },\n      disabled: this.state.step === this.state.actions.length - 1 || this.state.animation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      onClick: () => {\n        let newArray1 = this.generateRandomArray(4, 5);\n        let newArray2 = this.generateRandomArray(4, 5);\n        newArray1.sort((a, b) => {\n          return a - b;\n        });\n        newArray2.sort((a, b) => {\n          return a - b;\n        });\n        let newAction = this.getActions(newArray1, newArray2);\n        this.setState({\n          first: newArray1,\n          second: newArray2,\n          actions: newAction,\n          step: 0,\n          setNewArray: true\n        });\n      },\n      disabled: this.state.animation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"New Array\"), React.createElement(\"button\", {\n      onClick: () => {\n        if (!this.state.animation) {\n          let animationStep = () => {\n            this.setState({\n              animation: window.setInterval(() => {\n                if (this.state.step < this.state.actions.length - 1) {\n                  this.setState({\n                    step: this.state.step + 1\n                  });\n                } else {\n                  window.clearInterval(this.state.animation);\n                  this.setState({\n                    animation: false\n                  });\n                }\n              }, 800)\n            });\n          };\n\n          if (this.state.step === this.state.actions.length - 1) {\n            this.setState({\n              step: 0\n            }, () => {\n              this.clearViz();\n              this.initViz();\n              animationStep();\n            });\n          } else {\n            animationStep();\n          }\n        } else {\n          this.setState({\n            animation: false\n          });\n          window.clearInterval(this.state.animation);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, animationSign)));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSortBasic.js"],"names":["React","Component","d3","GridStructure","MergeSortBasic","constructor","props","top","bottom","left","right","svg","indicatorInitial","row","col","separatorInitial","initViz","bind","getActions","getShiftIndex","vizCompare","vizMin","vizPush","vizSortOneArray","clearViz","arrayStartCol","first","second","initActions","state","actions","step","speed","setNewArray","animation","componentDidMount","getSVG","drawBasicStructure","componentDidUpdate","prevProps","prevState","setState","inverse","action","actionSplit","desc","split","how","drawHorizontalGrid","visulizeBox","drawLine","i","length","selectAll","remove","elem1","elem2","select","deselect","elem","sorted","shiftDirection","moveDir","shift","move","movePosit","firstArray","secondArray","result","push","num","id","num1Position","num2Position","newPosition","num1","num2","num1ID","num2ID","shiftCommand","nums","render","actionDisplay","cur","Math","min","animationSign","newArray1","generateRandomArray","newArray2","sort","a","b","newAction","animationStep","window","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\nexport class MergeSortBasic extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 3\n        // 4: nCol: 13\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 3, 12, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"MergeBasic\")\n\n        this.svg = null;\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.initViz = this.initViz.bind(this)\n        this.getActions = this.getActions.bind(this)\n        this.getShiftIndex = this.getShiftIndex.bind(this)\n        this.vizCompare = this.vizCompare.bind(this)\n        this.vizMin = this.vizMin.bind(this)\n        this.vizPush = this.vizPush.bind(this)\n        this.vizSortOneArray = this.vizSortOneArray.bind(this)\n        this.clearViz = this.clearViz.bind(this)\n\n        this.arrayStartCol = 3;\n\n        let first = [1, 2, 4, 5]\n        let second = [2, 3, 4, 7, 8]\n\n        let initActions = this.getActions(first, second)\n\n        this.state = {\n            first: first,\n            second: second,\n            actions: initActions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.setNewArray) {\n            this.clearViz();\n            this.initViz();\n            this.setState({\n                setNewArray: false\n            })\n        } else {\n            let inverse = this.state.step < prevState.step\n            let action = this.state.actions[this.state.step];\n            if (inverse) {\n                action = prevState.actions[prevState.step];\n            }\n            let actionSplit = [];\n            if (action.desc !== null) {\n                actionSplit = action.desc.split(\" \")\n            }\n            \n            if (action.desc === \"Compare the Minimum of Two Arrays\") {\n                this.vizCompare(action.how, inverse)\n            } else if (actionSplit[0] === \"Looks\" && actionSplit[1] === \"Like\") {\n                this.vizMin(action.how, inverse)\n            } else if (actionSplit[0] === \"Push\") {\n                this.vizPush(action.how, inverse)\n            } else if (actionSplit[0] === \"Just\") {\n                this.vizSortOneArray(action.how, inverse)\n            }\n         \n        }\n    }\n\n    initViz() {\n        this.drawHorizontalGrid();\n        this.visulizeBox(1, 1, 2, 1, \"1st\", \"First-Tag\", \"gray\", \"white\")\n        this.visulizeBox(2, 1, 2, 1, \"2nd\", \"Second-Tag\", \"gray\", \"white\")\n        this.visulizeBox(3, 1, 2, 1, \"Result\", \"Result-Tag\", \"green\", \"white\")\n        this.drawLine(57, 0, 57, 90)\n        for (let i = 0; i < this.state.first.length; i++) {\n            this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.first[i], \"MergeBasic-\" + 1 + i, \"gray\", \"white\")\n        }\n\n        for (let i = 0; i < this.state.second.length; i++) {\n            this.visulizeBox(2, i + this.arrayStartCol, 1, 1, this.state.second[i], \"MergeBasic-\" + 2 + i, \"gray\", \"white\")\n        }\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    vizCompare(how, inverse) {\n        let elem1 = how[0].split(\" \")\n        let elem2 = how[1].split(\" \")\n        if (!inverse) {\n            this.select(elem1[1], null, this.state.speed)\n            this.select(elem2[1], null, this.state.speed)\n        } else {\n            this.deselect(elem1[1], null, this.state.speed)\n            this.deselect(elem2[1], null, this.state.speed)\n        }\n    }\n\n    vizMin(how, inverse) {\n        let elem = how[0].split(\" \")[1]\n        if (!inverse) {\n            this.sorted(elem, null, this.state.speed)\n        } else {\n            this.select(elem, null, this.state.speed)\n        }\n    }\n\n    vizPush(how, inverse) {\n        let shiftDirection = -1\n        let moveDir = 3\n        if (inverse) {\n            shiftDirection = 0\n            moveDir = 2;\n            this.select(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.deselect(how[0].split(\" \")[1], null, this.state.speed)\n        }\n\n        this.shift(how[2], null, this.state.speed, shiftDirection)\n        let move = how[1].split(\" \");\n        let movePosit = move[moveDir].split(\"-\")\n        this.move(move[1], +movePosit[0], +movePosit[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    vizSortOneArray(how, inverse) {\n        let shiftDirection = -1\n        let moveDir = 3\n        if (inverse) {\n            shiftDirection = 0\n            moveDir = 2;\n            this.deselect(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.sorted(how[0].split(\" \")[1], null, this.state.speed)\n        }\n\n        this.shift(how[2], null, this.state.speed, shiftDirection)\n        let move = how[1].split(\" \");\n        let movePosit = move[moveDir].split(\"-\")\n        this.move(move[1], +movePosit[0], +movePosit[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    getActions(firstArray = this.state.first, secondArray = this.state.second) {\n        let first = [];\n        let second = [];\n        let result = [];\n        for (let i = 0; i < firstArray.length; i++) {\n            first.push({\n                num: firstArray[i],\n                id: i\n            })\n        }\n\n        for (let i = 0; i < secondArray.length; i++) {\n            second.push({\n                num: secondArray[i],\n                id: i\n            })\n        }\n\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n        let num1Position = 1 + \"-\" + this.arrayStartCol;\n        let num2Position = 2 + \"-\" + this.arrayStartCol;\n        while (first.length > 0 && second.length > 0) {\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n            let num1 = first[0].num;\n            let num2 = second[0].num;\n            let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n            let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n            actions.push({\n                desc: \"Compare the Minimum of Two Arrays\",\n                how: [\n                    \"Select \" + num1ID, \"Select \" + num2ID\n                ]\n            })\n\n            if (num1 <= num2) {\n                actions.push({\n                    desc: \"Looks Like the First Array Has the Lower Value\",\n                    how: [\n                        \"Sort \" + num1ID\n                    ]\n                })\n\n                result.push(first.shift())\n\n                let shiftCommand = this.getShiftIndex(first, 1)\n\n                actions.push({\n                    desc: \"Push the Minimum of the First Array to the End of the Result\",\n                    how: [\n                        \"Deselect \" + num2ID,\n                        \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition,\n                        shiftCommand\n                    ]\n                })\n            } else {\n                actions.push({\n                    desc: \"Looks Like the Second Array Has the Lower Value\",\n                    how: [\n                        \"Sort \" + num2ID\n                    ]\n                })\n                result.push(second.shift())\n\n                let shiftCommand = this.getShiftIndex(second, 2)\n\n                actions.push({\n                    desc: \"Push the Minimum of the Second Array to the End of the Result\",\n                    how: [\n                        \"Deselect \" + num1ID,\n                        \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition,\n                        shiftCommand\n                    ]\n                })\n            }\n        }\n\n        while(first.length > 0) {\n            let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n            result.push(first.shift())\n            let shiftCommand = this.getShiftIndex(first, 1)\n\n            actions.push({\n                desc: \"Just One Array: Push the Minimum to the End of the Result\",\n                how: [\n                    \"Sort \" + num1ID,\n                    \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition,\n                    shiftCommand\n                ]\n            })\n        }\n\n        while(second.length > 0) {\n            let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n\n            result.push(second.shift())\n            let shiftCommand = this.getShiftIndex(second, 2)\n\n            actions.push({\n                desc: \"Just One Array: Push the Minimum to the End of the Result\",\n                how: [\n                    \"Sort \" + num2ID,\n                    \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition,\n                    shiftCommand\n                ]\n            })\n        }\n\n        actions.push({\n            desc: \"Sort Finished\",\n            how: []\n        })\n\n        return(actions)\n    }\n\n    getShiftIndex(nums, row) {\n        let shiftCommand = \"Shift \";\n\n        let result = [];\n\n        for (let i = 0; i < nums.length; i++) {\n            result.push(\"MergeBasic-\" + row + nums[i].id)\n        }\n\n        shiftCommand += result;\n\n        if (nums.length > 0) {\n            shiftCommand += \" \" + row + \"-\" + (this.arrayStartCol + 1)\n        } else {\n            shiftCommand += \" null\"\n        }\n        return(shiftCommand)\n    }\n\n    \n    render() {\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            let cur = Math.min(this.state.actions.length - 1, this.state.step)\n            actionDisplay = this.state.actions[cur].desc;\n        }\n\n        let animationSign = \"Run!\"\n        if (this.state.animation) {\n            animationSign = \"Stop\"\n        }\n        return(\n            <div id=\"MergeBasic\">\n                <div>{actionDisplay}</div>\n                <div>\n                    <button onClick={() => {\n                        if (this.state.step > 0) {\n                            this.setState({\n                                step: this.state.step - 1\n                            })\n                        }\n                    }} disabled={this.state.step === 0 || this.state.animation}>Prev</button>\n                    <button onClick={() => {\n                        if (this.state.step < this.state.actions.length - 1) {\n                            this.setState({\n                                step: this.state.step + 1\n                            })\n                        }\n                    }} disabled={this.state.step === this.state.actions.length - 1 || this.state.animation}>Next</button>\n\n                    <button onClick={() => {\n                        let newArray1 = this.generateRandomArray(4, 5);\n                        let newArray2 = this.generateRandomArray(4, 5);\n                        newArray1.sort((a, b) => {\n                            return(a - b)\n                        })\n\n                        newArray2.sort((a, b) => {\n                            return(a - b)\n                        })\n\n                        let newAction = this.getActions(newArray1, newArray2);\n                        this.setState({\n                            first: newArray1,\n                            second: newArray2,\n                            actions: newAction,\n                            step: 0,\n                            setNewArray: true\n                        })\n                    }} disabled={this.state.animation}>New Array</button>\n\n                    <button onClick={() => {\n                        if (!this.state.animation) {\n                            let animationStep = () => {\n                                this.setState({\n                                    animation: window.setInterval(() => {\n                                        if (this.state.step < this.state.actions.length - 1) {\n                                            this.setState({\n                                                step: this.state.step + 1\n                                            })   \n                                        } else {\n                                            window.clearInterval(this.state.animation);\n                                            this.setState({\n                                                animation: false\n                                            })\n                                        }\n                                    }, 800)\n                                })\n                            }\n\n                            if (this.state.step === this.state.actions.length - 1) {\n                                this.setState({\n                                    step: 0\n                                }, () => {\n                                    this.clearViz();\n                                    this.initViz();\n                                    animationStep();\n                                })\n                            } else {\n                                animationStep();\n                            }\n                        } else {\n                            this.setState({\n                                animation: false\n                            })\n                            window.clearInterval(this.state.animation);\n                        }\n                    }}>{animationSign}</button>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}