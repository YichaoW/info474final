{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSortBasic.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class MergeSortBasic extends GridStructure {\n  constructor(props) {\n    // 1: Grid Width 30px\n    // 2: Grid Height 30px\n    // 3: nRow: 3\n    // 4: nCol: 10\n    // 5: padding: 0.05\n    // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n    super(props, 30, 30, 3, 12, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"MergeBasic\");\n    this.svg = null;\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    this.separatorInitial = {\n      row: 1,\n      col: 1\n    };\n    this.initViz = this.initViz.bind(this);\n    this.getActions = this.getActions.bind(this);\n    this.getShiftIndex = this.getShiftIndex.bind(this);\n    this.vizCompare = this.vizCompare.bind(this);\n    let first = [1, 2, 4, 5];\n    let second = [2, 3, 4, 7, 8];\n    let initActions = this.getActions(first, second);\n    this.arrayStartCol = 3;\n    this.state = {\n      first: first,\n      second: second,\n      actions: initActions,\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.initViz();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.setNewArray) {\n      this.clearViz();\n      this.initViz();\n      this.setState({\n        setNewArray: false\n      });\n    } else {\n      if (this.state.step > prevState.step) {\n        let action = this.state.actions[this.state.step];\n\n        if (action.desc === \"Compare the Minimum of Two Arrays\") {\n          this.vizCompare(action.how);\n        }\n      } else if (this.state.step < prevState.step) {}\n    }\n  }\n\n  initViz() {\n    this.drawHorizontalGrid();\n    this.visulizeBox(1, 1, 2, 1, \"1st\", \"First-Tag\", \"gray\", \"white\");\n    this.visulizeBox(2, 1, 2, 1, \"2nd\", \"Second-Tag\", \"gray\", \"white\");\n    this.visulizeBox(3, 1, 2, 1, \"Result\", \"Result-Tag\", \"#41ab5d\", \"white\");\n    this.drawLine(57, 0, 57, 90);\n\n    for (let i = 0; i < this.state.first.length; i++) {\n      this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.first[i], \"MergeBaisc-\" + 1 + i, \"gray\", \"white\");\n    }\n\n    for (let i = 0; i < this.state.second.length; i++) {\n      this.visulizeBox(2, i + this.arrayStartCol, 1, 1, this.state.second[i], \"MergeBaisc-\" + 2 + i, \"gray\", \"white\");\n    }\n  }\n\n  vizCompare(how, inverse) {\n    if (!inverse) {\n      console.log(how);\n    }\n  }\n\n  getActions(firstArray = this.state.first, secondArray = this.state.second) {\n    let first = [];\n    let second = [];\n    let result = [];\n\n    for (let i = 0; i < firstArray.length; i++) {\n      first.push({\n        num: firstArray[i],\n        id: i\n      });\n    }\n\n    for (let i = 0; i < secondArray.length; i++) {\n      second.push({\n        num: secondArray[i],\n        id: i\n      });\n    }\n\n    let actions = [{\n      desc: \"Start Sorting\",\n      how: []\n    }];\n    let num1Position = 1 + \"-\" + this.arrayStartCol;\n    let num2Position = 2 + \"-\" + this.arrayStartCol;\n\n    while (first.length > 0 && second.length > 0) {\n      let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol);\n      let num1 = first[0].num;\n      let num2 = second[0].num;\n      let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n      let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n      actions.push({\n        desc: \"Compare the Minimum of Two Arrays\",\n        how: [\"Select \" + num1ID, \"Select \" + num2ID]\n      });\n\n      if (num1 <= num2) {\n        actions.push({\n          desc: \"Looks Like the First Array Has the Lower Value\",\n          how: [\"Sort \" + num1ID]\n        });\n        result.push(first.shift());\n        let shiftNums = this.getShiftIndex(first, 1);\n        let shiftCommand = \"Shift \" + shiftNums;\n\n        if (shiftNums !== null) {\n          shiftCommand += \" MergeBasic-\" + 1 + (this.arrayStartCol + 1);\n        }\n\n        actions.push({\n          desc: \"Push the Minimum of the First Array to the End of the Result\",\n          how: [\"Deselect \" + num2ID, \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition, shiftCommand]\n        });\n      } else {\n        actions.push({\n          desc: \"Looks Like the Second Array Has the Lower Value\",\n          how: [\"Sort \" + num2ID]\n        });\n        result.push(second.shift());\n        let shiftNums = this.getShiftIndex(second, 2);\n        let shiftCommand = \"Shift \" + shiftNums;\n\n        if (shiftNums !== null) {\n          shiftCommand += \" MergeBasic-\" + 2 + (this.arrayStartCol + 1);\n        }\n\n        actions.push({\n          desc: \"Push the Minimum of the Second Array to the End of the Result\",\n          how: [\"Deselect \" + num1ID, \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition, shiftCommand]\n        });\n      }\n    }\n\n    while (first.length > 0) {\n      let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n      let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol);\n      result.push(first.shift());\n      let shiftNums = this.getShiftIndex(first, 1);\n      let shiftCommand = \"Shift \" + shiftNums;\n\n      if (shiftNums !== null) {\n        shiftCommand += \" MergeBasic-\" + 1 + (this.arrayStartCol + 1);\n      }\n\n      actions.push({\n        desc: \"Just One Array: Push the Minimum to the End of the Result\",\n        how: [\"Sort \" + num1ID, \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition, shiftCommand]\n      });\n    }\n\n    while (second.length > 0) {\n      let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n      let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol);\n      result.push(second.shift());\n      let shiftNums = this.getShiftIndex(second, 2);\n      let shiftCommand = \"Shift \" + shiftNums;\n\n      if (shiftNums !== null) {\n        shiftCommand += \" MergeBasic-\" + 2 + (this.arrayStartCol + 1);\n      }\n\n      actions.push({\n        desc: \"Just One Array: Push the Minimum to the End of the Result\",\n        how: [\"Sort \" + num2ID, \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition, shiftCommand]\n      });\n    }\n\n    actions.push({\n      desc: \"Sort Finished\",\n      how: []\n    });\n    return actions;\n  }\n\n  getShiftIndex(nums, row) {\n    if (nums === 0) {\n      return null;\n    } else {\n      let result = [];\n\n      for (let i = 0; i < nums.length; i++) {\n        result.push(\"MergeBasic-\" + row + nums[i].id);\n      }\n\n      return result;\n    }\n  }\n\n  render() {\n    let actionDisplay = \"Finding Algorithm\";\n\n    if (this.state.actions.length > 0) {\n      let cur = Math.min(this.state.actions.length - 1, this.state.step);\n      actionDisplay = this.state.actions[cur].desc;\n    }\n\n    return React.createElement(\"div\", {\n      id: \"MergeBasic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, actionDisplay), React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step < this.state.actions.length - 1) {\n          this.setState({\n            step: this.state.step + 1\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Next\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSortBasic.js"],"names":["React","Component","d3","GridStructure","MergeSortBasic","constructor","props","top","bottom","left","right","svg","indicatorInitial","row","col","separatorInitial","initViz","bind","getActions","getShiftIndex","vizCompare","first","second","initActions","arrayStartCol","state","actions","step","speed","setNewArray","animation","componentDidMount","getSVG","drawBasicStructure","componentDidUpdate","prevProps","prevState","clearViz","setState","action","desc","how","drawHorizontalGrid","visulizeBox","drawLine","i","length","inverse","console","log","firstArray","secondArray","result","push","num","id","num1Position","num2Position","newPosition","num1","num2","num1ID","num2ID","shift","shiftNums","shiftCommand","nums","render","actionDisplay","cur","Math","min"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\nexport class MergeSortBasic extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 3\n        // 4: nCol: 10\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 3, 12, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"MergeBasic\")\n\n        this.svg = null;\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.initViz = this.initViz.bind(this)\n        this.getActions = this.getActions.bind(this)\n        this.getShiftIndex = this.getShiftIndex.bind(this)\n        this.vizCompare = this.vizCompare.bind(this)\n\n        let first = [1, 2, 4, 5]\n        let second = [2, 3, 4, 7, 8]\n\n        let initActions = this.getActions(first, second)\n\n        this.arrayStartCol = 3;\n\n        this.state = {\n            first: first,\n            second: second,\n            actions: initActions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.setNewArray) {\n            this.clearViz();\n            this.initViz();\n            this.setState({\n                setNewArray: false\n            })\n        } else {\n            if (this.state.step > prevState.step) {\n                let action = this.state.actions[this.state.step];\n                if (action.desc === \"Compare the Minimum of Two Arrays\") {\n                    this.vizCompare(action.how)\n                } \n            } else if (this.state.step < prevState.step) {\n                \n            }   \n        }\n    }\n\n    initViz() {\n        this.drawHorizontalGrid();\n        this.visulizeBox(1, 1, 2, 1, \"1st\", \"First-Tag\", \"gray\", \"white\")\n        this.visulizeBox(2, 1, 2, 1, \"2nd\", \"Second-Tag\", \"gray\", \"white\")\n        this.visulizeBox(3, 1, 2, 1, \"Result\", \"Result-Tag\", \"#41ab5d\", \"white\")\n        this.drawLine(57, 0, 57, 90)\n        for (let i = 0; i < this.state.first.length; i++) {\n            this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.first[i], \"MergeBaisc-\" + 1 + i, \"gray\", \"white\")\n        }\n\n        for (let i = 0; i < this.state.second.length; i++) {\n            this.visulizeBox(2, i + this.arrayStartCol, 1, 1, this.state.second[i], \"MergeBaisc-\" + 2 + i, \"gray\", \"white\")\n        }\n    }\n\n    vizCompare(how, inverse) {\n        if (!inverse) {\n            console.log(how)\n        }\n    }\n\n\n    getActions(firstArray = this.state.first, secondArray = this.state.second) {\n        let first = [];\n        let second = [];\n        let result = [];\n        for (let i = 0; i < firstArray.length; i++) {\n            first.push({\n                num: firstArray[i],\n                id: i\n            })\n        }\n\n        for (let i = 0; i < secondArray.length; i++) {\n            second.push({\n                num: secondArray[i],\n                id: i\n            })\n        }\n\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n        let num1Position = 1 + \"-\" + this.arrayStartCol;\n        let num2Position = 2 + \"-\" + this.arrayStartCol;\n        while (first.length > 0 && second.length > 0) {\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n            let num1 = first[0].num;\n            let num2 = second[0].num;\n            let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n            let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n            actions.push({\n                desc: \"Compare the Minimum of Two Arrays\",\n                how: [\n                    \"Select \" + num1ID, \"Select \" + num2ID\n                ]\n            })\n\n            if (num1 <= num2) {\n                actions.push({\n                    desc: \"Looks Like the First Array Has the Lower Value\",\n                    how: [\n                        \"Sort \" + num1ID\n                    ]\n                })\n\n                result.push(first.shift())\n\n                let shiftNums = this.getShiftIndex(first, 1)\n                let shiftCommand = \"Shift \" + shiftNums;\n                if (shiftNums !== null) {\n                    shiftCommand += \" MergeBasic-\" + 1 + (this.arrayStartCol + 1)\n                }\n\n\n                actions.push({\n                    desc: \"Push the Minimum of the First Array to the End of the Result\",\n                    how: [\n                        \"Deselect \" + num2ID,\n                        \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition,\n                        shiftCommand\n                    ]\n                })\n            } else {\n                actions.push({\n                    desc: \"Looks Like the Second Array Has the Lower Value\",\n                    how: [\n                        \"Sort \" + num2ID\n                    ]\n                })\n                result.push(second.shift())\n\n\n                let shiftNums = this.getShiftIndex(second, 2)\n                let shiftCommand = \"Shift \" + shiftNums;\n                if (shiftNums !== null) {\n                    shiftCommand += \" MergeBasic-\" + 2 + (this.arrayStartCol + 1)\n                }\n\n                actions.push({\n                    desc: \"Push the Minimum of the Second Array to the End of the Result\",\n                    how: [\n                        \"Deselect \" + num1ID,\n                        \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition,\n                        shiftCommand\n                    ]\n                })\n            }\n        }\n\n        while(first.length > 0) {\n            let num1ID = \"MergeBasic-\" + 1 + first[0].id;\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n            result.push(first.shift())\n            let shiftNums = this.getShiftIndex(first, 1)\n            let shiftCommand = \"Shift \" + shiftNums;\n            if (shiftNums !== null) {\n                shiftCommand += \" MergeBasic-\" + 1 + (this.arrayStartCol + 1)\n            }\n\n            actions.push({\n                desc: \"Just One Array: Push the Minimum to the End of the Result\",\n                how: [\n                    \"Sort \" + num1ID,\n                    \"Move \" + num1ID + \" \" + num1Position + \" \" + newPosition,\n                    shiftCommand\n                ]\n            })\n        }\n\n        while(second.length > 0) {\n            let num2ID = \"MergeBasic-\" + 2 + second[0].id;\n            let newPosition = 3 + \"-\" + (result.length + this.arrayStartCol)\n\n            result.push(second.shift())\n            let shiftNums = this.getShiftIndex(second, 2)\n            let shiftCommand = \"Shift \" + shiftNums;\n            if (shiftNums !== null) {\n                shiftCommand += \" MergeBasic-\" + 2 + (this.arrayStartCol + 1)\n            }\n\n            actions.push({\n                desc: \"Just One Array: Push the Minimum to the End of the Result\",\n                how: [\n                    \"Sort \" + num2ID,\n                    \"Move \" + num2ID + \" \" + num2Position + \" \" + newPosition,\n                    shiftCommand\n                ]\n            })\n        }\n\n        actions.push({\n            desc: \"Sort Finished\",\n            how: []\n        })\n\n        return(actions)\n    }\n\n    getShiftIndex(nums, row) {\n        if (nums === 0) {\n            return null\n        } else {\n            let result = [];\n            for (let i = 0; i < nums.length; i++) {\n                result.push(\"MergeBasic-\" + row + nums[i].id)\n            }\n            return(result)\n        }\n    }\n\n    \n    render() {\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            let cur = Math.min(this.state.actions.length - 1, this.state.step)\n            actionDisplay = this.state.actions[cur].desc;\n        }\n        return(\n            <div id=\"MergeBasic\">\n                <div>{actionDisplay}</div>\n                <button onClick={() => {\n                    if (this.state.step < this.state.actions.length - 1) {\n                        this.setState({\n                            step: this.state.step + 1\n                        })\n                    }\n                }} >Next</button>\n            </div>\n        )\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}