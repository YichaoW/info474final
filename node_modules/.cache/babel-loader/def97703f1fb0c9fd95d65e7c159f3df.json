{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/SelectionSort.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class SelectionSort extends GridStructure {\n  constructor(props) {\n    // 1: Grid Width 30px\n    // 2: Grid Height 30px\n    // 3: nRow: 3\n    // 4: nCol: 10\n    // 5: padding: 0.05\n    // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n    super(props, 30, 30, 3, 10, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"selection\");\n    this.svg = null;\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.state = {\n      array: [3, 2, 6, 2, 9, 8],\n      action: []\n    };\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    this.separatorIndicator = {\n      row: 1,\n      col: 2\n    };\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 2,\n        col: i + 3\n      };\n    }\n\n    return positionMap;\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    let positionMap = this.getInitialPosition();\n\n    for (let i = 0; i < this.state.array.length; i++) {\n      let position = positionMap[i];\n      let num = this.state.array[i];\n      let id = \"insertion-\" + i;\n      this.visulizeBox(position.row, position.col, 1, 1, num, id);\n    }\n\n    this.drawSeparator(this.separatorIndicator.row, this.separatorIndicator.col);\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, \"min\");\n    this.drawHorizontalGrid();\n  }\n\n  getAction(array = this.state.array) {\n    let actions = [\"start\"];\n    let arrayMap = [];\n    let positions = this.getInitialPosition();\n    let indexes = [];\n    let indicatorRow = this.indicatorInitial.row;\n\n    for (let i = 0; i < array.length; i++) {\n      indexes.push(i);\n      arrayMap.push({\n        number: array[i],\n        index: i\n      });\n    }\n\n    arrayMap = arrayMap.sort((a, b) => {\n      return a.number - b.number;\n    });\n\n    for (let i = 0; i < arrayMap.length; i++) {\n      let index = arrayMap[i].index;\n      let elementPosition = positions[index];\n      let indicatorFrom = indicatorRow + \"-\" + this.indicatorInitial.col;\n      let indicatorTo = indicatorRow + \"-\" + elementPosition.col;\n      let elementID = \"insertion-\" + index;\n      let elementInitial = elementPosition.row + \"-\" + elementPosition.col;\n      let elementStage1 = elementPosition.row + 1 + \"-\" + elementPosition.col;\n      let findMin = {\n        desc: \"Find the Lowest #\",\n        how: [\"Move indicator \" + indicatorFrom + \" \" + indicatorTo, \"Select \" + elementID]\n      };\n      let move = {\n        desc: \"Move the Lowest # to the End of Sorted Array\",\n        how: [\"Move indicator \" + indicatorTo + \" \" + indicatorFrom, \"Move \" + elementID + \" \" + elementInitial + \" \" + elementStage1]\n      };\n      let shift = [];\n      indexes[index] = null;\n\n      for (let i = 0; i < indexes[index]; i++) {\n        if (indexes[i]) {\n          shift.push(indexes[i]);\n        }\n      }\n\n      console.log(shift);\n    }\n  }\n\n  render() {\n    console.log(this.getAction());\n    return React.createElement(\"div\", {\n      id: \"selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/SelectionSort.js"],"names":["React","Component","d3","GridStructure","SelectionSort","constructor","props","top","bottom","left","right","svg","getInitialPosition","bind","getAction","state","array","action","indicatorInitial","row","col","separatorIndicator","positionMap","i","length","componentDidMount","getSVG","drawBasicStructure","position","num","id","visulizeBox","drawSeparator","drawIndicator","drawHorizontalGrid","actions","arrayMap","positions","indexes","indicatorRow","push","number","index","sort","a","b","elementPosition","indicatorFrom","indicatorTo","elementID","elementInitial","elementStage1","findMin","desc","how","move","shift","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\n\nexport class SelectionSort extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 3\n        // 4: nCol: 10\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 3, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"selection\")\n\n        this.svg = null;\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n\n        this.state = {\n            array: [3, 2, 6, 2, 9, 8],\n            action: []    \n        }\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        this.separatorIndicator = {\n            row: 1,\n            col: 2\n        }\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 3\n            }\n        } \n        return(positionMap)\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"insertion-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorIndicator.row, this.separatorIndicator.col);\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, \"min\");\n        this.drawHorizontalGrid()\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [\"start\"];\n        let arrayMap = [];\n        let positions = this.getInitialPosition();\n        let indexes = [];\n\n        let indicatorRow = this.indicatorInitial.row;\n        for (let i = 0; i < array.length; i++) {\n            indexes.push(i);\n            arrayMap.push({\n                number: array[i],\n                index: i\n            })\n        }\n\n        arrayMap = arrayMap.sort((a, b) => {\n            return a.number - b.number;\n        })\n        \n        for (let i = 0; i < arrayMap.length; i++) {\n            let index = arrayMap[i].index;\n            let elementPosition = positions[index]\n\n            let indicatorFrom = indicatorRow + \"-\" + this.indicatorInitial.col;\n            let indicatorTo = indicatorRow + \"-\" + elementPosition.col;\n\n            let elementID = \"insertion-\" + index\n            let elementInitial = elementPosition.row + \"-\" + elementPosition.col;\n            let elementStage1 = (elementPosition.row + 1) + \"-\" + elementPosition.col;\n\n            let findMin = {\n                desc: \"Find the Lowest #\",\n                how: [\"Move indicator \" + indicatorFrom + \" \" + indicatorTo, \n                        \"Select \" + elementID]\n            }\n\n            let move = {\n                desc: \"Move the Lowest # to the End of Sorted Array\",\n                how:[\"Move indicator \" + indicatorTo + \" \" + indicatorFrom,\n                     \"Move \" + elementID + \" \" + elementInitial + \" \" + elementStage1\n                ]\n            }\n\n            let shift = [];\n\n            indexes[index] = null;\n\n            for (let i = 0; i < indexes[index]; i++) {\n                if (indexes[i]) {\n                    shift.push(indexes[i]);\n                }\n            }\n\n            console.log(shift)\n        }\n    }\n\n    render() {\n        console.log(this.getAction())\n        return(\n            <div id=\"selection\"></div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}