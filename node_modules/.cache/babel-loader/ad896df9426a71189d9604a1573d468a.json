{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class Insertion extends GridStructure {\n  constructor(props) {\n    super(props, 30, 30, 3.5, 10, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"insertion\");\n    this.svg = null;\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.visFirst = this.visFirst.bind(this);\n    this.vizBeginInsertion = this.vizBeginInsertion.bind(this);\n    this.vizFirstCompare = this.vizFirstCompare.bind(this);\n    this.vizFoundPlace = this.vizFoundPlace.bind(this);\n    this.vizInsert = this.vizInsert.bind(this);\n    this.vizWarn = this.vizWarn.bind(this);\n    this.vizNextInsertion = this.vizNextInsertion.bind(this);\n    this.vizCompareNearestTow = this.vizCompareNearestTow.bind(this);\n    this.separatorInitial = {\n      row: 1,\n      col: 1\n    };\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    let initArray = [3, 2, 6, 2, 9, 8];\n    let actions = this.getAction(initArray);\n    this.state = {\n      array: initArray,\n      actions: actions,\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.initViz();\n    this.setState({\n      actions: this.getAction(this.state.array)\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.step < this.state.step) {\n      let instruction = this.state.actions[this.state.step]; //console.log(this.state.actions[this.state.step])\n\n      if (instruction.desc === \"Move First Item into Sorted Array\") {\n        this.visFirst(instruction.how);\n      } else if (instruction.desc === \"Begin Insertion\") {\n        this.vizBeginInsertion(instruction.how);\n      } else if (instruction.desc === \"Compare with the First\") {\n        this.vizFirstCompare(instruction.how);\n      } else if (instruction.desc === \"Yeah! We Found the Place\") {\n        this.vizFoundPlace(instruction.how);\n      } else if (instruction.desc === \"Inserting\") {\n        this.vizInsert(instruction.how);\n      } else if (instruction.desc === \"Seems Like This is Not the Place\") {\n        this.vizWarn(instruction.how);\n      } else if (instruction.desc === \"Go to the Next Insertion Point\") {\n        this.vizNextInsertion(instruction.how);\n      } else if (instruction.desc === \"Compare with the Nearest Two\") {\n        this.vizCompareNearestTow(instruction.how);\n      }\n    }\n  }\n\n  visFirst(how) {\n    let sepMove = how[0].split(\" \");\n    let sepTo = sepMove[3].split(\"-\");\n    this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n      let sortAct = how[1].split(\" \");\n      this.sorted(sortAct[1], this.state.speed);\n    }, this.state.speed);\n  }\n\n  vizBeginInsertion(how) {\n    let indicatorAct = how[0].split(\" \");\n    let indicatorTo = indicatorAct[3].split(\"-\");\n    this.move(indicatorAct[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed);\n    let moveAct = how[1].split(\" \");\n    let moveTo = moveAct[3].split(\"-\");\n    this.move(moveAct[1], moveTo[0], moveTo[1], 0.05, 0.05, null, this.state.speed);\n  }\n\n  vizFirstCompare(how) {\n    let select1 = how[0].split(\" \");\n    let select2 = how[1].split(\" \");\n    this.select(select1[1], null, this.state.speed);\n    this.select(select2[1], null, this.state.speed);\n  }\n\n  vizCompareNearestTow(how) {\n    for (let i = 0; i < how.length; i++) {\n      this.select(how[i].split(\" \")[1], null, this.state.speed);\n    }\n  }\n\n  vizFoundPlace(how) {\n    let sort = how[0].split(\" \");\n    this.sorted(sort[1], null, this.state.speed);\n  }\n\n  vizInsert(how) {\n    //console.log(how)\n    console.log(how);\n    let sepIndex = 0;\n    let moveIndex = 1;\n    let indicatorIndex = 2;\n\n    if (how.length > 3) {\n      let shift = how[0];\n      this.shift(shift, null, this.state.speed, 1);\n      sepIndex++;\n      moveIndex++;\n      indicatorIndex++;\n      let sort1Act1 = how[5].split(\" \");\n      console.log(sort1Act1);\n      let sortAct2 = how[4].split(\" \");\n      this.sorted(sortAct2[1], null, this.state.speed);\n    }\n\n    let sepMove = how[sepIndex].split(\" \");\n    let sepTo = sepMove[3].split(\"-\");\n    this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n      let itemMove = how[moveIndex].split(\" \");\n      let itemTo = itemMove[3].split(\"-\");\n      this.move(itemMove[1], itemTo[0], itemTo[1], 0.05, 0.05, () => {}, this.state.speed);\n      let indicatorMove = how[indicatorIndex].split(\" \");\n      let indicatorTo = indicatorMove[3].split(\"-\");\n      this.move(indicatorMove[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed);\n    }, this.state.speed);\n  }\n\n  vizWarn(how) {\n    let warn = how[0].split(\" \");\n    this.warn(warn[1], this.state.speed);\n  }\n\n  vizNextInsertion(how) {\n    let itemMove = how[0].split(\" \");\n    let itemTo = itemMove[3].split(\"-\");\n    this.move(itemMove[1], itemTo[0], itemTo[1], 0.05, 0.05, null, this.state.speed);\n    let indicatorMove = how[1].split(\" \");\n    let indicatorTo = indicatorMove[3].split(\"-\");\n    this.move(indicatorMove[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed);\n    this.sorted(how[2].split(\" \")[1], null, this.state.speed);\n\n    if (how.length > 3) {\n      this.sorted(how[3].split(\" \")[1], null, this.state.speed);\n    }\n  }\n\n  clearViz() {\n    this.svg.selectAll(\"g\").remove();\n  }\n\n  initViz() {\n    let positionMap = this.getInitialPosition();\n\n    for (let i = 0; i < this.state.array.length; i++) {\n      let position = positionMap[i];\n      let num = this.state.array[i];\n      let id = \"insertion-\" + i;\n      this.visulizeBox(position.row, position.col, 1, 1, num, id);\n    }\n\n    this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"insertion\");\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, null, \"insertion\");\n    this.drawHorizontalGrid();\n    this.drawVerticalGrid();\n  }\n\n  getAction(array = this.state.array) {\n    let actions = [{\n      desc: \"Start Sorting\",\n      how: []\n    }];\n    let unsorted = [...array];\n    let sorted = [];\n    let positions = this.getInitialPosition(array);\n    let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n    let indicatorPosition = JSON.parse(JSON.stringify(this.indicatorInitial));\n    let initSep = sepPosition.row + \"-\" + sepPosition.col;\n    sepPosition.col++;\n    let newSep = sepPosition.row + \"-\" + sepPosition.col; //let firstElementRow = positions[0].row\n\n    let firstElementCol = positions[0].col;\n    actions.push({\n      desc: \"Move First Item into Sorted Array\",\n      how: [\"Move separator-insertion \" + initSep + \" \" + newSep, \"Sort insertion-0\"]\n    });\n    sorted.push({\n      num: unsorted.shift(),\n      index: 0\n    });\n    let size = unsorted.length;\n\n    for (let i = 0; i < size; i++) {\n      let num = unsorted.shift();\n      let numID = i + 1;\n      let elementPosition = positions[numID];\n      let elementID = \"insertion-\" + numID;\n      let elementRow = elementPosition.row;\n      let elementCol = elementPosition.col;\n      indicatorPosition.row = 3;\n      indicatorPosition.col = firstElementCol - 0.5;\n      actions.push({\n        desc: \"Begin Insertion\",\n        how: [\"Move indicator-insertion \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \" + 3 + \"-\" + (firstElementCol - 0.5), \"Move \" + elementID + \" \" + elementRow + \"-\" + elementCol + \" \" + 3.5 + \"-\" + (firstElementCol - 0.5)]\n      });\n      positions[numID].col = firstElementCol - 0.5;\n      positions[numID].row = 3.5;\n      let j = 0;\n      let hasSorted = false;\n\n      while (j < sorted.length && !hasSorted) {\n        let action1 = {};\n        let action2 = {};\n        let action3 = {};\n        let sortedIndex = sorted[j].index;\n        let sortPosition = positions[sortedIndex];\n        let sortedNum = sorted[j].num;\n\n        if (j === 0) {\n          action1.desc = \"Compare with the First\";\n          action1.how = [\"Select insertion-\" + sortedIndex, \"Select insertion-\" + numID];\n        } else {\n          action1.desc = \"Compare with the Nearest Two\";\n          action1.how = [\"Select insertion-\" + sortedIndex, \"Select insertion-\" + sorted[j - 1].index, \"Select insertion-\" + numID];\n        }\n\n        if (num < sortedNum) {\n          hasSorted = true;\n          action2.desc = \"Yeah! We Found the Place\";\n          action2.how = [\"Sort insertion-\" + numID];\n          action3.desc = \"Inserting\";\n          sepPosition.col++;\n          let shiftElements = sorted.slice(j, sorted.length);\n\n          for (let k = 0; k < shiftElements.length; k++) {\n            shiftElements[k] = \"insertion-\" + shiftElements[k].index;\n          }\n\n          let elementCurPosition = positions[numID].row + \"-\" + positions[numID].col;\n          action3.how = [\"Shift \" + shiftElements + \" \" + sortPosition.row + \"-\" + sortPosition.col, \"Move separator-insertion \" + sepPosition.row + \"-\" + (sepPosition.col - 1) + \" \" + sepPosition.row + \"-\" + sepPosition.col, \"Move \" + elementID + \" \" + elementCurPosition + \" \" + sortPosition.row + \"-\" + sortPosition.col, \"Move indicator-insertion \" + indicatorPosition.row + \"-\" + indicatorPosition.col + \" \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col, \"Sort insertion-\" + sortedIndex];\n\n          if (j > 0) {\n            action3.how.push(\"Sort insertion-\" + sorted[j - 1].index);\n          }\n\n          indicatorPosition.col = this.indicatorInitial.col;\n          indicatorPosition.row = this.indicatorInitial.row;\n          positions[numID].row = sortPosition.row;\n          positions[numID].col = sortPosition.col;\n\n          for (let k = j; k < sorted.length; k++) {\n            positions[sorted[k].index].col++;\n          }\n\n          sorted.push({\n            num: num,\n            index: numID\n          });\n          sorted.sort((a, b) => {\n            return a.num - b.num;\n          });\n        } else {\n          action2.desc = \"Seems Like This is Not the Place\";\n          action2.how = [\"Warn insertion-\" + numID];\n          action3.desc = \"Go to the Next Insertion Point\";\n          let numPosition = positions[numID];\n          let numPositionFrom = numPosition.row + \"-\" + numPosition.col;\n          numPosition.col++;\n          let newPositionTo = numPosition.row + \"-\" + numPosition.col;\n          let indicatorFrom = indicatorPosition.row + \"-\" + indicatorPosition.col;\n          indicatorPosition.col++;\n          let indicatorTo = indicatorPosition.row + \"-\" + indicatorPosition.col;\n          action3.how = [\"Move \" + elementID + \" \" + numPositionFrom + \" \" + newPositionTo, \"Move indicator-insertion \" + indicatorFrom + \" \" + indicatorTo, \"Sort insertion-\" + sortedIndex];\n\n          if (j > 0) {\n            action3.how.push(\"Sort insertion-\" + sorted[j - 1].index);\n          }\n        }\n\n        actions.push(action1);\n        actions.push(action2);\n        actions.push(action3);\n        j++;\n      }\n\n      if (!hasSorted) {\n        actions.push({\n          desc: \"Yeah! We Found the Place\",\n          how: [\"Sort \" + elementID]\n        });\n        actions.push({\n          desc: \"Inserting\",\n          how: [\"Move separator-insertion \" + sepPosition.row + \"-\" + sepPosition.col + \" \" + sepPosition.row + \"-\" + (sepPosition.col + 1), \"Move \" + elementID + \" \" + positions[numID].row + \"-\" + positions[numID].col + \" \" + (sepPosition.row + 1) + \"-\" + (sepPosition.col + 1), \"Move indicator-insertion \" + (indicatorPosition.row + 1) + \"-\" + (indicatorPosition.col + 1) + \" \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col]\n        });\n        positions[numID].row = sepPosition.row + 1;\n        positions[numID].row = sepPosition.col + 1;\n        sepPosition.col++;\n        indicatorPosition.row = this.indicatorInitial.row;\n        indicatorPosition.col = this.indicatorInitial.col;\n        sorted.push({\n          num: num,\n          index: numID\n        });\n        sorted.sort((a, b) => {\n          return a.num < b.num;\n        });\n      }\n    }\n\n    actions.push({\n      desc: \"Insert Sort Finished\",\n      how: []\n    });\n    return actions;\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 2,\n        col: i + 2\n      };\n    }\n\n    return positionMap;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"insertion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, this.state.actions[this.state.step].desc), React.createElement(\"button\", {\n      onClick: () => {\n        this.setState({\n          step: this.state.step + 1\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Prev\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js"],"names":["React","Component","d3","GridStructure","Insertion","constructor","props","top","bottom","left","right","svg","getInitialPosition","bind","getAction","visFirst","vizBeginInsertion","vizFirstCompare","vizFoundPlace","vizInsert","vizWarn","vizNextInsertion","vizCompareNearestTow","separatorInitial","row","col","indicatorInitial","initArray","actions","state","array","step","speed","setNewArray","animation","componentDidMount","getSVG","drawBasicStructure","initViz","setState","componentDidUpdate","prevProps","prevState","instruction","desc","how","sepMove","split","sepTo","move","sortAct","sorted","indicatorAct","indicatorTo","moveAct","moveTo","select1","select2","select","i","length","sort","console","log","sepIndex","moveIndex","indicatorIndex","shift","sort1Act1","sortAct2","itemMove","itemTo","indicatorMove","warn","clearViz","selectAll","remove","positionMap","position","num","id","visulizeBox","drawSeparator","drawIndicator","drawHorizontalGrid","drawVerticalGrid","unsorted","positions","sepPosition","JSON","parse","stringify","indicatorPosition","initSep","newSep","firstElementCol","push","index","size","numID","elementPosition","elementID","elementRow","elementCol","j","hasSorted","action1","action2","action3","sortedIndex","sortPosition","sortedNum","shiftElements","slice","k","elementCurPosition","a","b","numPosition","numPositionFrom","newPositionTo","indicatorFrom","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\nexport class Insertion extends GridStructure {\n    constructor(props) {\n        super(props, 30, 30, 3.5, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"insertion\")\n\n        this.svg = null;\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n        this.visFirst = this.visFirst.bind(this)\n        this.vizBeginInsertion = this.vizBeginInsertion.bind(this)\n        this.vizFirstCompare = this.vizFirstCompare.bind(this)\n        this.vizFoundPlace = this.vizFoundPlace.bind(this)\n        this.vizInsert = this.vizInsert.bind(this)\n        this.vizWarn = this.vizWarn.bind(this)\n        this.vizNextInsertion = this.vizNextInsertion.bind(this)\n        this.vizCompareNearestTow = this.vizCompareNearestTow.bind(this)\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        let initArray = [3, 2, 6, 2, 9, 8]\n\n        let actions = this.getAction(initArray)\n\n        this.state = {\n            array: initArray,\n            actions: actions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n        this.setState({\n            actions: this.getAction(this.state.array)\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.step < this.state.step) {\n            let instruction = this.state.actions[this.state.step]\n            //console.log(this.state.actions[this.state.step])\n            if (instruction.desc === \"Move First Item into Sorted Array\") {\n                this.visFirst(instruction.how)\n            } else if (instruction.desc === \"Begin Insertion\") {\n                this.vizBeginInsertion(instruction.how)\n            } else if (instruction.desc === \"Compare with the First\") {\n                this.vizFirstCompare(instruction.how)\n            } else if (instruction.desc === \"Yeah! We Found the Place\") {\n                this.vizFoundPlace(instruction.how)\n            } else if (instruction.desc === \"Inserting\") {\n                this.vizInsert(instruction.how)\n            } else if (instruction.desc === \"Seems Like This is Not the Place\") {\n                this.vizWarn(instruction.how)\n            } else if (instruction.desc === \"Go to the Next Insertion Point\") {\n                this.vizNextInsertion(instruction.how)\n            } else if (instruction.desc === \"Compare with the Nearest Two\") {\n                this.vizCompareNearestTow(instruction.how)\n            }\n        }\n    }\n\n    visFirst(how) {\n        let sepMove = how[0].split(\" \")\n        let sepTo = sepMove[3].split(\"-\")\n        this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n            let sortAct = how[1].split(\" \")\n            this.sorted(sortAct[1], this.state.speed)\n        }, this.state.speed)\n    }\n\n    vizBeginInsertion(how) {\n        let indicatorAct = how[0].split(\" \")\n        let indicatorTo = indicatorAct[3].split(\"-\")\n        this.move(indicatorAct[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed)\n\n        let moveAct = how[1].split(\" \")\n        let moveTo = moveAct[3].split(\"-\")\n        this.move(moveAct[1], moveTo[0], moveTo[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    vizFirstCompare(how) {\n        let select1 = how[0].split(\" \")\n        let select2 = how[1].split(\" \")\n\n        this.select(select1[1], null, this.state.speed)\n        this.select(select2[1], null, this.state.speed)\n    }\n\n    vizCompareNearestTow(how) {\n        for (let i = 0; i < how.length; i++) {\n            this.select(how[i].split(\" \")[1], null, this.state.speed)\n        }\n    }\n\n    vizFoundPlace(how) {\n        let sort = how[0].split(\" \")\n        this.sorted(sort[1], null, this.state.speed)\n    }\n\n    vizInsert(how) {\n        //console.log(how)\n        console.log(how)\n        let sepIndex = 0;\n        let moveIndex = 1;\n        let indicatorIndex = 2;\n\n        if (how.length > 3) {\n            let shift = how[0]\n            this.shift(shift, null, this.state.speed, 1)  \n            sepIndex++;\n            moveIndex++;\n            indicatorIndex++;\n            let sort1Act1 = how[5].split(\" \")\n            console.log(sort1Act1)\n            let sortAct2 = how[4].split(\" \")\n            this.sorted(sortAct2[1], null, this.state.speed)\n        }\n\n        let sepMove = how[sepIndex].split(\" \")\n        let sepTo = sepMove[3].split(\"-\")\n        this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n\n            let itemMove = how[moveIndex].split(\" \")\n            let itemTo = itemMove[3].split(\"-\")\n            this.move(itemMove[1], itemTo[0], itemTo[1], 0.05, 0.05, () => {\n            }, this.state.speed)\n            \n            let indicatorMove = how[indicatorIndex].split(\" \")\n            let indicatorTo = indicatorMove[3].split(\"-\")\n            this.move(indicatorMove[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed)\n        }, this.state.speed)\n    }\n\n    vizWarn(how) {\n        let warn = how[0].split(\" \")\n        this.warn(warn[1], this.state.speed)\n    }\n\n    vizNextInsertion(how) {\n        let itemMove = how[0].split(\" \")\n        let itemTo = itemMove[3].split(\"-\")\n        this.move(itemMove[1], itemTo[0], itemTo[1], 0.05, 0.05, null, this.state.speed)\n\n        let indicatorMove = how[1].split(\" \")\n        let indicatorTo = indicatorMove[3].split(\"-\")\n        this.move(indicatorMove[1], indicatorTo[0], indicatorTo[1], 0.15, 0.05, null, this.state.speed)\n        this.sorted(how[2].split(\" \")[1], null, this.state.speed)\n        if (how.length > 3) {\n            this.sorted(how[3].split(\" \")[1], null, this.state.speed)\n        }\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    initViz() {\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"insertion-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"insertion\");\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, null, \"insertion\");\n        this.drawHorizontalGrid()\n        this.drawVerticalGrid()\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n        let unsorted = [...array];\n        let sorted = [];\n\n\n        let positions = this.getInitialPosition(array);\n        let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n        let indicatorPosition = JSON.parse(JSON.stringify(this.indicatorInitial));\n\n        let initSep = sepPosition.row + \"-\" + sepPosition.col\n\n        sepPosition.col++;\n\n        let newSep = sepPosition.row + \"-\" + sepPosition.col\n\n        //let firstElementRow = positions[0].row\n        let firstElementCol = positions[0].col\n\n        actions.push({\n            desc: \"Move First Item into Sorted Array\",\n            how: [\n                \"Move separator-insertion \" + initSep + \" \" + newSep,\n                \"Sort insertion-0\" \n            ]\n        })\n\n        sorted.push({\n            num: unsorted.shift(),\n            index: 0\n        });\n\n        let size = unsorted.length\n        for (let i = 0; i < size; i++) {\n            let num = unsorted.shift();\n            let numID = i + 1;\n            let elementPosition = positions[numID]\n            let elementID = \"insertion-\" + (numID);\n\n            let elementRow = elementPosition.row;\n            let elementCol = elementPosition.col;\n\n            indicatorPosition.row = 3;\n            indicatorPosition.col = (firstElementCol - 0.5);\n            actions.push({\n                desc: \"Begin Insertion\",\n                how: [\n                    \"Move indicator-insertion \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \"\n                                                + 3 + \"-\" + (firstElementCol - 0.5),\n                    \"Move \" + elementID + \" \" + elementRow + \"-\" + elementCol + \" \" +  3.5 + \"-\" + (firstElementCol - 0.5)\n                ]\n            })\n\n            positions[numID].col = (firstElementCol - 0.5)\n            positions[numID].row = 3.5\n\n\n            let j = 0;\n            let hasSorted = false;\n            while(j < sorted.length && !hasSorted) {\n                let action1 = {};\n                let action2 = {};\n                let action3 = {};\n\n                let sortedIndex = sorted[j].index;\n                let sortPosition = positions[sortedIndex]\n                let sortedNum = sorted[j].num;\n\n                if (j === 0) {\n                    action1.desc = \"Compare with the First\"\n                    action1.how = [\n                        \"Select insertion-\" + sortedIndex,\n                        \"Select insertion-\" + numID\n                    ]\n                } else {\n                    action1.desc = \"Compare with the Nearest Two\"\n                    action1.how = [\n                        \"Select insertion-\" + sortedIndex,\n                        \"Select insertion-\" + sorted[j - 1].index,\n                        \"Select insertion-\" + numID\n                    ]   \n                }\n\n                if (num < sortedNum) {\n                    hasSorted = true;\n                    action2.desc = \"Yeah! We Found the Place\"\n                    action2.how = [\"Sort insertion-\" + numID]\n                    action3.desc = \"Inserting\"\n                    sepPosition.col++;\n\n\n                    let shiftElements = sorted.slice(j, sorted.length);\n                    \n                    for (let k = 0; k < shiftElements.length; k++) {\n                        shiftElements[k] = \"insertion-\" + shiftElements[k].index\n                    }\n                    \n                    let elementCurPosition = positions[numID].row + \"-\" + positions[numID].col\n\n                    action3.how = [\n                        \"Shift \" + shiftElements + \" \" + sortPosition.row + \"-\" + sortPosition.col,\n                        \"Move separator-insertion \" + sepPosition.row + \"-\" + (sepPosition.col - 1) + \" \" \n                                                    + sepPosition.row + \"-\" + sepPosition.col,\n                        \"Move \" + elementID + \" \" + elementCurPosition + \n                                              \" \" + sortPosition.row + \"-\" + sortPosition.col,\n                        \"Move indicator-insertion \" + indicatorPosition.row + \"-\" + indicatorPosition.col\n                                                        + \" \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col,\n                        \"Sort insertion-\" + sortedIndex\n                    ]\n\n                    if (j > 0) {\n                        action3.how.push(\"Sort insertion-\" + sorted[j - 1].index)\n                    }\n\n                    indicatorPosition.col = this.indicatorInitial.col\n                    indicatorPosition.row = this.indicatorInitial.row\n\n                    positions[numID].row = sortPosition.row\n                    positions[numID].col = sortPosition.col\n\n                    for (let k = j; k < sorted.length; k++) {\n                        positions[sorted[k].index].col++;\n                    }\n\n                    sorted.push({\n                        num: num,\n                        index: numID\n                    })\n\n                    sorted.sort((a, b) => { \n                        return a.num - b.num;\n                    })\n                } else {\n                    action2.desc = \"Seems Like This is Not the Place\"\n                    action2.how = [\"Warn insertion-\" + numID]\n\n                    action3.desc = \"Go to the Next Insertion Point\"\n\n                    let numPosition = positions[numID]\n                    let numPositionFrom = numPosition.row + \"-\" + numPosition.col\n                    numPosition.col++;\n\n                    let newPositionTo = numPosition.row + \"-\" + numPosition.col\n\n                    let indicatorFrom = indicatorPosition.row + \"-\" + indicatorPosition.col\n                    indicatorPosition.col++;\n                    let indicatorTo = indicatorPosition.row + \"-\" + indicatorPosition.col\n\n                    action3.how = [\n                        \"Move \" + elementID + \" \" + numPositionFrom + \" \" + newPositionTo,\n                        \"Move indicator-insertion \" + indicatorFrom + \" \" + indicatorTo,\n                        \"Sort insertion-\" + sortedIndex\n                    ]\n\n                    if (j > 0) {\n                        action3.how.push(\"Sort insertion-\" + sorted[j - 1].index)\n                    }\n\n                }\n                actions.push(action1)\n                actions.push(action2)\n                actions.push(action3)\n                j++\n            }\n            \n            if (!hasSorted) {\n                actions.push({\n                    desc: \"Yeah! We Found the Place\",\n                    \n                    how: [\n                        \"Sort \" + elementID\n                    ]\n                })\n\n                actions.push({\n                    desc: \"Inserting\",\n                    how: [\n                        \"Move separator-insertion \" + sepPosition.row + \"-\" + sepPosition.col + \" \" \n                                                    + sepPosition.row + \"-\" + (sepPosition.col + 1),\n                        \"Move \" + elementID + \" \" + positions[numID].row + \"-\" + positions[numID].col \n                                            + \" \" + (sepPosition.row + 1) + \"-\" + (sepPosition.col + 1),\n                        \"Move indicator-insertion \" + (indicatorPosition.row + 1) + \"-\" + (indicatorPosition.col + 1)  + \" \" \n                                            + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col\n                        \n                    ]\n                })\n                positions[numID].row = (sepPosition.row + 1)\n                positions[numID].row = (sepPosition.col + 1)\n                sepPosition.col++;\n                indicatorPosition.row = this.indicatorInitial.row\n                indicatorPosition.col = this.indicatorInitial.col\n\n                sorted.push({\n                    num: num,\n                    index: numID\n                })\n                sorted.sort((a, b) => {\n                    return a.num < b.num;\n                })\n            }\n        }\n        actions.push({\n            desc: \"Insert Sort Finished\",\n            how: []\n        })\n        return(actions)\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 2\n            }\n        } \n        return(positionMap)\n    }\n\n    render() {\n        return(\n            <div id=\"insertion\">\n                <div>{this.state.actions[this.state.step].desc}</div>\n                <button onClick = {() => {\n                    this.setState({\n                        step: this.state.step + 1\n                    })\n                }}>Next</button>\n                <button>Prev</button>\n            </div>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}