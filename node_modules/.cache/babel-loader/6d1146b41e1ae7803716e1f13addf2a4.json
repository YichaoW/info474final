{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/GridStructure.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nexport class GridStructure extends Component {\n  constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n    super(props);\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.nRow = rows;\n    this.nCol = cols;\n    this.width = this.gridWidth * this.nCol;\n    this.height = this.gridHeight * this.nRow;\n    this.padding = padding;\n    this.margin = margin;\n    this.id = id;\n    this.svg = null;\n    this.drawLine = this.drawLine.bind(this);\n    this.visulizeBox = this.visulizeBox.bind(this);\n    this.drawBasicStructure = this.drawBasicStructure.bind(this);\n    this.getX = this.getX.bind(this);\n    this.getY = this.getY.bind(this);\n    this.getSVG = this.getSVG.bind(this);\n  }\n\n  componentDidMount() {\n    this.svg = d3.select(\"#\" + this.id).append(\"svg\").attr(\"width\", this.width + this.margin.left + this.margin.right).attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n    this.drawBasicStructure();\n  }\n\n  drawLine(x1, y1, x2, y2, color) {\n    this.svg.append(\"line\").style(\"stroke\", color).attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1)).attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2));\n  }\n\n  drawBasicStructure() {\n    for (let i = 0; i <= this.nRow; i++) {\n      this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow, \"gray\");\n    }\n\n    this.drawLine(0, 0, 0, this.height, \"gray\");\n    this.drawLine(this.width, 0, this.width, this.height, \"gray\");\n  }\n\n  visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor, textColor) {\n    let width = (1 - 2 * this.padding) * this.gridWidth * widthGrid;\n    let height = (1 - 2 * this.padding) * this.gridHeight * heightGrid;\n    let x = (col - 1 + this.padding) * this.gridWidth;\n    let y = (row - 1 + this.padding) * this.gridHeight;\n    let rectGroup = this.svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    let textX = (0.5 - this.padding) * this.gridWidth * widthGrid;\n    let textY = (0.5 - this.padding) * this.gridHeight * heightGrid;\n    let textSize = 1 + \"rem\";\n    rectGroup.append(\"rect\").attr(\"rx\", 5).attr(\"ry\", 5).attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor);\n    rectGroup.append(\"text\").attr(\"fill\", textColor).style(\"text-anchor\", \"middle\").style(\"alignment-baseline\", \"central\").attr(\"font-size\", textSize).attr(\"dy\", textY).attr(\"dx\", textX).text(text);\n  }\n\n  getX(x) {\n    return x + this.margin.left;\n  }\n\n  getY(y) {\n    return y + this.margin.top;\n  }\n\n  getSVG() {\n    return this.svg;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: this.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Ha\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/GridStructure.js"],"names":["React","Component","d3","GridStructure","constructor","props","gridWidth","gridHeight","rows","cols","padding","margin","id","nRow","nCol","width","height","svg","drawLine","bind","visulizeBox","drawBasicStructure","getX","getY","getSVG","componentDidMount","select","append","attr","left","right","top","bottom","x1","y1","x2","y2","color","style","i","row","col","widthGrid","heightGrid","text","boxColor","textColor","x","y","rectGroup","textX","textY","textSize","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nexport class GridStructure extends Component {\n    constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n        super(props)\n\n        this.gridWidth = gridWidth;\n\n        this.gridHeight = gridHeight;\n        this.nRow = rows;\n        this.nCol = cols;\n        this.width = this.gridWidth * this.nCol;\n        this.height = this.gridHeight * this.nRow;\n        this.padding = padding;\n        this.margin = margin\n        this.id = id;\n\n        this.svg = null;\n        \n        this.drawLine = this.drawLine.bind(this);\n        this.visulizeBox = this.visulizeBox.bind(this);\n        this.drawBasicStructure = this.drawBasicStructure.bind(this);\n        this.getX = this.getX.bind(this);\n        this.getY = this.getY.bind(this);\n        this.getSVG = this.getSVG.bind(this);\n    }\n\n    componentDidMount() {\n        this.svg = d3.select(\"#\" + this.id).append(\"svg\")\n                    .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                    .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n\n        this.drawBasicStructure();\n        \n    }\n\n    drawLine(x1, y1, x2, y2, color) {\n        this.svg.append(\"line\").style(\"stroke\", color)\n                        .attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1))\n                        .attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2))\n    }\n\n    drawBasicStructure() {\n        for (let i = 0; i <= this.nRow; i++) {\n            this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow, \"gray\")\n        }\n        this.drawLine(0, 0, 0, this.height, \"gray\")\n        this.drawLine(this.width, 0, this.width, this.height, \"gray\")\n    }\n\n    visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor, textColor) {\n        let width = (1 - 2 * this.padding) * this.gridWidth * widthGrid;\n        let height = (1 - 2 * this.padding) * this.gridHeight * heightGrid;\n        let x = (col - 1 + this.padding) * this.gridWidth;\n        let y = (row - 1 + this.padding) * this.gridHeight;\n\n        let rectGroup = this.svg.append(\"g\")\n            .attr(\"id\", id)\n            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n\n        let textX = (0.5 - this.padding) * this.gridWidth * widthGrid;\n        let textY = (0.5 - this.padding) * this.gridHeight * heightGrid; \n        let textSize = 1 + \"rem\";\n\n        rectGroup.append(\"rect\")\n                .attr(\"rx\", 5).attr(\"ry\", 5)\n                .attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor)\n        \n        rectGroup.append(\"text\").attr(\"fill\", textColor)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", textSize)\n                    .attr(\"dy\", textY)\n                    .attr(\"dx\", textX)\n                    .text(text)\n    }\n\n    getX(x) {\n        return(x + this.margin.left);\n    }\n\n    getY(y) {\n        return(y + this.margin.top)\n    }\n\n    getSVG() {\n        return(this.svg)\n    }\n\n    render() {\n        return(\n            <div id={this.id}>\n                <p>Ha</p>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}