{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class Insertion extends GridStructure {\n  constructor(props) {\n    super(props, 30, 30, 3.5, 10, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"insertion\");\n    this.svg = null;\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.separatorInitial = {\n      row: 1,\n      col: 1\n    };\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    let initArray = [3, 2, 6, 2, 9, 8];\n    this.state = {\n      array: initArray,\n      actions: [],\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.initViz();\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col);\n    this.setState({//actions: this.getAction()\n    });\n  }\n\n  clearViz() {\n    this.svg.selectAll(\"g\").remove();\n  }\n\n  initViz() {\n    let positionMap = this.getInitialPosition();\n\n    for (let i = 0; i < this.state.array.length; i++) {\n      let position = positionMap[i];\n      let num = this.state.array[i];\n      let id = \"insertion-\" + i;\n      this.visulizeBox(position.row, position.col, 1, 1, num, id);\n    }\n\n    this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"insertion\");\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, null, \"insertion\");\n    this.drawHorizontalGrid();\n    this.drawVerticalGrid();\n  }\n\n  getAction(array = this.state.array) {\n    let actions = [{\n      desc: \"Start Sorting\",\n      how: []\n    }];\n    let unsorted = [...array];\n    let sorted = [];\n    let positions = this.getInitialPosition();\n    let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n    let initSep = sepPosition.row + \"-\" + sepPosition.col;\n    sepPosition.col++;\n    let newSep = sepPosition.row + \"-\" + sepPosition.col;\n    let firstElementRow = positions[0].row;\n    let firstElementCol = positions[0].col;\n    actions.push({\n      desc: \"Move First Item into Sorted Array\",\n      how: [\"Move separator-insertion \" + initSep + \" \" + newSep, \"Sort insertion-\" + firstElementRow + \"-\" + firstElementCol]\n    });\n    sorted.push({\n      num: unsorted.shift(),\n      index: 0\n    });\n    let size = unsorted.length;\n\n    for (let i = 0; i < size; i++) {\n      let num = unsorted.shift();\n      let numID = i + 1;\n      let elementPosition = positions[numID];\n      let elementID = \"selection-\" + numID;\n      let elementRow = elementPosition.row;\n      let elementCol = elementPosition.col;\n      actions.push({\n        desc: \"Begin insertion\",\n        how: [\"Move indicator-insertion \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \" + 3 + \"-\" + (firstElementCol - 0.5), \"Move \" + elementID + \" \" + elementRow + \"-\" + elementCol + \" \" + 3.5 + \"-\" + (firstElementCol - 0.5)]\n      });\n      let j = 0;\n      let hasSorted = false;\n\n      while (j < sorted.length && !hasSorted) {\n        let action1 = {};\n        let action2 = {};\n        let action3 = {};\n        let sortedIndex = sorted[j].index;\n        let shiftElements = sorted.slice(j, sorted.length);\n\n        if (j === 0) {\n          action1.desc = \"Compare with the first\";\n          action1.how = [\"Select \" + \"insertion-\" + sortedIndex, \"Select \" + \"insertion-\" + numID];\n\n          if (num <= sorted[j]) {\n            hasSorted = true;\n            action2.desc = \"Yeah! We found the place\";\n            action2.how = [\"Sort insertion-\" + numID];\n            action3.desc = \"Inserting\";\n            sepPosition.col++; // shift elements y\n            // shift sep y\n            // move item\n            // move indicator\n            // change color\n\n            action3.how = [\"Shift \" + shiftElements + \" \" + firstElementRow + \"-\" + (firstElementCol + j), \"Move separator-insertion \" + sepPosition.row + \"-\" + (sepPosition.col - 1) + \" \" + sepPosition.row + \"-\" + sepPosition.col, \"Move \" + elementID + \" \" + elementRow + \"-\" + elementPosition + \" \" + positions[sortedIndex].row + \"-\" + positions[sortedIndex].col]; // Yeah we found the place\n          } else {// Nope\n            }\n        } else {\n          action1.desc = \"Compare with the nearest two\";\n\n          if (num <= sorted[j] && num >= sorted[j - 1]) {\n            hasSorted = true; // Yeah we found the place\n          } else {// Nope\n            }\n        }\n\n        actions.push(action1);\n        actions.push(action2);\n        actions.push(action3);\n        j++;\n      }\n    }\n\n    console.log(actions);\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 2,\n        col: i + 2\n      };\n    }\n\n    return positionMap;\n  }\n\n  render() {\n    this.getAction();\n    return React.createElement(\"div\", {\n      id: \"insertion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Insertion\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Prev\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js"],"names":["React","Component","d3","GridStructure","Insertion","constructor","props","top","bottom","left","right","svg","getInitialPosition","bind","getAction","separatorInitial","row","col","indicatorInitial","initArray","state","array","actions","step","speed","setNewArray","animation","componentDidMount","getSVG","drawBasicStructure","initViz","drawIndicator","setState","clearViz","selectAll","remove","positionMap","i","length","position","num","id","visulizeBox","drawSeparator","drawHorizontalGrid","drawVerticalGrid","desc","how","unsorted","sorted","positions","sepPosition","JSON","parse","stringify","initSep","newSep","firstElementRow","firstElementCol","push","shift","index","size","numID","elementPosition","elementID","elementRow","elementCol","j","hasSorted","action1","action2","action3","sortedIndex","shiftElements","slice","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\nexport class Insertion extends GridStructure {\n    constructor(props) {\n        super(props, 30, 30, 3.5, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"insertion\")\n\n        this.svg = null;\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        let initArray = [3, 2, 6, 2, 9, 8]\n\n        this.state = {\n            array: initArray,\n            actions: [],\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col);\n        this.setState({\n            //actions: this.getAction()\n        })\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    initViz() {\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"insertion-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"insertion\");\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, null, \"insertion\");\n        this.drawHorizontalGrid()\n        this.drawVerticalGrid()\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n        let unsorted = [...array];\n        let sorted = [];\n\n\n        let positions = this.getInitialPosition();\n        let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n\n        let initSep = sepPosition.row + \"-\" + sepPosition.col\n\n        sepPosition.col++;\n\n        let newSep = sepPosition.row + \"-\" + sepPosition.col\n\n        let firstElementRow = positions[0].row\n        let firstElementCol = positions[0].col\n\n        actions.push({\n            desc: \"Move First Item into Sorted Array\",\n            how: [\n                \"Move separator-insertion \" + initSep + \" \" + newSep,\n                \"Sort insertion-\" + firstElementRow + \"-\" + firstElementCol \n            ]\n        })\n\n        sorted.push({\n            num: unsorted.shift(),\n            index: 0\n        });\n\n        let size = unsorted.length\n        for (let i = 0; i < size; i++) {\n            let num = unsorted.shift();\n            let numID = i + 1;\n            let elementPosition = positions[numID]\n            let elementID = \"selection-\" + (numID);\n\n            let elementRow = elementPosition.row;\n            let elementCol = elementPosition.col;\n            actions.push({\n                desc: \"Begin insertion\",\n                how: [\n                    \"Move indicator-insertion \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \"\n                                                + 3 + \"-\" + (firstElementCol - 0.5),\n                    \"Move \" + elementID + \" \" + elementRow + \"-\" + elementCol + \" \" +  3.5 + \"-\" + (firstElementCol - 0.5)\n                ]\n            })\n\n            let j = 0;\n            let hasSorted = false;\n            while(j < sorted.length && !hasSorted) {\n                let action1 = {};\n                let action2 = {};\n                let action3 = {};\n\n                let sortedIndex = sorted[j].index\n                let shiftElements = sorted.slice(j, sorted.length);\n                if (j === 0) {\n                    action1.desc = \"Compare with the first\"\n                    action1.how = [\n                        \"Select \" + \"insertion-\" + sortedIndex,\n                        \"Select \" + \"insertion-\" + numID\n                    ]\n\n                    if (num <= sorted[j]) {\n                        hasSorted = true\n                        action2.desc = \"Yeah! We found the place\"\n                        action2.how = [\"Sort insertion-\" + numID]\n\n                        action3.desc = \"Inserting\"\n\n                        sepPosition.col++;\n\n                        // shift elements y\n                        // shift sep y\n                        // move item\n                        // move indicator\n                        // change color\n                        action3.how = [\n                            \"Shift \" + shiftElements + \" \" + firstElementRow + \"-\" + (firstElementCol + j),\n                            \"Move separator-insertion \" + sepPosition.row + \"-\" + (sepPosition.col - 1) + \" \" \n                                                        + sepPosition.row + \"-\" + sepPosition.col,\n                            \"Move \" + elementID + \" \" + elementRow + \"-\" + elementPosition + \n                                                  \" \" + positions[sortedIndex].row + \"-\" + positions[sortedIndex].col\n\n                        ]\n\n                        // Yeah we found the place\n                    } else {\n                        // Nope\n                    }\n                } else {\n                    action1.desc = \"Compare with the nearest two\"\n                    if (num <= sorted[j] && num >= sorted[j - 1]) {\n                        hasSorted = true\n                        // Yeah we found the place\n                    } else {\n                        // Nope\n                    }\n                }\n                actions.push(action1)\n                actions.push(action2)\n                actions.push(action3)\n                j++;\n            }\n\n\n        }\n        console.log(actions)\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 2\n            }\n        } \n        return(positionMap)\n    }\n\n    render() {\n        this.getAction();\n        return(\n            <div id=\"insertion\">\n                <div>Insertion</div>\n                <button>Next</button>\n                <button>Prev</button>\n            </div>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}