{"ast":null,"code":"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nexport class GridStructure extends Component {\n  constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n    super(props);\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.nRow = rows;\n    this.nCol = cols;\n    this.width = this.gridWidth * this.nCol;\n    this.height = this.gridHeight * this.nRow;\n    this.padding = padding;\n    this.margin = margin;\n    this.id = id;\n    this.drawLine = this.drawLine.bind(this);\n    this.visulizeBox = this.visulizeBox.bind(this);\n    this.drawBasicStructure = this.drawBasicStructure.bind(this);\n    this.getX = this.getX.bind(this);\n    this.getY = this.getY.bind(this);\n    this.getSVG = this.getSVG.bind(this);\n    this.drawVerticalGrid = this.drawVerticalGrid.bind(this);\n    this.drawHorizontalGrid = this.drawHorizontalGrid.bind(this);\n  }\n\n  drawLine(x1, y1, x2, y2, color = \"gray\") {\n    this.svg.append(\"line\").style(\"stroke\", color).attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1)).attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2));\n  }\n\n  drawBasicStructure() {\n    this.drawLine(0, 0, this.width, 0);\n    this.drawLine(0, this.height, this.width, this.height);\n    this.drawLine(0, 0, 0, this.height);\n    this.drawLine(this.width, 0, this.width, this.height);\n  }\n\n  drawHorizontalGrid() {\n    for (let i = 1; i <= this.nRow - 1; i++) {\n      this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow);\n    }\n  }\n\n  drawVerticalGrid() {\n    for (let i = 1; i <= this.nCol - 1; i++) {\n      this.drawLine(i * this.width / this.nCol, 0, i * this.width / this.nCol, this.height);\n    }\n  }\n\n  visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor, textColor) {\n    let width = (1 - 2 * this.padding) * this.gridWidth * widthGrid;\n    let height = (1 - 2 * this.padding) * this.gridHeight * heightGrid;\n    let x = (col - 1 + this.padding) * this.gridWidth;\n    let y = (row - 1 + this.padding) * this.gridHeight;\n    let rectGroup = this.svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    let textX = (0.5 - this.padding) * this.gridWidth * widthGrid;\n    let textY = (0.5 - this.padding) * this.gridHeight * heightGrid;\n    let textSize = 1 + \"rem\";\n    rectGroup.append(\"rect\").attr(\"rx\", 5).attr(\"ry\", 5).attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor);\n    rectGroup.append(\"text\").attr(\"fill\", textColor).style(\"text-anchor\", \"middle\").style(\"alignment-baseline\", \"central\").attr(\"font-size\", textSize).attr(\"dy\", textY).attr(\"dx\", textX).text(text);\n  }\n\n  getX(x) {\n    return x + this.margin.left;\n  }\n\n  getY(y) {\n    return y + this.margin.top;\n  }\n\n  getSVG() {\n    let svg = d3.select(\"#\" + this.id).append(\"svg\").attr(\"width\", this.width + this.margin.left + this.margin.right).attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n    return svg;\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/GridStructure.js"],"names":["React","Component","d3","GridStructure","constructor","props","gridWidth","gridHeight","rows","cols","padding","margin","id","nRow","nCol","width","height","drawLine","bind","visulizeBox","drawBasicStructure","getX","getY","getSVG","drawVerticalGrid","drawHorizontalGrid","x1","y1","x2","y2","color","svg","append","style","attr","i","row","col","widthGrid","heightGrid","text","boxColor","textColor","x","y","rectGroup","textX","textY","textSize","left","top","select","right","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nexport class GridStructure extends Component {\n    constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n        super(props)\n\n        this.gridWidth = gridWidth;\n\n        this.gridHeight = gridHeight;\n        this.nRow = rows;\n        this.nCol = cols;\n        this.width = this.gridWidth * this.nCol;\n        this.height = this.gridHeight * this.nRow;\n        this.padding = padding;\n        this.margin = margin\n        this.id = id;\n        \n        this.drawLine = this.drawLine.bind(this);\n        this.visulizeBox = this.visulizeBox.bind(this);\n        this.drawBasicStructure = this.drawBasicStructure.bind(this);\n        this.getX = this.getX.bind(this);\n        this.getY = this.getY.bind(this);\n        this.getSVG = this.getSVG.bind(this);\n        this.drawVerticalGrid = this.drawVerticalGrid.bind(this);\n        this.drawHorizontalGrid = this.drawHorizontalGrid.bind(this);\n    }\n\n    drawLine(x1, y1, x2, y2, color = \"gray\") {\n        this.svg.append(\"line\").style(\"stroke\", color)\n                        .attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1))\n                        .attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2))\n    }\n\n    drawBasicStructure() {\n        this.drawLine(0, 0, this.width, 0)\n        this.drawLine(0, this.height, this.width, this.height)\n        this.drawLine(0, 0, 0, this.height)\n        this.drawLine(this.width, 0, this.width, this.height)\n    }\n\n    drawHorizontalGrid() {\n        for (let i = 1; i <= this.nRow - 1; i++) {\n            this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow)\n        }\n    }\n\n    drawVerticalGrid() {\n        for (let i = 1; i <= this.nCol - 1; i++) {\n            this.drawLine(i * this.width / this.nCol, 0, i * this.width / this.nCol, this.height)\n        }\n    }\n\n    visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor, textColor) {\n        let width = (1 - 2 * this.padding) * this.gridWidth * widthGrid;\n        let height = (1 - 2 * this.padding) * this.gridHeight * heightGrid;\n        let x = (col - 1 + this.padding) * this.gridWidth;\n        let y = (row - 1 + this.padding) * this.gridHeight;\n\n        let rectGroup = this.svg.append(\"g\")\n            .attr(\"id\", id)\n            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n\n        let textX = (0.5 - this.padding) * this.gridWidth * widthGrid;\n        let textY = (0.5 - this.padding) * this.gridHeight * heightGrid; \n        let textSize = 1 + \"rem\";\n\n        rectGroup.append(\"rect\")\n                .attr(\"rx\", 5).attr(\"ry\", 5)\n                .attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor)\n        \n        rectGroup.append(\"text\").attr(\"fill\", textColor)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", textSize)\n                    .attr(\"dy\", textY)\n                    .attr(\"dx\", textX)\n                    .text(text)\n    }\n\n    getX(x) {\n        return(x + this.margin.left);\n    }\n\n    getY(y) {\n        return(y + this.margin.top)\n    }\n\n    getSVG() {\n        let svg = d3.select(\"#\" + this.id).append(\"svg\")\n                    .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                    .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n        return(svg)\n    }\n}"]},"metadata":{},"sourceType":"module"}