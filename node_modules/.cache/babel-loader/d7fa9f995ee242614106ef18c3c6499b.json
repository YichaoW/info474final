{"ast":null,"code":"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nexport class GridStructure extends Component {\n  constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n    super(props);\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.nRow = rows;\n    this.nCol = cols;\n    this.width = this.gridWidth * this.nCol;\n    this.height = this.gridHeight * this.nRow;\n    this.padding = padding;\n    this.margin = margin;\n    this.id = id;\n    this.drawLine = this.drawLine.bind(this);\n    this.visulizeBox = this.visulizeBox.bind(this);\n    this.drawBasicStructure = this.drawBasicStructure.bind(this);\n    this.getX = this.getX.bind(this);\n    this.getY = this.getY.bind(this);\n    this.getSVG = this.getSVG.bind(this);\n    this.drawVerticalGrid = this.drawVerticalGrid.bind(this);\n    this.drawHorizontalGrid = this.drawHorizontalGrid.bind(this);\n    this.drawSeparator = this.drawSeparator.bind(this);\n    this.drawIndicator = this.drawIndicator.bind(this);\n    this.select = this.select.bind(this);\n    this.deselect = this.deselect.bind(this);\n    this.sorted = this.sorted.bind(this);\n    this.move = this.move.bind(this);\n    this.rightShift = this.rightShift.bind(this);\n  }\n\n  drawLine(x1, y1, x2, y2, color = \"gray\") {\n    this.svg.append(\"line\").style(\"stroke\", color).attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1)).attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2));\n  }\n\n  drawBasicStructure() {\n    this.drawLine(0, 0, this.width, 0);\n    this.drawLine(0, this.height, this.width, this.height);\n    this.drawLine(0, 0, 0, this.height);\n    this.drawLine(this.width, 0, this.width, this.height);\n  }\n\n  drawHorizontalGrid() {\n    for (let i = 1; i <= this.nRow - 1; i++) {\n      this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow);\n    }\n  }\n\n  drawVerticalGrid() {\n    for (let i = 1; i <= this.nCol - 1; i++) {\n      this.drawLine(i * this.width / this.nCol, 0, i * this.width / this.nCol, this.height);\n    }\n  }\n\n  drawSeparator(row, col) {\n    let x = this.gridWidth * col;\n    let y = (row - 0.5) * this.gridHeight;\n    let sep = this.svg.append(\"g\").attr(\"id\", \"separator\").attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    sep.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", 0).attr(\"y2\", 1.5 * this.gridHeight).style(\"stroke\", \"gray\");\n    sep.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0.45 * this.gridHeight).attr(\"x2\", 1.7 * this.gridHeight).attr(\"y2\", 0.45 * this.gridHeight).style(\"stroke\", \"gray\");\n    sep.append(\"text\").attr(\"fill\", \"gray\") //.style(\"text-anchor\", \"middle\")\n    //.style(\"alignment-baseline\", \"central\")\n    .attr(\"font-size\", \"0.9rem\").attr(\"dy\", 0.4 * this.gridHeight).attr(\"dx\", 0.05 * this.gridWidth).text(\"Unsort\");\n  }\n\n  drawIndicator(row, col, text = null) {\n    let padding = 0.05;\n    let topAdditional = 0.1;\n    let x = (col + padding - 1) * this.gridWidth;\n    let y = (row + padding - 1 + topAdditional) * this.gridHeight;\n    let indicator = this.svg.append(\"g\").attr(\"id\", \"indicator\").attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    indicator.append(\"line\").attr(\"x1\", 0).attr(\"y1\", (0.5 - padding) * this.gridHeight).attr(\"x2\", (0.5 - padding) * this.gridWidth).attr(\"y2\", 0).style(\"stroke\", \"gray\");\n    indicator.append(\"line\").attr(\"x1\", (0.5 - padding) * this.gridWidth).attr(\"y1\", 0).attr(\"x2\", (1 - 2 * padding) * this.gridWidth).attr(\"y2\", (0.5 - padding) * this.gridHeight).style(\"stroke\", \"gray\");\n\n    if (text) {\n      indicator.append(\"text\").attr(\"fill\", \"gray\").style(\"text-anchor\", \"middle\").style(\"alignment-baseline\", \"central\").attr(\"font-size\", \"0.7rem\").attr(\"dy\", (0.5 - padding) * this.gridHeight).attr(\"dx\", (0.5 - padding) * this.gridWidth).text(text);\n    }\n  }\n\n  select(id, callback, duration) {\n    if (callback) {\n      d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\").on(\"end\", callback);\n    } else {\n      d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\");\n    }\n  }\n\n  deselect(id) {\n    d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"gray\");\n  }\n\n  sorted(id) {\n    d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"green\");\n  }\n\n  move(id, row, col, yPadding = 0.05, xPadding = 0.05, callback = null, duration = 500) {\n    let newX = this.gridWidth * (col - 1 + xPadding);\n    let newY = this.gridHeight * (row - 1 + yPadding);\n\n    if (callback) {\n      d3.select(\"#\" + id).transition().duration(duration).attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\").on(\"end\", callback);\n    } else {\n      d3.select(\"#\" + id).transition().duration(duration).attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\");\n    }\n  }\n\n  rightShift(shift, callback = null, duration = 500) {\n    let shiftSplit = shift.split(/[\\ ]+/);\n    let elements = shiftSplit[1];\n\n    if (elements === \"null\") {\n      callback();\n    } else {\n      let elementsSplit = elements.split(\",\");\n      let firstPosition = shiftSplit[2].split(\"-\");\n\n      for (let i = 0; i < elementsSplit.length; i++) {\n        let elementID = elementsSplit[i];\n        let next = null;\n\n        if (i === elementsSplit.length) {\n          next = callback;\n        }\n\n        console.log(firstPosition[1] + i);\n        this.move(elementID, firstPosition[0], firstPosition[1] + i, 0.05, 0.05, next, duration);\n      }\n    }\n  }\n\n  visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor = \"gray\", textColor = \"white\") {\n    let width = (1 - 2 * this.padding) * this.gridWidth * widthGrid;\n    let height = (1 - 2 * this.padding) * this.gridHeight * heightGrid;\n    let x = (col - 1 + this.padding) * this.gridWidth;\n    let y = (row - 1 + this.padding) * this.gridHeight;\n    let rectGroup = this.svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    let textX = (0.5 - this.padding) * this.gridWidth * widthGrid;\n    let textY = (0.5 - this.padding) * this.gridHeight * heightGrid;\n    let textSize = 1 + \"rem\";\n    rectGroup.append(\"rect\").attr(\"rx\", 5).attr(\"ry\", 5).attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor);\n    rectGroup.append(\"text\").attr(\"fill\", textColor).style(\"text-anchor\", \"middle\").style(\"alignment-baseline\", \"central\").attr(\"font-size\", textSize).attr(\"dy\", textY).attr(\"dx\", textX).text(text);\n  }\n\n  getX(x) {\n    return x + this.margin.left;\n  }\n\n  getY(y) {\n    return y + this.margin.top;\n  }\n\n  getSVG() {\n    let svg = d3.select(\"#\" + this.id).append(\"svg\").attr(\"width\", this.width + this.margin.left + this.margin.right).attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n    return svg;\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/GridStructure.js"],"names":["React","Component","d3","GridStructure","constructor","props","gridWidth","gridHeight","rows","cols","padding","margin","id","nRow","nCol","width","height","drawLine","bind","visulizeBox","drawBasicStructure","getX","getY","getSVG","drawVerticalGrid","drawHorizontalGrid","drawSeparator","drawIndicator","select","deselect","sorted","move","rightShift","x1","y1","x2","y2","color","svg","append","style","attr","i","row","col","x","y","sep","text","topAdditional","indicator","callback","duration","transition","on","yPadding","xPadding","newX","newY","shift","shiftSplit","split","elements","elementsSplit","firstPosition","length","elementID","next","console","log","widthGrid","heightGrid","boxColor","textColor","rectGroup","textX","textY","textSize","left","top","right","bottom"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,OAAO,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAQC,SAAR,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,OAA3C,EAAoDC,MAApD,EAA4DC,EAA5D,EAAgE;AACvE,UAAMP,KAAN;AAEA,SAAKC,SAAL,GAAiBA,SAAjB;AAEA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKM,IAAL,GAAYL,IAAZ;AACA,SAAKM,IAAL,GAAYL,IAAZ;AACA,SAAKM,KAAL,GAAa,KAAKT,SAAL,GAAiB,KAAKQ,IAAnC;AACA,SAAKE,MAAL,GAAc,KAAKT,UAAL,GAAkB,KAAKM,IAArC;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,EAAL,GAAUA,EAAV;AAEA,SAAKK,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUH,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKI,IAAL,GAAY,KAAKA,IAAL,CAAUJ,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKK,MAAL,GAAc,KAAKA,MAAL,CAAYL,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKM,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBN,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKO,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBP,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKQ,aAAL,GAAqB,KAAKA,aAAL,CAAmBR,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKS,aAAL,GAAqB,KAAKA,aAAL,CAAmBT,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKU,MAAL,GAAc,KAAKA,MAAL,CAAYV,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKW,QAAL,GAAgB,KAAKA,QAAL,CAAcX,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKY,MAAL,GAAc,KAAKA,MAAL,CAAYZ,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKa,IAAL,GAAY,KAAKA,IAAL,CAAUb,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKc,UAAL,GAAkB,KAAKA,UAAL,CAAgBd,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDD,EAAAA,QAAQ,CAACgB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,KAAK,GAAG,MAAzB,EAAiC;AACrC,SAAKC,GAAL,CAASC,MAAT,CAAgB,MAAhB,EAAwBC,KAAxB,CAA8B,QAA9B,EAAwCH,KAAxC,EACiBI,IADjB,CACsB,IADtB,EAC4B,KAAKpB,IAAL,CAAUY,EAAV,CAD5B,EAC2CQ,IAD3C,CACgD,IADhD,EACsD,KAAKnB,IAAL,CAAUY,EAAV,CADtD,EAEiBO,IAFjB,CAEsB,IAFtB,EAE4B,KAAKpB,IAAL,CAAUc,EAAV,CAF5B,EAE2CM,IAF3C,CAEgD,IAFhD,EAEsD,KAAKnB,IAAL,CAAUc,EAAV,CAFtD;AAGH;;AAEDhB,EAAAA,kBAAkB,GAAG;AACjB,SAAKH,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKF,KAAzB,EAAgC,CAAhC;AACA,SAAKE,QAAL,CAAc,CAAd,EAAiB,KAAKD,MAAtB,EAA8B,KAAKD,KAAnC,EAA0C,KAAKC,MAA/C;AACA,SAAKC,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAKD,MAA5B;AACA,SAAKC,QAAL,CAAc,KAAKF,KAAnB,EAA0B,CAA1B,EAA6B,KAAKA,KAAlC,EAAyC,KAAKC,MAA9C;AACH;;AAEDS,EAAAA,kBAAkB,GAAG;AACjB,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK7B,IAAL,GAAY,CAAjC,EAAoC6B,CAAC,EAArC,EAAyC;AACrC,WAAKzB,QAAL,CAAc,CAAd,EAAiByB,CAAC,GAAG,KAAK1B,MAAT,GAAkB,KAAKH,IAAxC,EAA8C,KAAKE,KAAnD,EAA0D2B,CAAC,GAAG,KAAK1B,MAAT,GAAkB,KAAKH,IAAjF;AACH;AACJ;;AAEDW,EAAAA,gBAAgB,GAAG;AACf,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK5B,IAAL,GAAY,CAAjC,EAAoC4B,CAAC,EAArC,EAAyC;AACrC,WAAKzB,QAAL,CAAcyB,CAAC,GAAG,KAAK3B,KAAT,GAAiB,KAAKD,IAApC,EAA0C,CAA1C,EAA6C4B,CAAC,GAAG,KAAK3B,KAAT,GAAiB,KAAKD,IAAnE,EAAyE,KAAKE,MAA9E;AACH;AACJ;;AAEDU,EAAAA,aAAa,CAACiB,GAAD,EAAMC,GAAN,EAAW;AACpB,QAAIC,CAAC,GAAG,KAAKvC,SAAL,GAAiBsC,GAAzB;AACA,QAAIE,CAAC,GAAG,CAACH,GAAG,GAAG,GAAP,IAAc,KAAKpC,UAA3B;AAEA,QAAIwC,GAAG,GAAG,KAAKT,GAAL,CAASC,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B,IAA1B,EAAgC,WAAhC,EACGA,IADH,CACQ,WADR,EACqB,eAAe,KAAKpB,IAAL,CAAUwB,CAAV,CAAf,GAA8B,IAA9B,GAAqC,KAAKvB,IAAL,CAAUwB,CAAV,CAArC,GAAoD,GADzE,CAAV;AAGAC,IAAAA,GAAG,CAACR,MAAJ,CAAW,MAAX,EAAmBE,IAAnB,CAAwB,IAAxB,EAA8B,CAA9B,EACmBA,IADnB,CACwB,IADxB,EAC8B,CAD9B,EAEmBA,IAFnB,CAEwB,IAFxB,EAE8B,CAF9B,EAGmBA,IAHnB,CAGwB,IAHxB,EAG8B,MAAM,KAAKlC,UAHzC,EAImBiC,KAJnB,CAIyB,QAJzB,EAImC,MAJnC;AAMAO,IAAAA,GAAG,CAACR,MAAJ,CAAW,MAAX,EAAmBE,IAAnB,CAAwB,IAAxB,EAA8B,CAA9B,EACmBA,IADnB,CACwB,IADxB,EAC8B,OAAO,KAAKlC,UAD1C,EAEmBkC,IAFnB,CAEwB,IAFxB,EAE8B,MAAM,KAAKlC,UAFzC,EAGmBkC,IAHnB,CAGwB,IAHxB,EAG8B,OAAO,KAAKlC,UAH1C,EAImBiC,KAJnB,CAIyB,QAJzB,EAImC,MAJnC;AAOAO,IAAAA,GAAG,CAACR,MAAJ,CAAW,MAAX,EAAmBE,IAAnB,CAAwB,MAAxB,EAAgC,MAAhC,EACkB;AACA;AAFlB,KAGmBA,IAHnB,CAGwB,WAHxB,EAGqC,QAHrC,EAImBA,IAJnB,CAIwB,IAJxB,EAI8B,MAAM,KAAKlC,UAJzC,EAKmBkC,IALnB,CAKwB,IALxB,EAK8B,OAAO,KAAKnC,SAL1C,EAMmB0C,IANnB,CAMwB,QANxB;AASH;;AAEDrB,EAAAA,aAAa,CAACgB,GAAD,EAAMC,GAAN,EAAWI,IAAI,GAAG,IAAlB,EAAwB;AACjC,QAAItC,OAAO,GAAG,IAAd;AAEA,QAAIuC,aAAa,GAAG,GAApB;AAEA,QAAIJ,CAAC,GAAG,CAACD,GAAG,GAAGlC,OAAN,GAAgB,CAAjB,IAAsB,KAAKJ,SAAnC;AACA,QAAIwC,CAAC,GAAG,CAACH,GAAG,GAAGjC,OAAN,GAAgB,CAAhB,GAAoBuC,aAArB,IAAsC,KAAK1C,UAAnD;AAEA,QAAI2C,SAAS,GAAG,KAAKZ,GAAL,CAASC,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B,IAA1B,EAAgC,WAAhC,EACKA,IADL,CACU,WADV,EACuB,eAAe,KAAKpB,IAAL,CAAUwB,CAAV,CAAf,GAA8B,IAA9B,GAAqC,KAAKvB,IAAL,CAAUwB,CAAV,CAArC,GAAoD,GAD3E,CAAhB;AAGAI,IAAAA,SAAS,CAACX,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,IAA9B,EAAoC,CAApC,EACqBA,IADrB,CAC0B,IAD1B,EACgC,CAAC,MAAM/B,OAAP,IAAkB,KAAKH,UADvD,EAEqBkC,IAFrB,CAE0B,IAF1B,EAEgC,CAAC,MAAM/B,OAAP,IAAkB,KAAKJ,SAFvD,EAGqBmC,IAHrB,CAG0B,IAH1B,EAGgC,CAHhC,EAIqBD,KAJrB,CAI2B,QAJ3B,EAIqC,MAJrC;AAMAU,IAAAA,SAAS,CAACX,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,IAA9B,EAAoC,CAAC,MAAM/B,OAAP,IAAkB,KAAKJ,SAA3D,EACqBmC,IADrB,CAC0B,IAD1B,EACgC,CADhC,EAEqBA,IAFrB,CAE0B,IAF1B,EAEgC,CAAC,IAAI,IAAI/B,OAAT,IAAoB,KAAKJ,SAFzD,EAGqBmC,IAHrB,CAG0B,IAH1B,EAGgC,CAAC,MAAM/B,OAAP,IAAkB,KAAKH,UAHvD,EAIqBiC,KAJrB,CAI2B,QAJ3B,EAIqC,MAJrC;;AAMA,QAAIQ,IAAJ,EAAU;AACNE,MAAAA,SAAS,CAACX,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,MAA9B,EAAsC,MAAtC,EACSD,KADT,CACe,aADf,EAC8B,QAD9B,EAESA,KAFT,CAEe,oBAFf,EAEqC,SAFrC,EAGSC,IAHT,CAGc,WAHd,EAG2B,QAH3B,EAISA,IAJT,CAIc,IAJd,EAIoB,CAAC,MAAM/B,OAAP,IAAkB,KAAKH,UAJ3C,EAKSkC,IALT,CAKc,IALd,EAKoB,CAAC,MAAM/B,OAAP,IAAkB,KAAKJ,SAL3C,EAMS0C,IANT,CAMcA,IANd;AAOH;AAEJ;;AAEDpB,EAAAA,MAAM,CAAChB,EAAD,EAAKuC,QAAL,EAAeC,QAAf,EAAyB;AAC3B,QAAID,QAAJ,EAAc;AACVjD,MAAAA,EAAE,CAAC0B,MAAH,CAAU,MAAMhB,EAAN,GAAW,SAArB,EAAgCyC,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,MAA7E,EAAqFa,EAArF,CAAwF,KAAxF,EAA+FH,QAA/F;AACH,KAFD,MAEO;AACHjD,MAAAA,EAAE,CAAC0B,MAAH,CAAU,MAAMhB,EAAN,GAAW,SAArB,EAAgCyC,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,MAA7E;AACH;AACJ;;AAEDZ,EAAAA,QAAQ,CAACjB,EAAD,EAAK;AACTV,IAAAA,EAAE,CAAC0B,MAAH,CAAU,MAAMhB,EAAN,GAAW,SAArB,EAAgCyC,UAAhC,GAA6CD,QAA7C,CAAsD,GAAtD,EAA2DX,IAA3D,CAAgE,MAAhE,EAAwE,MAAxE;AACH;;AAEDX,EAAAA,MAAM,CAAClB,EAAD,EAAK;AACPV,IAAAA,EAAE,CAAC0B,MAAH,CAAU,MAAMhB,EAAN,GAAW,SAArB,EAAgCyC,UAAhC,GAA6CD,QAA7C,CAAsD,GAAtD,EAA2DX,IAA3D,CAAgE,MAAhE,EAAwE,OAAxE;AACH;;AAEDV,EAAAA,IAAI,CAACnB,EAAD,EAAK+B,GAAL,EAAUC,GAAV,EAAeW,QAAQ,GAAG,IAA1B,EAAgCC,QAAQ,GAAG,IAA3C,EAAiDL,QAAQ,GAAG,IAA5D,EAAkEC,QAAQ,GAAG,GAA7E,EAAkF;AAClF,QAAIK,IAAI,GAAG,KAAKnD,SAAL,IAAkBsC,GAAG,GAAG,CAAN,GAAUY,QAA5B,CAAX;AACA,QAAIE,IAAI,GAAG,KAAKnD,UAAL,IAAmBoC,GAAG,GAAG,CAAN,GAAUY,QAA7B,CAAX;;AAEA,QAAIJ,QAAJ,EAAc;AACVjD,MAAAA,EAAE,CAAC0B,MAAH,CAAU,MAAMhB,EAAhB,EAAoByC,UAApB,GAAiCD,QAAjC,CAA0CA,QAA1C,EACKX,IADL,CACU,WADV,EACuB,eAAe,KAAKpB,IAAL,CAAUoC,IAAV,CAAf,GAAiC,IAAjC,GAAwC,KAAKnC,IAAL,CAAUoC,IAAV,CAAxC,GAA0D,GADjF,EAEKJ,EAFL,CAEQ,KAFR,EAEeH,QAFf;AAGH,KAJD,MAIO;AACHjD,MAAAA,EAAE,CAAC0B,MAAH,CAAU,MAAMhB,EAAhB,EAAoByC,UAApB,GAAiCD,QAAjC,CAA0CA,QAA1C,EACKX,IADL,CACU,WADV,EACuB,eAAe,KAAKpB,IAAL,CAAUoC,IAAV,CAAf,GAAiC,IAAjC,GAAwC,KAAKnC,IAAL,CAAUoC,IAAV,CAAxC,GAA0D,GADjF;AAEH;AACJ;;AAED1B,EAAAA,UAAU,CAAC2B,KAAD,EAAQR,QAAQ,GAAG,IAAnB,EAAyBC,QAAQ,GAAG,GAApC,EAAyC;AAC/C,QAAIQ,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAY,OAAZ,CAAjB;AACA,QAAIC,QAAQ,GAAGF,UAAU,CAAC,CAAD,CAAzB;;AACA,QAAIE,QAAQ,KAAK,MAAjB,EAAyB;AACrBX,MAAAA,QAAQ;AACX,KAFD,MAEO;AACH,UAAIY,aAAa,GAAGD,QAAQ,CAACD,KAAT,CAAe,GAAf,CAApB;AACA,UAAIG,aAAa,GAAGJ,UAAU,CAAC,CAAD,CAAV,CAAcC,KAAd,CAAoB,GAApB,CAApB;;AACA,WAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,aAAa,CAACE,MAAlC,EAA0CvB,CAAC,EAA3C,EAA+C;AAC3C,YAAIwB,SAAS,GAAGH,aAAa,CAACrB,CAAD,CAA7B;AACA,YAAIyB,IAAI,GAAG,IAAX;;AACA,YAAIzB,CAAC,KAAKqB,aAAa,CAACE,MAAxB,EAAgC;AAC5BE,UAAAA,IAAI,GAAGhB,QAAP;AACH;;AACDiB,QAAAA,OAAO,CAACC,GAAR,CAAYL,aAAa,CAAC,CAAD,CAAb,GAAmBtB,CAA/B;AACA,aAAKX,IAAL,CAAUmC,SAAV,EAAqBF,aAAa,CAAC,CAAD,CAAlC,EAAuCA,aAAa,CAAC,CAAD,CAAb,GAAmBtB,CAA1D,EACgB,IADhB,EACsB,IADtB,EAC4ByB,IAD5B,EACkCf,QADlC;AAEH;AACJ;AACJ;;AAEDjC,EAAAA,WAAW,CAACwB,GAAD,EAAMC,GAAN,EAAW0B,SAAX,EAAsBC,UAAtB,EAAkCvB,IAAlC,EAAwCpC,EAAxC,EAA4C4D,QAAQ,GAAG,MAAvD,EAA+DC,SAAS,GAAG,OAA3E,EAAoF;AAC3F,QAAI1D,KAAK,GAAG,CAAC,IAAI,IAAI,KAAKL,OAAd,IAAyB,KAAKJ,SAA9B,GAA0CgE,SAAtD;AACA,QAAItD,MAAM,GAAG,CAAC,IAAI,IAAI,KAAKN,OAAd,IAAyB,KAAKH,UAA9B,GAA2CgE,UAAxD;AACA,QAAI1B,CAAC,GAAG,CAACD,GAAG,GAAG,CAAN,GAAU,KAAKlC,OAAhB,IAA2B,KAAKJ,SAAxC;AACA,QAAIwC,CAAC,GAAG,CAACH,GAAG,GAAG,CAAN,GAAU,KAAKjC,OAAhB,IAA2B,KAAKH,UAAxC;AAEA,QAAImE,SAAS,GAAG,KAAKpC,GAAL,CAASC,MAAT,CAAgB,GAAhB,EACXE,IADW,CACN,IADM,EACA7B,EADA,EAEX6B,IAFW,CAEN,WAFM,EAEO,eAAe,KAAKpB,IAAL,CAAUwB,CAAV,CAAf,GAA8B,IAA9B,GAAqC,KAAKvB,IAAL,CAAUwB,CAAV,CAArC,GAAoD,GAF3D,CAAhB;AAIA,QAAI6B,KAAK,GAAG,CAAC,MAAM,KAAKjE,OAAZ,IAAuB,KAAKJ,SAA5B,GAAwCgE,SAApD;AACA,QAAIM,KAAK,GAAG,CAAC,MAAM,KAAKlE,OAAZ,IAAuB,KAAKH,UAA5B,GAAyCgE,UAArD;AACA,QAAIM,QAAQ,GAAG,IAAI,KAAnB;AAEAH,IAAAA,SAAS,CAACnC,MAAV,CAAiB,MAAjB,EACSE,IADT,CACc,IADd,EACoB,CADpB,EACuBA,IADvB,CAC4B,IAD5B,EACkC,CADlC,EAESA,IAFT,CAEc,OAFd,EAEuB1B,KAFvB,EAE8B0B,IAF9B,CAEmC,QAFnC,EAE6CzB,MAF7C,EAEqDyB,IAFrD,CAE0D,MAF1D,EAEkE+B,QAFlE;AAIAE,IAAAA,SAAS,CAACnC,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,MAA9B,EAAsCgC,SAAtC,EACajC,KADb,CACmB,aADnB,EACkC,QADlC,EAEaA,KAFb,CAEmB,oBAFnB,EAEyC,SAFzC,EAGaC,IAHb,CAGkB,WAHlB,EAG+BoC,QAH/B,EAIapC,IAJb,CAIkB,IAJlB,EAIwBmC,KAJxB,EAKanC,IALb,CAKkB,IALlB,EAKwBkC,KALxB,EAMa3B,IANb,CAMkBA,IANlB;AAOH;;AAED3B,EAAAA,IAAI,CAACwB,CAAD,EAAI;AACJ,WAAOA,CAAC,GAAG,KAAKlC,MAAL,CAAYmE,IAAvB;AACH;;AAEDxD,EAAAA,IAAI,CAACwB,CAAD,EAAI;AACJ,WAAOA,CAAC,GAAG,KAAKnC,MAAL,CAAYoE,GAAvB;AACH;;AAEDxD,EAAAA,MAAM,GAAG;AACL,QAAIe,GAAG,GAAGpC,EAAE,CAAC0B,MAAH,CAAU,MAAM,KAAKhB,EAArB,EAAyB2B,MAAzB,CAAgC,KAAhC,EACGE,IADH,CACQ,OADR,EACiB,KAAK1B,KAAL,GAAa,KAAKJ,MAAL,CAAYmE,IAAzB,GAAgC,KAAKnE,MAAL,CAAYqE,KAD7D,EAEGvC,IAFH,CAEQ,QAFR,EAEkB,KAAKzB,MAAL,GAAc,KAAKL,MAAL,CAAYoE,GAA1B,GAAgC,KAAKpE,MAAL,CAAYsE,MAF9D,CAAV;AAGA,WAAO3C,GAAP;AACH;;AAtNwC","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nexport class GridStructure extends Component {\n    constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n        super(props)\n\n        this.gridWidth = gridWidth;\n\n        this.gridHeight = gridHeight;\n        this.nRow = rows;\n        this.nCol = cols;\n        this.width = this.gridWidth * this.nCol;\n        this.height = this.gridHeight * this.nRow;\n        this.padding = padding;\n        this.margin = margin\n        this.id = id;\n        \n        this.drawLine = this.drawLine.bind(this);\n        this.visulizeBox = this.visulizeBox.bind(this);\n        this.drawBasicStructure = this.drawBasicStructure.bind(this);\n        this.getX = this.getX.bind(this);\n        this.getY = this.getY.bind(this);\n        this.getSVG = this.getSVG.bind(this);\n        this.drawVerticalGrid = this.drawVerticalGrid.bind(this);\n        this.drawHorizontalGrid = this.drawHorizontalGrid.bind(this);\n        this.drawSeparator = this.drawSeparator.bind(this);\n        this.drawIndicator = this.drawIndicator.bind(this);\n        this.select = this.select.bind(this)\n        this.deselect = this.deselect.bind(this);\n        this.sorted = this.sorted.bind(this);\n        this.move = this.move.bind(this);\n        this.rightShift = this.rightShift.bind(this);\n    }\n\n    drawLine(x1, y1, x2, y2, color = \"gray\") {\n        this.svg.append(\"line\").style(\"stroke\", color)\n                        .attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1))\n                        .attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2))\n    }\n\n    drawBasicStructure() {\n        this.drawLine(0, 0, this.width, 0)\n        this.drawLine(0, this.height, this.width, this.height)\n        this.drawLine(0, 0, 0, this.height)\n        this.drawLine(this.width, 0, this.width, this.height)\n    }\n\n    drawHorizontalGrid() {\n        for (let i = 1; i <= this.nRow - 1; i++) {\n            this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow)\n        }\n    }\n\n    drawVerticalGrid() {\n        for (let i = 1; i <= this.nCol - 1; i++) {\n            this.drawLine(i * this.width / this.nCol, 0, i * this.width / this.nCol, this.height)\n        }\n    }\n\n    drawSeparator(row, col) {\n        let x = this.gridWidth * col;\n        let y = (row - 0.5) * this.gridHeight;\n\n        let sep = this.svg.append(\"g\").attr(\"id\", \"separator\")\n                    .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n        \n        sep.append(\"line\").attr(\"x1\", 0)\n                          .attr(\"y1\", 0)\n                          .attr(\"x2\", 0)\n                          .attr(\"y2\", 1.5 * this.gridHeight)\n                          .style(\"stroke\", \"gray\")\n        \n        sep.append(\"line\").attr(\"x1\", 0)\n                          .attr(\"y1\", 0.45 * this.gridHeight)\n                          .attr(\"x2\", 1.7 * this.gridHeight)\n                          .attr(\"y2\", 0.45 * this.gridHeight)\n                          .style(\"stroke\", \"gray\")\n\n\n        sep.append(\"text\").attr(\"fill\", \"gray\")\n                          //.style(\"text-anchor\", \"middle\")\n                          //.style(\"alignment-baseline\", \"central\")\n                          .attr(\"font-size\", \"0.9rem\")\n                          .attr(\"dy\", 0.4 * this.gridHeight)\n                          .attr(\"dx\", 0.05 * this.gridWidth)\n                          .text(\"Unsort\")\n\n        \n    }\n\n    drawIndicator(row, col, text = null) {\n        let padding = 0.05;\n\n        let topAdditional = 0.1\n\n        let x = (col + padding - 1) * this.gridWidth; \n        let y = (row + padding - 1 + topAdditional) * this.gridHeight;\n\n        let indicator = this.svg.append(\"g\").attr(\"id\", \"indicator\")\n                            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n        \n        indicator.append(\"line\").attr(\"x1\", 0)\n                            .attr(\"y1\", (0.5 - padding) * this.gridHeight)\n                            .attr(\"x2\", (0.5 - padding) * this.gridWidth)\n                            .attr(\"y2\", 0)\n                            .style(\"stroke\", \"gray\")\n        \n        indicator.append(\"line\").attr(\"x1\", (0.5 - padding) * this.gridWidth)\n                            .attr(\"y1\", 0)\n                            .attr(\"x2\", (1 - 2 * padding) * this.gridWidth)\n                            .attr(\"y2\", (0.5 - padding) * this.gridHeight)\n                            .style(\"stroke\", \"gray\")\n        \n        if (text) {\n            indicator.append(\"text\").attr(\"fill\", \"gray\")\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", \"0.7rem\")\n                    .attr(\"dy\", (0.5 - padding) * this.gridHeight)\n                    .attr(\"dx\", (0.5 - padding) * this.gridWidth)\n                    .text(text)\n        }\n\n    }\n\n    select(id, callback, duration) {\n        if (callback) {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\").on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\")\n        }\n    }\n\n    deselect(id) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"gray\")\n    }\n\n    sorted(id) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"green\")\n    }\n\n    move(id, row, col, yPadding = 0.05, xPadding = 0.05, callback = null, duration = 500) {\n        let newX = this.gridWidth * (col - 1 + xPadding)\n        let newY = this.gridHeight * (row - 1 + yPadding)\n\n        if (callback) {\n            d3.select(\"#\" + id).transition().duration(duration)\n                .attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\")\n                .on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id).transition().duration(duration)\n                .attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\")\n        }        \n    }\n\n    rightShift(shift, callback = null, duration = 500) {\n        let shiftSplit = shift.split(/[\\ ]+/)\n        let elements = shiftSplit[1]\n        if (elements === \"null\") {\n            callback();\n        } else {\n            let elementsSplit = elements.split(\",\")\n            let firstPosition = shiftSplit[2].split(\"-\")\n            for (let i = 0; i < elementsSplit.length; i++) {\n                let elementID = elementsSplit[i]\n                let next = null;\n                if (i === elementsSplit.length) {\n                    next = callback;\n                }\n                console.log(firstPosition[1] + i)\n                this.move(elementID, firstPosition[0], firstPosition[1] + i, \n                                0.05, 0.05, next, duration)\n            }\n        }\n    } \n\n    visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor = \"gray\", textColor = \"white\") {\n        let width = (1 - 2 * this.padding) * this.gridWidth * widthGrid;\n        let height = (1 - 2 * this.padding) * this.gridHeight * heightGrid;\n        let x = (col - 1 + this.padding) * this.gridWidth;\n        let y = (row - 1 + this.padding) * this.gridHeight;\n\n        let rectGroup = this.svg.append(\"g\")\n            .attr(\"id\", id)\n            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n\n        let textX = (0.5 - this.padding) * this.gridWidth * widthGrid;\n        let textY = (0.5 - this.padding) * this.gridHeight * heightGrid; \n        let textSize = 1 + \"rem\";\n\n        rectGroup.append(\"rect\")\n                .attr(\"rx\", 5).attr(\"ry\", 5)\n                .attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor)\n        \n        rectGroup.append(\"text\").attr(\"fill\", textColor)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", textSize)\n                    .attr(\"dy\", textY)\n                    .attr(\"dx\", textX)\n                    .text(text)\n    }\n\n    getX(x) {\n        return(x + this.margin.left);\n    }\n\n    getY(y) {\n        return(y + this.margin.top)\n    }\n\n    getSVG() {\n        let svg = d3.select(\"#\" + this.id).append(\"svg\")\n                    .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                    .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n        return(svg)\n    }\n}"]},"metadata":{},"sourceType":"module"}