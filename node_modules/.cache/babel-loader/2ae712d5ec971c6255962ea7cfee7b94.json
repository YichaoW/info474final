{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSort.js\";\nimport React from 'react';\nimport { GridStructure } from './GridStructure';\nexport class MergeSort extends GridStructure {\n  constructor(props) {\n    // 1: Grid Width 30px\n    // 2: Grid Height 30px\n    // 3: nRow: 4\n    // 4: nCol: 15\n    // 5: padding: 0.05\n    // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n    super(props, 30, 30, 4, 15, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"MergeSort\");\n    this.drawMergeGrid = this.drawMergeGrid.bind(this);\n    this.initViz = this.initViz.bind(this);\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.getActionHandler = this.getActionHandler.bind(this);\n    let initArray = [3, 2, 6, 2, 9, 8, 4, -3];\n    this.arrayStartCol = 1;\n    let actions = this.getAction(initArray);\n    this.state = {\n      array: initArray,\n      actions: actions,\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.drawHorizontalGrid();\n    this.drawMergeGrid();\n    this.initViz();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.setNewArray) {//this.clearViz();\n      //this.initViz();\n      //this.setState({\n      //    setNewArray: false\n      //})\n    } else {\n      let inverse = this.state.step < prevState.step;\n      let action = this.state.actions[this.state.step];\n\n      if (inverse) {\n        action = prevState.actions[prevState.step];\n      }\n\n      if (action.desc === \"Compare the Minimum of Two Arrays\") {//this.vizCompare(action.how, inverse)\n      }\n    }\n  }\n\n  initViz() {\n    for (let i = 0; i < this.state.array.length; i++) {\n      this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.array[i], \"MergeSort-\" + i, \"gray\", \"white\");\n    }\n  }\n\n  drawMergeGrid() {\n    for (let i = 1; i <= 14; i++) {\n      this.drawLine(i * 30, 90, i * 30, 120);\n    }\n\n    this.drawLine(210, 30, 210, 60);\n    this.drawLine(240, 30, 240, 60);\n\n    for (let i = 1; i <= 3; i++) {\n      this.drawLine(120 * i, 60, 120 * i, 90);\n      this.drawLine(120 * i - 30, 60, 120 * i - 30, 90);\n    }\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 1,\n        col: i + this.arrayStartCol\n      };\n    }\n\n    return positionMap;\n  }\n\n  getAction(array) {\n    let actions = [{\n      desc: \"Start Sort\",\n      how: []\n    }];\n    let newArray = [];\n\n    for (let i = 0; i < array.length; i++) {\n      newArray.push({\n        num: array[i],\n        id: i\n      });\n    }\n\n    let position = this.getInitialPosition(array);\n    this.getActionHandler(newArray, position, 1, actions);\n    actions.push({\n      desc: \"Sort Finish\",\n      how: []\n    });\n    return actions;\n  }\n\n  getActionHandler(array, position, level, actions) {\n    if (array.length === 1) {\n      let id = \"MergeSort-\" + array[0].id;\n      actions.push({\n        desc: \"Single Element Array is Sorted\",\n        how: [\"Sort \" + id]\n      });\n    } else {\n      let shiftLength = Math.ceil(array.length / 2);\n      let shiftStartIndex = Math.floor(array.length / 2);\n      let shiftInitPosition = position[array[shiftStartIndex].id];\n      let initCoordinate = shiftInitPosition.row + \"-\" + shiftInitPosition.col;\n      let shiftCommand = \"Shift \";\n      let shift = [];\n\n      for (let i = shiftStartIndex; i < array.length; i++) {\n        let id = array[i].id;\n        shift.push(\"MergeSort-\" + id);\n        position[id].col += shiftLength;\n      }\n\n      shiftCommand += shift + \" \" + initCoordinate + \" \" + shiftLength;\n      let action = {};\n      action.desc = \"Split Array into Smaller Pieces\";\n      action.how = [shiftCommand];\n\n      for (let i = 0; i < array.length; i++) {\n        let id = array[i].id;\n        let initPosition = position[id].row + \"-\" + position[id].col;\n        position[id].row++;\n        let newPosition = position[id].row + \"-\" + position[id].col;\n        action.how.push(\"Move MergeSort-\" + id + \" \" + initPosition + \" \" + newPosition);\n      }\n\n      actions.push(action);\n      let copyArray1 = [...array];\n      let copyArray2 = copyArray1.splice(shiftStartIndex);\n      let copyArray3 = [...array];\n      this.getActionHandler(copyArray1, position, level + 1, actions);\n      this.getActionHandler(copyArray2, position, level + 1, actions);\n      let sortNewAction = {};\n      sortNewAction.desc = \"Merge Two Sorted Array\";\n      sortNewAction.how = [];\n\n      for (let i = 0; i < array.length; array++) {\n        sortNewAction.how.push(\"Select MergeSort-\" + array[i].id);\n      }\n\n      actions.push(sortNewAction);\n      let copyArray4 = copyArray3.splice(shiftStartIndex);\n      copyArray3.sort((a, b) => {\n        return a.num - b.num;\n      });\n      copyArray4.sort((a, b) => {\n        return a.num - b.num;\n      });\n      let initPosition = position[copyArray3[0].id];\n      let initRow = initPosition.row - 1;\n      let initCol = initPosition.col;\n      let i = 0;\n      let j = 0;\n      let result = [];\n\n      while (i < copyArray3.length && j < copyArray4.length) {\n        let num1 = copyArray3[i].num;\n        let num2 = copyArray4[j].num;\n        let pushAction = {\n          desc: \"Push the Minimum to Next Level\"\n        };\n        let numID = copyArray3[i].id;\n\n        if (num2 < num1) {\n          numID = copyArray4[j].id;\n          j++;\n        } else {\n          i++;\n        }\n\n        let originalPosit = position[numID].row + \"-\" + position[numID].col;\n        let newPosit = initRow + \"-\" + (initCol + result.length);\n        position[numID].row = initRow;\n        position[numID].col = initCol;\n        result.push(numID);\n        pushAction.how = [\"Sort MergeSort-\" + numID, \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit];\n        actions.push(pushAction);\n      }\n\n      while (i < copyArray3.length) {\n        let pushAction = {\n          desc: \"Push the Minimum to Next Level\"\n        };\n        let numID = copyArray3[i].id;\n        i++;\n        let originalPosit = position[numID].row + \"-\" + position[numID].col;\n        let newPosit = initRow + \"-\" + (initCol + result.length);\n        position[numID].row = initRow;\n        position[numID].col = initCol;\n        result.push(numID);\n        pushAction.how = [\"Sort MergeSort-\" + numID, \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit];\n        actions.push(pushAction);\n      }\n\n      while (j < copyArray4.length) {\n        let pushAction = {\n          desc: \"Push the Minimum to Next Level\"\n        };\n        let numID = copyArray4[j].id;\n        j++;\n        let originalPosit = position[numID].row + \"-\" + position[numID].col;\n        let newPosit = initRow + \"-\" + (initCol + result.length);\n        position[numID].row = initRow;\n        position[numID].col = initCol;\n        result.push(numID);\n        pushAction.how = [\"Sort MergeSort-\" + numID, \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit];\n        actions.push(pushAction);\n      }\n    }\n  }\n\n  render() {\n    let actionDisplay = \"Finding Algorithm\";\n\n    if (this.state.actions.length > 0) {\n      let cur = Math.min(this.state.actions.length - 1, this.state.step);\n      actionDisplay = this.state.actions[cur].desc;\n    }\n\n    let run = \"Run!\";\n\n    if (this.state.animation) {\n      run = \"Stop!\";\n    }\n\n    return React.createElement(\"div\", {\n      id: \"MergeSort\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, actionDisplay), React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step < this.state.actions.length - 1) {\n          this.setState({\n            step: this.state.step + 1\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Next\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSort.js"],"names":["React","GridStructure","MergeSort","constructor","props","top","bottom","left","right","drawMergeGrid","bind","initViz","getInitialPosition","getAction","getActionHandler","initArray","arrayStartCol","actions","state","array","step","speed","setNewArray","animation","componentDidMount","svg","getSVG","drawBasicStructure","drawHorizontalGrid","componentDidUpdate","prevProps","prevState","inverse","action","desc","i","length","visulizeBox","drawLine","positionMap","row","col","how","newArray","push","num","id","position","level","shiftLength","Math","ceil","shiftStartIndex","floor","shiftInitPosition","initCoordinate","shiftCommand","shift","initPosition","newPosition","copyArray1","copyArray2","splice","copyArray3","sortNewAction","copyArray4","sort","a","b","initRow","initCol","j","result","num1","num2","pushAction","numID","originalPosit","newPosit","render","actionDisplay","cur","min","run","setState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {GridStructure} from './GridStructure'\n\nexport class MergeSort extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 4\n        // 4: nCol: 15\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 4, 15, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"MergeSort\")\n\n        this.drawMergeGrid = this.drawMergeGrid.bind(this);\n        this.initViz = this.initViz.bind(this)\n        this.getInitialPosition = this.getInitialPosition.bind(this)\n        this.getAction = this.getAction.bind(this)\n        this.getActionHandler = this.getActionHandler.bind(this)\n\n        let initArray = [3, 2, 6, 2, 9, 8, 4, -3]\n        this.arrayStartCol = 1;\n\n        let actions = this.getAction(initArray)\n        this.state = {\n            array: initArray,\n            actions: actions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.drawHorizontalGrid();\n        this.drawMergeGrid();\n        this.initViz();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.setNewArray) {\n            //this.clearViz();\n            //this.initViz();\n            //this.setState({\n            //    setNewArray: false\n            //})\n        } else {\n            let inverse = this.state.step < prevState.step\n            let action = this.state.actions[this.state.step];\n            if (inverse) {\n                action = prevState.actions[prevState.step];\n            }\n            \n            if (action.desc === \"Compare the Minimum of Two Arrays\") {\n                //this.vizCompare(action.how, inverse)\n            } \n         \n        }\n    }\n\n    initViz() {\n        for (let i = 0; i < this.state.array.length; i++) {\n            this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.array[i], \"MergeSort-\" + i, \"gray\", \"white\")\n        }\n    }\n\n    drawMergeGrid() {\n        for (let i = 1; i <= 14; i++) {\n            this.drawLine(i * 30, 90, i * 30, 120)\n        }\n        this.drawLine(210, 30, 210, 60)\n        this.drawLine(240, 30, 240, 60)\n\n        for (let i = 1; i <= 3; i++) {\n            this.drawLine(120 * i, 60, 120 * i, 90)\n            this.drawLine(120 * i - 30, 60, 120 * i - 30, 90)\n        }\n        \n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 1,\n                col: i + this.arrayStartCol\n            }\n        } \n        return(positionMap)\n    }\n\n    getAction(array) {\n        let actions = [{\n            desc: \"Start Sort\",\n            how: []\n        }]\n\n        let newArray = []\n        for (let i = 0; i < array.length; i++) {\n            newArray.push({\n                num: array[i],\n                id: i\n            })\n        }\n        let position = this.getInitialPosition(array);\n        this.getActionHandler(newArray, position, 1, actions);\n\n        actions.push({\n            desc: \"Sort Finish\",\n            how: []\n        })\n        return(actions)\n    }\n\n    getActionHandler(array, position, level, actions) {\n        if (array.length === 1) {\n            let id = \"MergeSort-\" + array[0].id\n            actions.push({\n                desc: \"Single Element Array is Sorted\",\n                how: [\"Sort \" + id]\n            })\n        } else {\n            let shiftLength = Math.ceil(array.length / 2)\n            let shiftStartIndex = Math.floor(array.length / 2)\n            let shiftInitPosition = position[array[shiftStartIndex].id]\n            let initCoordinate = shiftInitPosition.row + \"-\" + shiftInitPosition.col\n            let shiftCommand = \"Shift \"\n            let shift = []\n            for (let i = shiftStartIndex; i < array.length; i++) {\n                let id = array[i].id\n                shift.push(\"MergeSort-\" + id)\n                position[id].col += shiftLength\n            }\n            shiftCommand += shift + \" \" + initCoordinate + \" \" + shiftLength\n\n            let action = {};\n            action.desc = \"Split Array into Smaller Pieces\"\n            action.how = [shiftCommand]\n\n            for (let i = 0; i < array.length; i++) {\n                let id = array[i].id\n                let initPosition = position[id].row + \"-\" + position[id].col;\n                position[id].row++;\n                let newPosition = position[id].row + \"-\" + position[id].col;\n                action.how.push(\"Move MergeSort-\" + id + \" \" + initPosition + \" \" + newPosition)\n            }\n\n            actions.push(action)\n            let copyArray1 = [...array]\n            let copyArray2 = copyArray1.splice(shiftStartIndex)\n\n            let copyArray3 = [...array]\n            this.getActionHandler(copyArray1, position, level + 1, actions);\n            this.getActionHandler(copyArray2, position, level + 1, actions)\n\n            let sortNewAction = {};\n            sortNewAction.desc = \"Merge Two Sorted Array\"\n            sortNewAction.how = [];\n            for (let i = 0; i < array.length; array++) {\n                sortNewAction.how.push(\"Select MergeSort-\" + array[i].id)\n            }\n            actions.push(sortNewAction);\n            let copyArray4 = copyArray3.splice(shiftStartIndex)\n            copyArray3.sort((a, b) => {\n                return a.num - b.num\n            })\n\n            copyArray4.sort((a, b) => {\n                return a.num - b.num\n            })\n\n            let initPosition = position[copyArray3[0].id]\n            let initRow = initPosition.row - 1;\n            let initCol = initPosition.col;\n\n            let i = 0;\n            let j = 0;\n            let result = [];\n            while (i < copyArray3.length && j < copyArray4.length) {\n                let num1 = copyArray3[i].num\n                let num2 = copyArray4[j].num\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray3[i].id\n                if (num2 < num1) {\n                    numID = copyArray4[j].id\n                    j++;\n                } else {\n                    i++;\n                }\n                let originalPosit = position[numID].row + \"-\" + position[numID].col\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n\n            while (i < copyArray3.length)  {\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray3[i].id\n                i++;\n                \n                let originalPosit = position[numID].row + \"-\" + position[numID].col\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n\n            while (j < copyArray4.length) {\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray4[j].id\n                j++;\n                let originalPosit = position[numID].row + \"-\" + position[numID].col\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n        }\n    }\n\n\n    render() {\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            let cur = Math.min(this.state.actions.length - 1, this.state.step)\n            actionDisplay = this.state.actions[cur].desc;\n        }\n\n        let run = \"Run!\"\n        if (this.state.animation) {\n            run = \"Stop!\"\n        }\n\n        return(\n            <div id=\"MergeSort\">\n                <div>{actionDisplay}</div>\n                <button onClick={() => {\n                    if (this.state.step < this.state.actions.length - 1) {\n                        this.setState({\n                            step: this.state.step + 1\n                        })\n                    }\n                }} >Next</button>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}