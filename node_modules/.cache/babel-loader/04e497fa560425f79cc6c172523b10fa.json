{"ast":null,"code":"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nexport class GridStructure extends Component {\n  constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n    super(props);\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.nRow = rows;\n    this.nCol = cols;\n    this.width = this.gridWidth * this.nCol;\n    this.height = this.gridHeight * this.nRow;\n    this.padding = padding;\n    this.margin = margin;\n    this.id = id;\n    this.drawLine = this.drawLine.bind(this);\n    this.visulizeBox = this.visulizeBox.bind(this);\n    this.drawBasicStructure = this.drawBasicStructure.bind(this);\n    this.generateRandomArray = this.generateRandomArray.bind(this);\n    this.getX = this.getX.bind(this);\n    this.getY = this.getY.bind(this);\n    this.getSVG = this.getSVG.bind(this);\n    this.drawVerticalGrid = this.drawVerticalGrid.bind(this);\n    this.drawHorizontalGrid = this.drawHorizontalGrid.bind(this);\n    this.drawSeparator = this.drawSeparator.bind(this);\n    this.drawIndicator = this.drawIndicator.bind(this);\n    this.select = this.select.bind(this);\n    this.deselect = this.deselect.bind(this);\n    this.sorted = this.sorted.bind(this);\n    this.move = this.move.bind(this);\n    this.shift = this.shift.bind(this);\n    this.warn = this.warn.bind(this);\n  }\n\n  drawLine(x1, y1, x2, y2, color = \"gray\") {\n    this.svg.append(\"line\").style(\"stroke\", color).attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1)).attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2));\n  }\n\n  drawBasicStructure() {\n    this.drawLine(0, 0, this.width, 0);\n    this.drawLine(0, this.height, this.width, this.height);\n    this.drawLine(0, 0, 0, this.height);\n    this.drawLine(this.width, 0, this.width, this.height);\n  }\n\n  drawHorizontalGrid() {\n    for (let i = 1; i <= this.nRow - 1; i++) {\n      this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow);\n    }\n  }\n\n  drawVerticalGrid() {\n    for (let i = 1; i <= this.nCol - 1; i++) {\n      this.drawLine(i * this.width / this.nCol, 0, i * this.width / this.nCol, this.height);\n    }\n  }\n\n  drawSeparator(row, col, id) {\n    let x = this.gridWidth * col;\n    let y = (row - 0.5) * this.gridHeight;\n    let sep = this.svg.append(\"g\").attr(\"id\", \"separator-\" + id).attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    sep.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", 0).attr(\"y2\", 1.5 * this.gridHeight).style(\"stroke\", \"gray\");\n    sep.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0.45 * this.gridHeight).attr(\"x2\", 1.7 * this.gridHeight).attr(\"y2\", 0.45 * this.gridHeight).style(\"stroke\", \"gray\");\n    sep.append(\"text\").attr(\"fill\", \"gray\") //.style(\"text-anchor\", \"middle\")\n    //.style(\"alignment-baseline\", \"central\")\n    .attr(\"font-size\", \"0.9rem\").attr(\"dy\", 0.4 * this.gridHeight).attr(\"dx\", 0.05 * this.gridWidth).text(\"Unsort\");\n  }\n\n  drawIndicator(row, col, text = null, id) {\n    let padding = 0.05;\n    let topAdditional = 0.1;\n    let x = (col + padding - 1) * this.gridWidth;\n    let y = (row + padding - 1 + topAdditional) * this.gridHeight;\n    let indicator = this.svg.append(\"g\").attr(\"id\", \"indicator-\" + id).attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    indicator.append(\"line\").attr(\"x1\", 0).attr(\"y1\", (0.5 - padding) * this.gridHeight).attr(\"x2\", (0.5 - padding) * this.gridWidth).attr(\"y2\", 0).style(\"stroke\", \"gray\");\n    indicator.append(\"line\").attr(\"x1\", (0.5 - padding) * this.gridWidth).attr(\"y1\", 0).attr(\"x2\", (1 - 2 * padding) * this.gridWidth).attr(\"y2\", (0.5 - padding) * this.gridHeight).style(\"stroke\", \"gray\");\n\n    if (text) {\n      indicator.append(\"text\").attr(\"fill\", \"gray\").style(\"text-anchor\", \"middle\").style(\"alignment-baseline\", \"central\").attr(\"font-size\", \"0.7rem\").attr(\"dy\", (0.5 - padding) * this.gridHeight).attr(\"dx\", (0.5 - padding) * this.gridWidth).text(text);\n    }\n  }\n\n  select(id, callback = null, duration) {\n    if (callback) {\n      d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\").on(\"end\", callback);\n    } else {\n      d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\");\n    }\n  }\n\n  deselect(id, callback = null, duration = 500) {\n    if (callback) {\n      d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"gray\").on(\"end\", callback);\n    } else {\n      d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"gray\");\n    }\n  }\n\n  sorted(id, duration) {\n    d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"green\");\n  }\n\n  warn(id, duration) {\n    d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"red\");\n  }\n\n  move(id, row, col, yPadding = 0.05, xPadding = 0.05, callback = null, duration = 500) {\n    let newX = this.gridWidth * (+col - 1 + xPadding);\n    let newY = this.gridHeight * (+row - 1 + yPadding);\n\n    if (callback) {\n      d3.select(\"#\" + id).transition().duration(duration).attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\").on(\"end\", callback);\n    } else {\n      d3.select(\"#\" + id).transition().duration(duration).attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\");\n    }\n  }\n\n  shift(shift, callback = null, duration = 500, direction) {\n    let shiftSplit = shift.split(/[ ]+/);\n    let elements = shiftSplit[1];\n\n    if (elements === \"null\") {\n      if (callback !== null) {\n        callback();\n      }\n    } else {\n      let elementsSplit = elements.split(\",\");\n      let firstPosition = shiftSplit[2].split(\"-\");\n\n      for (let i = 0; i < elementsSplit.length; i++) {\n        let elementID = elementsSplit[i];\n        let next = null;\n\n        if (i === elementsSplit.length - 1) {\n          next = callback;\n        }\n\n        this.move(elementID, firstPosition[0], +firstPosition[1] + i + direction, 0.05, 0.05, next, duration);\n      }\n    }\n  }\n\n  visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor = \"gray\", textColor = \"white\", borderRadius = 5, xPadding = 0.05, yPadding = 0.05) {\n    let width = (1 - 2 * xPadding) * this.gridWidth * widthGrid;\n    let height = (1 - 2 * yPadding) * this.gridHeight * heightGrid;\n    let x = (col - 1 + xPadding) * this.gridWidth;\n    let y = (row - 1 + yPadding) * this.gridHeight;\n    let rectGroup = this.svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    let textX = (0.5 - xPadding) * this.gridWidth * widthGrid;\n    let textY = (0.5 - yPadding) * this.gridHeight * heightGrid;\n    let textSize = 1 + \"rem\";\n    rectGroup.append(\"rect\").attr(\"rx\", borderRadius).attr(\"ry\", borderRadius).attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor);\n    rectGroup.append(\"text\").attr(\"fill\", textColor).style(\"text-anchor\", \"middle\").style(\"alignment-baseline\", \"central\").attr(\"font-size\", textSize).attr(\"dy\", textY).attr(\"dx\", textX).text(text);\n  }\n\n  getX(x) {\n    return x + this.margin.left;\n  }\n\n  getY(y) {\n    return y + this.margin.top;\n  }\n\n  getSVG() {\n    let svg = d3.select(\"#\" + this.id).append(\"svg\").attr(\"width\", this.width + this.margin.left + this.margin.right).attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n    return svg;\n  }\n\n  generateRandomArray(minLength, maxLength) {\n    let length = Math.round(Math.random() * (maxLength - minLength) + minLength);\n    let newArray = [];\n\n    for (let i = 0; i < length; i++) {\n      newArray[i] = Math.floor(Math.random() * 20) - 4;\n    }\n\n    return newArray;\n  }\n\n}","map":{"version":3,"sources":["/Users/wyc/Desktop/info474final/src/Components/GridStructure.js"],"names":["React","Component","d3","GridStructure","constructor","props","gridWidth","gridHeight","rows","cols","padding","margin","id","nRow","nCol","width","height","drawLine","bind","visulizeBox","drawBasicStructure","generateRandomArray","getX","getY","getSVG","drawVerticalGrid","drawHorizontalGrid","drawSeparator","drawIndicator","select","deselect","sorted","move","shift","warn","x1","y1","x2","y2","color","svg","append","style","attr","i","row","col","x","y","sep","text","topAdditional","indicator","callback","duration","transition","on","yPadding","xPadding","newX","newY","direction","shiftSplit","split","elements","elementsSplit","firstPosition","length","elementID","next","widthGrid","heightGrid","boxColor","textColor","borderRadius","rectGroup","textX","textY","textSize","left","top","right","bottom","minLength","maxLength","Math","round","random","newArray","floor"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,OAAO,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAQC,SAAR,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,OAA3C,EAAoDC,MAApD,EAA4DC,EAA5D,EAAgE;AACvE,UAAMP,KAAN;AAEA,SAAKC,SAAL,GAAiBA,SAAjB;AAEA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKM,IAAL,GAAYL,IAAZ;AACA,SAAKM,IAAL,GAAYL,IAAZ;AACA,SAAKM,KAAL,GAAa,KAAKT,SAAL,GAAiB,KAAKQ,IAAnC;AACA,SAAKE,MAAL,GAAc,KAAKT,UAAL,GAAkB,KAAKM,IAArC;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,EAAL,GAAUA,EAAV;AAEA,SAAKK,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKG,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBH,IAAzB,CAA8B,IAA9B,CAA3B;AAEA,SAAKI,IAAL,GAAY,KAAKA,IAAL,CAAUJ,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKK,IAAL,GAAY,KAAKA,IAAL,CAAUL,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKM,MAAL,GAAc,KAAKA,MAAL,CAAYN,IAAZ,CAAiB,IAAjB,CAAd;AAGA,SAAKO,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBP,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKQ,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBR,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKS,aAAL,GAAqB,KAAKA,aAAL,CAAmBT,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKU,aAAL,GAAqB,KAAKA,aAAL,CAAmBV,IAAnB,CAAwB,IAAxB,CAArB;AAGA,SAAKW,MAAL,GAAc,KAAKA,MAAL,CAAYX,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKY,QAAL,GAAgB,KAAKA,QAAL,CAAcZ,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKa,MAAL,GAAc,KAAKA,MAAL,CAAYb,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKc,IAAL,GAAY,KAAKA,IAAL,CAAUd,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKe,KAAL,GAAa,KAAKA,KAAL,CAAWf,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKgB,IAAL,GAAY,KAAKA,IAAL,CAAUhB,IAAV,CAAe,IAAf,CAAZ;AACH;;AAEDD,EAAAA,QAAQ,CAACkB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,KAAK,GAAG,MAAzB,EAAiC;AACrC,SAAKC,GAAL,CAASC,MAAT,CAAgB,MAAhB,EAAwBC,KAAxB,CAA8B,QAA9B,EAAwCH,KAAxC,EACiBI,IADjB,CACsB,IADtB,EAC4B,KAAKrB,IAAL,CAAUa,EAAV,CAD5B,EAC2CQ,IAD3C,CACgD,IADhD,EACsD,KAAKpB,IAAL,CAAUa,EAAV,CADtD,EAEiBO,IAFjB,CAEsB,IAFtB,EAE4B,KAAKrB,IAAL,CAAUe,EAAV,CAF5B,EAE2CM,IAF3C,CAEgD,IAFhD,EAEsD,KAAKpB,IAAL,CAAUe,EAAV,CAFtD;AAGH;;AAEDlB,EAAAA,kBAAkB,GAAG;AACjB,SAAKH,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKF,KAAzB,EAAgC,CAAhC;AACA,SAAKE,QAAL,CAAc,CAAd,EAAiB,KAAKD,MAAtB,EAA8B,KAAKD,KAAnC,EAA0C,KAAKC,MAA/C;AACA,SAAKC,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAKD,MAA5B;AACA,SAAKC,QAAL,CAAc,KAAKF,KAAnB,EAA0B,CAA1B,EAA6B,KAAKA,KAAlC,EAAyC,KAAKC,MAA9C;AACH;;AAEDU,EAAAA,kBAAkB,GAAG;AACjB,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK/B,IAAL,GAAY,CAAjC,EAAoC+B,CAAC,EAArC,EAAyC;AACrC,WAAK3B,QAAL,CAAc,CAAd,EAAiB2B,CAAC,GAAG,KAAK5B,MAAT,GAAkB,KAAKH,IAAxC,EAA8C,KAAKE,KAAnD,EAA0D6B,CAAC,GAAG,KAAK5B,MAAT,GAAkB,KAAKH,IAAjF;AACH;AACJ;;AAEDY,EAAAA,gBAAgB,GAAG;AACf,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK9B,IAAL,GAAY,CAAjC,EAAoC8B,CAAC,EAArC,EAAyC;AACrC,WAAK3B,QAAL,CAAc2B,CAAC,GAAG,KAAK7B,KAAT,GAAiB,KAAKD,IAApC,EAA0C,CAA1C,EAA6C8B,CAAC,GAAG,KAAK7B,KAAT,GAAiB,KAAKD,IAAnE,EAAyE,KAAKE,MAA9E;AACH;AACJ;;AAEDW,EAAAA,aAAa,CAACkB,GAAD,EAAMC,GAAN,EAAWlC,EAAX,EAAe;AACxB,QAAImC,CAAC,GAAG,KAAKzC,SAAL,GAAiBwC,GAAzB;AACA,QAAIE,CAAC,GAAG,CAACH,GAAG,GAAG,GAAP,IAAc,KAAKtC,UAA3B;AAEA,QAAI0C,GAAG,GAAG,KAAKT,GAAL,CAASC,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B,IAA1B,EAAgC,eAAe/B,EAA/C,EACG+B,IADH,CACQ,WADR,EACqB,eAAe,KAAKrB,IAAL,CAAUyB,CAAV,CAAf,GAA8B,IAA9B,GAAqC,KAAKxB,IAAL,CAAUyB,CAAV,CAArC,GAAoD,GADzE,CAAV;AAGAC,IAAAA,GAAG,CAACR,MAAJ,CAAW,MAAX,EAAmBE,IAAnB,CAAwB,IAAxB,EAA8B,CAA9B,EACmBA,IADnB,CACwB,IADxB,EAC8B,CAD9B,EAEmBA,IAFnB,CAEwB,IAFxB,EAE8B,CAF9B,EAGmBA,IAHnB,CAGwB,IAHxB,EAG8B,MAAM,KAAKpC,UAHzC,EAImBmC,KAJnB,CAIyB,QAJzB,EAImC,MAJnC;AAMAO,IAAAA,GAAG,CAACR,MAAJ,CAAW,MAAX,EAAmBE,IAAnB,CAAwB,IAAxB,EAA8B,CAA9B,EACmBA,IADnB,CACwB,IADxB,EAC8B,OAAO,KAAKpC,UAD1C,EAEmBoC,IAFnB,CAEwB,IAFxB,EAE8B,MAAM,KAAKpC,UAFzC,EAGmBoC,IAHnB,CAGwB,IAHxB,EAG8B,OAAO,KAAKpC,UAH1C,EAImBmC,KAJnB,CAIyB,QAJzB,EAImC,MAJnC;AAOAO,IAAAA,GAAG,CAACR,MAAJ,CAAW,MAAX,EAAmBE,IAAnB,CAAwB,MAAxB,EAAgC,MAAhC,EACkB;AACA;AAFlB,KAGmBA,IAHnB,CAGwB,WAHxB,EAGqC,QAHrC,EAImBA,IAJnB,CAIwB,IAJxB,EAI8B,MAAM,KAAKpC,UAJzC,EAKmBoC,IALnB,CAKwB,IALxB,EAK8B,OAAO,KAAKrC,SAL1C,EAMmB4C,IANnB,CAMwB,QANxB;AASH;;AAEDtB,EAAAA,aAAa,CAACiB,GAAD,EAAMC,GAAN,EAAWI,IAAI,GAAG,IAAlB,EAAwBtC,EAAxB,EAA4B;AACrC,QAAIF,OAAO,GAAG,IAAd;AAEA,QAAIyC,aAAa,GAAG,GAApB;AAEA,QAAIJ,CAAC,GAAG,CAACD,GAAG,GAAGpC,OAAN,GAAgB,CAAjB,IAAsB,KAAKJ,SAAnC;AACA,QAAI0C,CAAC,GAAG,CAACH,GAAG,GAAGnC,OAAN,GAAgB,CAAhB,GAAoByC,aAArB,IAAsC,KAAK5C,UAAnD;AAEA,QAAI6C,SAAS,GAAG,KAAKZ,GAAL,CAASC,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,CAA0B,IAA1B,EAAgC,eAAe/B,EAA/C,EACK+B,IADL,CACU,WADV,EACuB,eAAe,KAAKrB,IAAL,CAAUyB,CAAV,CAAf,GAA8B,IAA9B,GAAqC,KAAKxB,IAAL,CAAUyB,CAAV,CAArC,GAAoD,GAD3E,CAAhB;AAGAI,IAAAA,SAAS,CAACX,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,IAA9B,EAAoC,CAApC,EACqBA,IADrB,CAC0B,IAD1B,EACgC,CAAC,MAAMjC,OAAP,IAAkB,KAAKH,UADvD,EAEqBoC,IAFrB,CAE0B,IAF1B,EAEgC,CAAC,MAAMjC,OAAP,IAAkB,KAAKJ,SAFvD,EAGqBqC,IAHrB,CAG0B,IAH1B,EAGgC,CAHhC,EAIqBD,KAJrB,CAI2B,QAJ3B,EAIqC,MAJrC;AAMAU,IAAAA,SAAS,CAACX,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,IAA9B,EAAoC,CAAC,MAAMjC,OAAP,IAAkB,KAAKJ,SAA3D,EACqBqC,IADrB,CAC0B,IAD1B,EACgC,CADhC,EAEqBA,IAFrB,CAE0B,IAF1B,EAEgC,CAAC,IAAI,IAAIjC,OAAT,IAAoB,KAAKJ,SAFzD,EAGqBqC,IAHrB,CAG0B,IAH1B,EAGgC,CAAC,MAAMjC,OAAP,IAAkB,KAAKH,UAHvD,EAIqBmC,KAJrB,CAI2B,QAJ3B,EAIqC,MAJrC;;AAMA,QAAIQ,IAAJ,EAAU;AACNE,MAAAA,SAAS,CAACX,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,MAA9B,EAAsC,MAAtC,EACSD,KADT,CACe,aADf,EAC8B,QAD9B,EAESA,KAFT,CAEe,oBAFf,EAEqC,SAFrC,EAGSC,IAHT,CAGc,WAHd,EAG2B,QAH3B,EAISA,IAJT,CAIc,IAJd,EAIoB,CAAC,MAAMjC,OAAP,IAAkB,KAAKH,UAJ3C,EAKSoC,IALT,CAKc,IALd,EAKoB,CAAC,MAAMjC,OAAP,IAAkB,KAAKJ,SAL3C,EAMS4C,IANT,CAMcA,IANd;AAOH;AAEJ;;AAEDrB,EAAAA,MAAM,CAACjB,EAAD,EAAKyC,QAAQ,GAAG,IAAhB,EAAsBC,QAAtB,EAAgC;AAClC,QAAID,QAAJ,EAAc;AACVnD,MAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAN,GAAW,SAArB,EAAgC2C,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,MAA7E,EAAqFa,EAArF,CAAwF,KAAxF,EAA+FH,QAA/F;AACH,KAFD,MAEO;AACHnD,MAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAN,GAAW,SAArB,EAAgC2C,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,MAA7E;AACH;AACJ;;AAEDb,EAAAA,QAAQ,CAAClB,EAAD,EAAKyC,QAAQ,GAAG,IAAhB,EAAsBC,QAAQ,GAAG,GAAjC,EAAsC;AAC1C,QAAID,QAAJ,EAAc;AACVnD,MAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAN,GAAW,SAArB,EAAgC2C,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,MAA7E,EAAqFa,EAArF,CAAwF,KAAxF,EAA+FH,QAA/F;AACH,KAFD,MAEO;AACHnD,MAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAN,GAAW,SAArB,EAAgC2C,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,MAA7E;AACH;AACJ;;AAEDZ,EAAAA,MAAM,CAACnB,EAAD,EAAK0C,QAAL,EAAe;AACjBpD,IAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAN,GAAW,SAArB,EAAgC2C,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,OAA7E;AACH;;AAEDT,EAAAA,IAAI,CAACtB,EAAD,EAAK0C,QAAL,EAAe;AACfpD,IAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAN,GAAW,SAArB,EAAgC2C,UAAhC,GAA6CD,QAA7C,CAAsDA,QAAtD,EAAgEX,IAAhE,CAAqE,MAArE,EAA6E,KAA7E;AACH;;AAEDX,EAAAA,IAAI,CAACpB,EAAD,EAAKiC,GAAL,EAAUC,GAAV,EAAeW,QAAQ,GAAG,IAA1B,EAAgCC,QAAQ,GAAG,IAA3C,EAAiDL,QAAQ,GAAG,IAA5D,EAAkEC,QAAQ,GAAG,GAA7E,EAAkF;AAClF,QAAIK,IAAI,GAAG,KAAKrD,SAAL,IAAkB,CAACwC,GAAD,GAAO,CAAP,GAAWY,QAA7B,CAAX;AACA,QAAIE,IAAI,GAAG,KAAKrD,UAAL,IAAmB,CAACsC,GAAD,GAAO,CAAP,GAAWY,QAA9B,CAAX;;AAEA,QAAIJ,QAAJ,EAAc;AACVnD,MAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAhB,EAAoB2C,UAApB,GAAiCD,QAAjC,CAA0CA,QAA1C,EACKX,IADL,CACU,WADV,EACuB,eAAe,KAAKrB,IAAL,CAAUqC,IAAV,CAAf,GAAiC,IAAjC,GAAwC,KAAKpC,IAAL,CAAUqC,IAAV,CAAxC,GAA0D,GADjF,EAEKJ,EAFL,CAEQ,KAFR,EAEeH,QAFf;AAGH,KAJD,MAIO;AACHnD,MAAAA,EAAE,CAAC2B,MAAH,CAAU,MAAMjB,EAAhB,EAAoB2C,UAApB,GAAiCD,QAAjC,CAA0CA,QAA1C,EACKX,IADL,CACU,WADV,EACuB,eAAe,KAAKrB,IAAL,CAAUqC,IAAV,CAAf,GAAiC,IAAjC,GAAwC,KAAKpC,IAAL,CAAUqC,IAAV,CAAxC,GAA0D,GADjF;AAEH;AACJ;;AAED3B,EAAAA,KAAK,CAACA,KAAD,EAAQoB,QAAQ,GAAG,IAAnB,EAAyBC,QAAQ,GAAG,GAApC,EAAyCO,SAAzC,EAAoD;AACrD,QAAIC,UAAU,GAAG7B,KAAK,CAAC8B,KAAN,CAAY,MAAZ,CAAjB;AACA,QAAIC,QAAQ,GAAGF,UAAU,CAAC,CAAD,CAAzB;;AACA,QAAIE,QAAQ,KAAK,MAAjB,EAAyB;AACrB,UAAIX,QAAQ,KAAK,IAAjB,EAAuB;AACnBA,QAAAA,QAAQ;AACX;AACJ,KAJD,MAIO;AACH,UAAIY,aAAa,GAAGD,QAAQ,CAACD,KAAT,CAAe,GAAf,CAApB;AACA,UAAIG,aAAa,GAAGJ,UAAU,CAAC,CAAD,CAAV,CAAcC,KAAd,CAAoB,GAApB,CAApB;;AACA,WAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,aAAa,CAACE,MAAlC,EAA0CvB,CAAC,EAA3C,EAA+C;AAC3C,YAAIwB,SAAS,GAAGH,aAAa,CAACrB,CAAD,CAA7B;AACA,YAAIyB,IAAI,GAAG,IAAX;;AACA,YAAIzB,CAAC,KAAKqB,aAAa,CAACE,MAAd,GAAuB,CAAjC,EAAoC;AAChCE,UAAAA,IAAI,GAAGhB,QAAP;AACH;;AACD,aAAKrB,IAAL,CAAUoC,SAAV,EAAqBF,aAAa,CAAC,CAAD,CAAlC,EAAuC,CAACA,aAAa,CAAC,CAAD,CAAd,GAAoBtB,CAApB,GAAwBiB,SAA/D,EACgB,IADhB,EACsB,IADtB,EAC4BQ,IAD5B,EACkCf,QADlC;AAEH;AACJ;AACJ;;AAEDnC,EAAAA,WAAW,CAAC0B,GAAD,EAAMC,GAAN,EAAWwB,SAAX,EAAsBC,UAAtB,EAAkCrB,IAAlC,EAAwCtC,EAAxC,EAA4C4D,QAAQ,GAAG,MAAvD,EAA+DC,SAAS,GAAG,OAA3E,EACKC,YAAY,GAAG,CADpB,EACuBhB,QAAQ,GAAG,IADlC,EACwCD,QAAQ,GAAG,IADnD,EACyD;AAChE,QAAI1C,KAAK,GAAG,CAAC,IAAI,IAAI2C,QAAT,IAAqB,KAAKpD,SAA1B,GAAsCgE,SAAlD;AACA,QAAItD,MAAM,GAAG,CAAC,IAAI,IAAIyC,QAAT,IAAqB,KAAKlD,UAA1B,GAAuCgE,UAApD;AACA,QAAIxB,CAAC,GAAG,CAACD,GAAG,GAAG,CAAN,GAAUY,QAAX,IAAuB,KAAKpD,SAApC;AACA,QAAI0C,CAAC,GAAG,CAACH,GAAG,GAAG,CAAN,GAAUY,QAAX,IAAuB,KAAKlD,UAApC;AAEA,QAAIoE,SAAS,GAAG,KAAKnC,GAAL,CAASC,MAAT,CAAgB,GAAhB,EACXE,IADW,CACN,IADM,EACA/B,EADA,EAEX+B,IAFW,CAEN,WAFM,EAEO,eAAe,KAAKrB,IAAL,CAAUyB,CAAV,CAAf,GAA8B,IAA9B,GAAqC,KAAKxB,IAAL,CAAUyB,CAAV,CAArC,GAAoD,GAF3D,CAAhB;AAIA,QAAI4B,KAAK,GAAG,CAAC,MAAMlB,QAAP,IAAmB,KAAKpD,SAAxB,GAAoCgE,SAAhD;AACA,QAAIO,KAAK,GAAG,CAAC,MAAMpB,QAAP,IAAmB,KAAKlD,UAAxB,GAAqCgE,UAAjD;AACA,QAAIO,QAAQ,GAAG,IAAI,KAAnB;AAEAH,IAAAA,SAAS,CAAClC,MAAV,CAAiB,MAAjB,EACSE,IADT,CACc,IADd,EACoB+B,YADpB,EACkC/B,IADlC,CACuC,IADvC,EAC6C+B,YAD7C,EAES/B,IAFT,CAEc,OAFd,EAEuB5B,KAFvB,EAE8B4B,IAF9B,CAEmC,QAFnC,EAE6C3B,MAF7C,EAEqD2B,IAFrD,CAE0D,MAF1D,EAEkE6B,QAFlE;AAIAG,IAAAA,SAAS,CAAClC,MAAV,CAAiB,MAAjB,EAAyBE,IAAzB,CAA8B,MAA9B,EAAsC8B,SAAtC,EACa/B,KADb,CACmB,aADnB,EACkC,QADlC,EAEaA,KAFb,CAEmB,oBAFnB,EAEyC,SAFzC,EAGaC,IAHb,CAGkB,WAHlB,EAG+BmC,QAH/B,EAIanC,IAJb,CAIkB,IAJlB,EAIwBkC,KAJxB,EAKalC,IALb,CAKkB,IALlB,EAKwBiC,KALxB,EAMa1B,IANb,CAMkBA,IANlB;AAOH;;AAED5B,EAAAA,IAAI,CAACyB,CAAD,EAAI;AACJ,WAAOA,CAAC,GAAG,KAAKpC,MAAL,CAAYoE,IAAvB;AACH;;AAEDxD,EAAAA,IAAI,CAACyB,CAAD,EAAI;AACJ,WAAOA,CAAC,GAAG,KAAKrC,MAAL,CAAYqE,GAAvB;AACH;;AAEDxD,EAAAA,MAAM,GAAG;AACL,QAAIgB,GAAG,GAAGtC,EAAE,CAAC2B,MAAH,CAAU,MAAM,KAAKjB,EAArB,EAAyB6B,MAAzB,CAAgC,KAAhC,EACGE,IADH,CACQ,OADR,EACiB,KAAK5B,KAAL,GAAa,KAAKJ,MAAL,CAAYoE,IAAzB,GAAgC,KAAKpE,MAAL,CAAYsE,KAD7D,EAEGtC,IAFH,CAEQ,QAFR,EAEkB,KAAK3B,MAAL,GAAc,KAAKL,MAAL,CAAYqE,GAA1B,GAAgC,KAAKrE,MAAL,CAAYuE,MAF9D,CAAV;AAGA,WAAO1C,GAAP;AACH;;AAEDnB,EAAAA,mBAAmB,CAAC8D,SAAD,EAAYC,SAAZ,EAAuB;AACtC,QAAIjB,MAAM,GAAGkB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,SAAS,GAAGD,SAA7B,IAA0CA,SAArD,CAAb;AACA,QAAIK,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuB,MAApB,EAA4BvB,CAAC,EAA7B,EAAiC;AAC7B4C,MAAAA,QAAQ,CAAC5C,CAAD,CAAR,GAAcyC,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAA/C;AACH;;AACD,WAAOC,QAAP;AACH;;AAhPwC","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nexport class GridStructure extends Component {\n    constructor(props, gridWidth, gridHeight, rows, cols, padding, margin, id) {\n        super(props)\n\n        this.gridWidth = gridWidth;\n\n        this.gridHeight = gridHeight;\n        this.nRow = rows;\n        this.nCol = cols;\n        this.width = this.gridWidth * this.nCol;\n        this.height = this.gridHeight * this.nRow;\n        this.padding = padding;\n        this.margin = margin\n        this.id = id;\n        \n        this.drawLine = this.drawLine.bind(this);\n        this.visulizeBox = this.visulizeBox.bind(this);\n        this.drawBasicStructure = this.drawBasicStructure.bind(this);\n        this.generateRandomArray = this.generateRandomArray.bind(this);\n\n        this.getX = this.getX.bind(this);\n        this.getY = this.getY.bind(this);\n        this.getSVG = this.getSVG.bind(this);\n\n\n        this.drawVerticalGrid = this.drawVerticalGrid.bind(this);\n        this.drawHorizontalGrid = this.drawHorizontalGrid.bind(this);\n        this.drawSeparator = this.drawSeparator.bind(this);\n        this.drawIndicator = this.drawIndicator.bind(this);\n\n\n        this.select = this.select.bind(this)\n        this.deselect = this.deselect.bind(this);\n        this.sorted = this.sorted.bind(this);\n        this.move = this.move.bind(this);\n        this.shift = this.shift.bind(this);\n        this.warn = this.warn.bind(this)\n    }\n\n    drawLine(x1, y1, x2, y2, color = \"gray\") {\n        this.svg.append(\"line\").style(\"stroke\", color)\n                        .attr(\"x1\", this.getX(x1)).attr(\"y1\", this.getY(y1))\n                        .attr(\"x2\", this.getX(x2)).attr(\"y2\", this.getY(y2))\n    }\n\n    drawBasicStructure() {\n        this.drawLine(0, 0, this.width, 0)\n        this.drawLine(0, this.height, this.width, this.height)\n        this.drawLine(0, 0, 0, this.height)\n        this.drawLine(this.width, 0, this.width, this.height)\n    }\n\n    drawHorizontalGrid() {\n        for (let i = 1; i <= this.nRow - 1; i++) {\n            this.drawLine(0, i * this.height / this.nRow, this.width, i * this.height / this.nRow)\n        }\n    }\n\n    drawVerticalGrid() {\n        for (let i = 1; i <= this.nCol - 1; i++) {\n            this.drawLine(i * this.width / this.nCol, 0, i * this.width / this.nCol, this.height)\n        }\n    }\n\n    drawSeparator(row, col, id) {\n        let x = this.gridWidth * col;\n        let y = (row - 0.5) * this.gridHeight;\n\n        let sep = this.svg.append(\"g\").attr(\"id\", \"separator-\" + id)\n                    .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n        \n        sep.append(\"line\").attr(\"x1\", 0)\n                          .attr(\"y1\", 0)\n                          .attr(\"x2\", 0)\n                          .attr(\"y2\", 1.5 * this.gridHeight)\n                          .style(\"stroke\", \"gray\")\n        \n        sep.append(\"line\").attr(\"x1\", 0)\n                          .attr(\"y1\", 0.45 * this.gridHeight)\n                          .attr(\"x2\", 1.7 * this.gridHeight)\n                          .attr(\"y2\", 0.45 * this.gridHeight)\n                          .style(\"stroke\", \"gray\")\n\n\n        sep.append(\"text\").attr(\"fill\", \"gray\")\n                          //.style(\"text-anchor\", \"middle\")\n                          //.style(\"alignment-baseline\", \"central\")\n                          .attr(\"font-size\", \"0.9rem\")\n                          .attr(\"dy\", 0.4 * this.gridHeight)\n                          .attr(\"dx\", 0.05 * this.gridWidth)\n                          .text(\"Unsort\")\n\n        \n    }\n\n    drawIndicator(row, col, text = null, id) {\n        let padding = 0.05;\n\n        let topAdditional = 0.1\n\n        let x = (col + padding - 1) * this.gridWidth; \n        let y = (row + padding - 1 + topAdditional) * this.gridHeight;\n\n        let indicator = this.svg.append(\"g\").attr(\"id\", \"indicator-\" + id)\n                            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n        \n        indicator.append(\"line\").attr(\"x1\", 0)\n                            .attr(\"y1\", (0.5 - padding) * this.gridHeight)\n                            .attr(\"x2\", (0.5 - padding) * this.gridWidth)\n                            .attr(\"y2\", 0)\n                            .style(\"stroke\", \"gray\")\n        \n        indicator.append(\"line\").attr(\"x1\", (0.5 - padding) * this.gridWidth)\n                            .attr(\"y1\", 0)\n                            .attr(\"x2\", (1 - 2 * padding) * this.gridWidth)\n                            .attr(\"y2\", (0.5 - padding) * this.gridHeight)\n                            .style(\"stroke\", \"gray\")\n        \n        if (text) {\n            indicator.append(\"text\").attr(\"fill\", \"gray\")\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", \"0.7rem\")\n                    .attr(\"dy\", (0.5 - padding) * this.gridHeight)\n                    .attr(\"dx\", (0.5 - padding) * this.gridWidth)\n                    .text(text)\n        }\n\n    }\n\n    select(id, callback = null, duration) {\n        if (callback) {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\").on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"blue\")\n        }\n    }\n\n    deselect(id, callback = null, duration = 500) {\n        if (callback) {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"gray\").on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"gray\")\n        }\n    }\n\n    sorted(id, duration) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"green\")\n    }\n\n    warn(id, duration) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(duration).attr(\"fill\", \"red\")\n    }\n\n    move(id, row, col, yPadding = 0.05, xPadding = 0.05, callback = null, duration = 500) {\n        let newX = this.gridWidth * (+col - 1 + xPadding)\n        let newY = this.gridHeight * (+row - 1 + yPadding)\n\n        if (callback) {\n            d3.select(\"#\" + id).transition().duration(duration)\n                .attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\")\n                .on(\"end\", callback)\n        } else {\n            d3.select(\"#\" + id).transition().duration(duration)\n                .attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\")\n        }        \n    }\n\n    shift(shift, callback = null, duration = 500, direction) {\n        let shiftSplit = shift.split(/[ ]+/)\n        let elements = shiftSplit[1]\n        if (elements === \"null\") {\n            if (callback !== null) {\n                callback();\n            }\n        } else {\n            let elementsSplit = elements.split(\",\")\n            let firstPosition = shiftSplit[2].split(\"-\")\n            for (let i = 0; i < elementsSplit.length; i++) {\n                let elementID = elementsSplit[i]\n                let next = null;\n                if (i === elementsSplit.length - 1) {\n                    next = callback;\n                }\n                this.move(elementID, firstPosition[0], +firstPosition[1] + i + direction, \n                                0.05, 0.05, next, duration)\n            }\n        }\n    } \n\n    visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor = \"gray\", textColor = \"white\", \n                    borderRadius = 5, xPadding = 0.05, yPadding = 0.05) {\n        let width = (1 - 2 * xPadding) * this.gridWidth * widthGrid;\n        let height = (1 - 2 * yPadding) * this.gridHeight * heightGrid;\n        let x = (col - 1 + xPadding) * this.gridWidth;\n        let y = (row - 1 + yPadding) * this.gridHeight;\n\n        let rectGroup = this.svg.append(\"g\")\n            .attr(\"id\", id)\n            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n\n        let textX = (0.5 - xPadding) * this.gridWidth * widthGrid;\n        let textY = (0.5 - yPadding) * this.gridHeight * heightGrid; \n        let textSize = 1 + \"rem\";\n\n        rectGroup.append(\"rect\")\n                .attr(\"rx\", borderRadius).attr(\"ry\", borderRadius)\n                .attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor)\n        \n        rectGroup.append(\"text\").attr(\"fill\", textColor)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", textSize)\n                    .attr(\"dy\", textY)\n                    .attr(\"dx\", textX)\n                    .text(text)\n    }\n\n    getX(x) {\n        return(x + this.margin.left);\n    }\n\n    getY(y) {\n        return(y + this.margin.top)\n    }\n\n    getSVG() {\n        let svg = d3.select(\"#\" + this.id).append(\"svg\")\n                    .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                    .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n        return(svg)\n    }\n\n    generateRandomArray(minLength, maxLength) {\n        let length = Math.round(Math.random() * (maxLength - minLength) + minLength)\n        let newArray = []\n        for (let i = 0; i < length; i++) {\n            newArray[i] = Math.floor(Math.random() * 20) - 4;\n        }\n        return(newArray);\n    }\n}"]},"metadata":{},"sourceType":"module"}