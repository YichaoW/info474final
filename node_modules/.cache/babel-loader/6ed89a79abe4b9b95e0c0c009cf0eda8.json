{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/SortTwoArray.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nexport class SortTwoArray extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstArray: [1, 2, 4, 5],\n      secondArray: [2, 3, 4, 7, 8],\n      actions: [],\n      step: 0,\n      setNewArrays: false\n    };\n    this.row = {\n      \"first\": 1,\n      \"second\": 2,\n      \"compare\": 4,\n      \"result\": 6\n    };\n    this.getSteps = this.getSteps.bind(this);\n    this.svgInitialize = this.svgInitialize.bind(this);\n    this.getX = this.getX.bind(this);\n    this.getY = this.getY.bind(this);\n    this.appendTag = this.appendTag.bind(this);\n    this.visulizeBox = this.visulizeBox.bind(this);\n    this.select = this.select.bind(this);\n    this.deselect = this.deselect.bind(this);\n    this.visulizeStep = this.visulizeStep.bind(this);\n    this.moveTo = this.moveTo.bind(this);\n    this.compare = this.compare.bind(this);\n    this.generateRandomArray = this.generateRandomArray.bind(this);\n    this.visulizeArray = this.visulizeArray.bind(this);\n    this.clearArray = this.clearArray.bind(this);\n    this.svg = null;\n    this.gridWidth = 30;\n    this.nCol = 13;\n    this.width = this.nCol * this.gridWidth;\n    this.gridHeight = 30;\n    this.nRow = 6;\n    this.height = this.gridHeight * this.nRow;\n    this.margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    this.padding = 0.05;\n    this.arrayItem = null;\n  }\n\n  getX(x) {\n    return x + this.margin.left;\n  }\n\n  getY(y) {\n    return y + this.margin.top;\n  }\n\n  componentDidMount() {\n    let actions = this.getSteps(this.state.firstArray, this.state.secondArray);\n    this.setState({\n      actions: actions\n    });\n    this.svgInitialize();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.step !== prevState.step && !this.state.setNewArrays) {\n      this.visulizeStep();\n    }\n\n    if (this.state.setNewArrays) {\n      //this.setNewArrays();\n      this.clearArray(1);\n      this.clearArray(2);\n      this.visulizeArray(1);\n      this.visulizeArray(2);\n      this.setState({\n        setNewArrays: false\n      });\n    } //if ()\n\n  }\n\n  visulizeStep() {\n    if (this.state.step < this.state.actions.length) {\n      let action = this.state.actions[this.state.step];\n      let actionList = action.split(\" \");\n      let actionName = actionList[0];\n      let id = actionList[1];\n\n      if (actionName === \"Select\") {\n        this.select(id);\n      } else if (actionName === \"Move\") {\n        this.moveTo(id, actionList[2]);\n      } else if (actionName === \"Deselect\") {\n        this.deselect(id);\n      } else if (actionName === \"Compare\") {\n        this.compare(id, actionList[2]);\n      }\n\n      console.log(action);\n    }\n  }\n\n  svgInitialize() {\n    this.svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.width + this.margin.left + this.margin.right).attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n    this.arrayItem = d3.select(\"svg\").selectAll(\"g\").enter();\n\n    for (let i = 0; i <= this.nRow; i++) {\n      this.svg.append(\"line\").style(\"stroke\", \"gray\").attr(\"x1\", this.getX(0)).attr(\"y1\", this.getY(i * this.height / this.nRow)).attr(\"x2\", this.getX(this.width)).attr(\"y2\", this.getY(i * this.height / this.nRow));\n    }\n\n    for (let i = 3; i <= this.nCol; i++) {\n      this.svg.append(\"line\").style(\"stroke\", \"gray\").attr(\"x1\", this.getX(i * this.width / this.nCol)).attr(\"y1\", this.getY(0)).attr(\"x2\", this.getX(i * this.width / this.nCol)).attr(\"y2\", this.getY(this.height));\n    }\n\n    this.svg.append(\"line\").style(\"stroke\", \"gray\").attr(\"x1\", this.getX(0)).attr(\"y1\", this.getY(0)).attr(\"x2\", this.getX(0)).attr(\"y2\", this.getY(this.height));\n    this.appendTag(1, 2, \"First\");\n    this.appendTag(2, 3, \"Second\");\n    this.appendTag(4, 3.4, \"Compare\");\n    this.appendTag(6, 2.4, \"Result\");\n    this.visulizeArray(1);\n    this.visulizeArray(2);\n  }\n\n  clearArray(order) {\n    for (let i = 0; i < 5; i++) {\n      let id = \"ID\" + order + \"-\" + i;\n      d3.selectAll(\"#\" + id).remove();\n    }\n  }\n\n  visulizeArray(order) {\n    let target = null;\n\n    if (order === 1) {\n      target = this.state.firstArray;\n    } else if (order === 2) {\n      target = this.state.secondArray;\n    }\n\n    for (let i = 0; i < target.length; i++) {\n      let num = target[i];\n      this.visulizeBox(order, 3 + i + 1, 1, 1, num, \"ID\" + order + \"-\" + i, \"gray\", \"white\");\n    }\n  }\n\n  select(id) {\n    d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"blue\");\n  }\n\n  deselect(id) {\n    d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"gray\");\n  }\n\n  sorted(id) {\n    d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"green\");\n  }\n\n  moveTo(id, place) {\n    let placeList = place.split(\"-\");\n    let nRow = +this.row[placeList[0]];\n    let nCol = +placeList[1] + 3;\n    let newX = this.gridWidth * (nCol - 1 + this.padding);\n    let newY = this.gridHeight * (nRow - 1 + this.padding);\n    d3.select(\"#\" + id).transition().duration(500).attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\");\n\n    if (nRow === this.row[\"result\"]) {\n      this.sorted(id);\n    }\n  }\n\n  compare(id1, id2) {\n    d3.select(\"#\" + id1 + \" > rect\").transition().duration(500).attr(\"fill\", \"blue\");\n    d3.select(\"#\" + id2 + \" > rect\").transition().duration(500).attr(\"fill\", \"blue\");\n  }\n\n  appendTag(level, box, text) {\n    let heightPadding = 0.05;\n    let width = this.gridWidth * 0.8 * box;\n    let height = (1 - 2 * heightPadding) * this.gridHeight;\n    let x = 0.1 * this.gridWidth;\n    let y = (level - 1) * this.gridHeight + heightPadding * this.gridHeight;\n    let textX = x + 0.1 * this.gridWidth;\n    let textY = (level - 1) * this.gridHeight + 0.7 * this.gridHeight;\n    let textSize = this.gridWidth * 0.6;\n    this.svg.append(\"rect\").attr(\"x\", this.getX(x)).attr(\"y\", this.getY(y)).attr(\"rx\", 5).attr(\"ry\", 5).attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"steelblue\");\n    this.svg.append(\"text\").attr(\"x\", this.getX(textX)).attr(\"y\", this.getY(textY)).attr(\"fill\", \"white\").attr(\"font-size\", textSize + \"px\").text(text);\n  }\n\n  visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor, textColor) {\n    let padding = this.padding;\n    let width = (1 - 2 * padding) * this.gridWidth * widthGrid;\n    let height = (1 - 2 * padding) * this.gridHeight * heightGrid;\n    let x = (col - 1 + padding) * this.gridWidth;\n    let y = (row - 1 + padding) * this.gridHeight;\n    let rectGroup = this.svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\");\n    let textX = (0.5 - padding) * this.gridWidth;\n    let textY = (0.5 - padding) * this.gridHeight;\n    let textSize = 1 + \"rem\";\n    rectGroup.append(\"rect\").attr(\"rx\", 5).attr(\"ry\", 5).attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor);\n    rectGroup.append(\"text\").attr(\"fill\", textColor).style(\"text-anchor\", \"middle\").style(\"alignment-baseline\", \"central\").attr(\"font-size\", textSize).attr(\"dy\", textY).attr(\"dx\", textX).text(text);\n  }\n\n  generateRandomArray() {\n    let length = Math.floor(Math.random() * 2 + 3);\n    let newArray = [];\n\n    for (let i = 0; i < length; i++) {\n      newArray[i] = Math.floor(Math.random() * 20);\n    }\n\n    return newArray.sort((a, b) => {\n      return a - b;\n    });\n  }\n\n  getSteps(array1, array2) {\n    let result = [];\n    let newAction = [\"start\"];\n    let i = 0;\n    let j = 0;\n\n    while (i < array1.length && j < array2.length) {\n      let num1ID = \"ID\" + 1 + \"-\" + i;\n      let num1 = array1[i];\n      newAction.push(\"Select \" + num1ID);\n      newAction.push(\"Move \" + num1ID + \" compare-1\");\n      let num2ID = \"ID\" + 2 + \"-\" + j;\n      let num2 = array2[j];\n      newAction.push(\"Deselect \" + num1ID);\n      newAction.push(\"Select \" + num2ID);\n      newAction.push(\"Move \" + num2ID + \" compare-2\");\n      newAction.push(\"Deselect \" + num2ID);\n      newAction.push(\"Compare \" + num1ID + \" \" + num2ID);\n\n      if (num1 < num2) {\n        result.push(num1);\n        newAction.push(\"Deselect \" + num2ID);\n        newAction.push(\"Move \" + num1ID + \" result-\" + result.length);\n        i++;\n        newAction.push(\"Select \" + num2ID);\n        newAction.push(\"Move \" + num2ID + \" second-1\");\n        newAction.push(\"Deselect \" + num2ID);\n      } else {\n        result.push(num2);\n        newAction.push(\"Deselect \" + num1ID);\n        newAction.push(\"Move \" + num2ID + \" result-\" + result.length);\n        j++;\n        newAction.push(\"Select \" + num1ID);\n        newAction.push(\"Move \" + num1ID + \" first-1\");\n        newAction.push(\"Deselect \" + num1ID);\n      }\n    }\n\n    while (i < array1.length) {\n      result.push(array1[i]);\n      let num1ID = \"ID\" + 1 + \"-\" + i;\n      newAction.push(\"Select \" + num1ID);\n      newAction.push(\"Move \" + num1ID + \" result-\" + result.length);\n      i++;\n    }\n\n    while (j < array2.length) {\n      result.push(array2[j]);\n      let num2ID = \"ID\" + 2 + \"-\" + j;\n      newAction.push(\"Select \" + num2ID);\n      newAction.push(\"Move \" + num2ID + \" result-\" + result.length);\n      j++;\n    }\n\n    return newAction;\n  }\n\n  render() {\n    let display = \"Action: \";\n    let action = this.state.actions[this.state.step];\n\n    if (action) {\n      display += action;\n    } else {\n      display += \"Sort Finished\";\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, display), React.createElement(\"button\", {\n      onClick: () => {\n        this.setState({\n          step: this.state.step + 1\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      onClick: () => {\n        let array1 = this.generateRandomArray();\n        let array2 = this.generateRandomArray();\n        let newActions = this.getSteps(array1, array2);\n        this.setState({\n          setNewArrays: true,\n          firstArray: array1,\n          secondArray: array2,\n          actions: newActions,\n          step: 0\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"New Arrays\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/SortTwoArray.js"],"names":["React","Component","d3","SortTwoArray","constructor","props","state","firstArray","secondArray","actions","step","setNewArrays","row","getSteps","bind","svgInitialize","getX","getY","appendTag","visulizeBox","select","deselect","visulizeStep","moveTo","compare","generateRandomArray","visulizeArray","clearArray","svg","gridWidth","nCol","width","gridHeight","nRow","height","margin","top","right","bottom","left","padding","arrayItem","x","y","componentDidMount","setState","componentDidUpdate","prevProps","prevState","length","action","actionList","split","actionName","id","console","log","append","attr","selectAll","enter","i","style","order","remove","target","num","transition","duration","sorted","place","placeList","newX","newY","id1","id2","level","box","text","heightPadding","textX","textY","textSize","col","widthGrid","heightGrid","boxColor","textColor","rectGroup","Math","floor","random","newArray","sort","a","b","array1","array2","result","newAction","j","num1ID","num1","push","num2ID","num2","render","display","newActions"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAGA,OAAO,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AACxCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADH;AAETC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAFJ;AAGTC,MAAAA,OAAO,EAAE,EAHA;AAITC,MAAAA,IAAI,EAAE,CAJG;AAKTC,MAAAA,YAAY,EAAE;AALL,KAAb;AAQA,SAAKC,GAAL,GAAW;AACP,eAAS,CADF;AAEP,gBAAU,CAFH;AAGP,iBAAW,CAHJ;AAIP,gBAAU;AAJH,KAAX;AAOA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,IAAL,GAAY,KAAKA,IAAL,CAAUF,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUH,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKK,WAAL,GAAmB,KAAKA,WAAL,CAAiBL,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKM,MAAL,GAAc,KAAKA,MAAL,CAAYN,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKO,QAAL,GAAgB,KAAKA,QAAL,CAAcP,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKQ,YAAL,GAAoB,KAAKA,YAAL,CAAkBR,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKS,MAAL,GAAc,KAAKA,MAAL,CAAYT,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKU,OAAL,GAAe,KAAKA,OAAL,CAAaV,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKW,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBX,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKY,aAAL,GAAqB,KAAKA,aAAL,CAAmBZ,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKa,UAAL,GAAkB,KAAKA,UAAL,CAAgBb,IAAhB,CAAqB,IAArB,CAAlB;AAEA,SAAKc,GAAL,GAAW,IAAX;AAEA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,KAAKD,IAAL,GAAY,KAAKD,SAA9B;AAEA,SAAKG,UAAL,GAAkB,EAAlB;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,MAAL,GAAc,KAAKF,UAAL,GAAkB,KAAKC,IAArC;AAEA,SAAKE,MAAL,GAAc;AACVC,MAAAA,GAAG,EAAE,EADK;AACDC,MAAAA,KAAK,EAAE,EADN;AACUC,MAAAA,MAAM,EAAE,EADlB;AACsBC,MAAAA,IAAI,EAAE;AAD5B,KAAd;AAIA,SAAKC,OAAL,GAAe,IAAf;AAEA,SAAKC,SAAL,GAAiB,IAAjB;AACH;;AAEDzB,EAAAA,IAAI,CAAC0B,CAAD,EAAI;AACJ,WAAOA,CAAC,GAAG,KAAKP,MAAL,CAAYI,IAAvB;AACH;;AAEDtB,EAAAA,IAAI,CAAC0B,CAAD,EAAI;AACJ,WAAOA,CAAC,GAAG,KAAKR,MAAL,CAAYC,GAAvB;AACH;;AAEDQ,EAAAA,iBAAiB,GAAG;AAChB,QAAInC,OAAO,GAAG,KAAKI,QAAL,CAAc,KAAKP,KAAL,CAAWC,UAAzB,EAAqC,KAAKD,KAAL,CAAWE,WAAhD,CAAd;AAEA,SAAKqC,QAAL,CAAc;AACVpC,MAAAA,OAAO,EAAEA;AADC,KAAd;AAIA,SAAKM,aAAL;AACH;;AAED+B,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAI,KAAK1C,KAAL,CAAWI,IAAX,KAAoBsC,SAAS,CAACtC,IAA9B,IAAsC,CAAC,KAAKJ,KAAL,CAAWK,YAAtD,EAAoE;AAChE,WAAKW,YAAL;AACH;;AAED,QAAI,KAAKhB,KAAL,CAAWK,YAAf,EAA6B;AACzB;AACA,WAAKgB,UAAL,CAAgB,CAAhB;AACA,WAAKA,UAAL,CAAgB,CAAhB;AAEA,WAAKD,aAAL,CAAmB,CAAnB;AACA,WAAKA,aAAL,CAAmB,CAAnB;AAGA,WAAKmB,QAAL,CAAc;AACVlC,QAAAA,YAAY,EAAE;AADJ,OAAd;AAGH,KAjBoC,CAmBrC;;AACH;;AAEDW,EAAAA,YAAY,GAAG;AACX,QAAI,KAAKhB,KAAL,CAAWI,IAAX,GAAkB,KAAKJ,KAAL,CAAWG,OAAX,CAAmBwC,MAAzC,EAAiD;AAC7C,UAAIC,MAAM,GAAG,KAAK5C,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWI,IAA9B,CAAb;AACA,UAAIyC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAjB;AACA,UAAIC,UAAU,GAAGF,UAAU,CAAC,CAAD,CAA3B;AACA,UAAIG,EAAE,GAAGH,UAAU,CAAC,CAAD,CAAnB;;AACA,UAAIE,UAAU,KAAK,QAAnB,EAA6B;AACzB,aAAKjC,MAAL,CAAYkC,EAAZ;AACH,OAFD,MAEO,IAAID,UAAU,KAAK,MAAnB,EAA2B;AAC9B,aAAK9B,MAAL,CAAY+B,EAAZ,EAAgBH,UAAU,CAAC,CAAD,CAA1B;AACH,OAFM,MAEA,IAAIE,UAAU,KAAK,UAAnB,EAA+B;AAClC,aAAKhC,QAAL,CAAciC,EAAd;AACH,OAFM,MAEA,IAAID,UAAU,KAAK,SAAnB,EAA8B;AACjC,aAAK7B,OAAL,CAAa8B,EAAb,EAAiBH,UAAU,CAAC,CAAD,CAA3B;AACH;;AACDI,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACH;AACJ;;AAEDnC,EAAAA,aAAa,GAAG;AACZ,SAAKa,GAAL,GAAW1B,EAAE,CAACkB,MAAH,CAAU,MAAV,EAAkBqC,MAAlB,CAAyB,KAAzB,EACEC,IADF,CACO,OADP,EACgB,KAAK3B,KAAL,GAAa,KAAKI,MAAL,CAAYI,IAAzB,GAAgC,KAAKJ,MAAL,CAAYE,KAD5D,EAEEqB,IAFF,CAEO,QAFP,EAEiB,KAAKxB,MAAL,GAAc,KAAKC,MAAL,CAAYC,GAA1B,GAAgC,KAAKD,MAAL,CAAYG,MAF7D,CAAX;AAIA,SAAKG,SAAL,GAAiBvC,EAAE,CAACkB,MAAH,CAAU,KAAV,EAAiBuC,SAAjB,CAA2B,GAA3B,EAAgCC,KAAhC,EAAjB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK5B,IAA1B,EAAgC4B,CAAC,EAAjC,EAAqC;AACjC,WAAKjC,GAAL,CAAS6B,MAAT,CAAgB,MAAhB,EAAwBK,KAAxB,CAA8B,QAA9B,EAAwC,MAAxC,EACaJ,IADb,CACkB,IADlB,EACwB,KAAK1C,IAAL,CAAU,CAAV,CADxB,EACsC0C,IADtC,CAC2C,IAD3C,EACiD,KAAKzC,IAAL,CAAU4C,CAAC,GAAG,KAAK3B,MAAT,GAAkB,KAAKD,IAAjC,CADjD,EAEayB,IAFb,CAEkB,IAFlB,EAEwB,KAAK1C,IAAL,CAAU,KAAKe,KAAf,CAFxB,EAE+C2B,IAF/C,CAEoD,IAFpD,EAE0D,KAAKzC,IAAL,CAAU4C,CAAC,GAAG,KAAK3B,MAAT,GAAkB,KAAKD,IAAjC,CAF1D;AAGH;;AAED,SAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK/B,IAA1B,EAAgC+B,CAAC,EAAjC,EAAqC;AACjC,WAAKjC,GAAL,CAAS6B,MAAT,CAAgB,MAAhB,EAAwBK,KAAxB,CAA8B,QAA9B,EAAwC,MAAxC,EACaJ,IADb,CACkB,IADlB,EACwB,KAAK1C,IAAL,CAAU6C,CAAC,GAAG,KAAK9B,KAAT,GAAiB,KAAKD,IAAhC,CADxB,EAC+D4B,IAD/D,CACoE,IADpE,EAC0E,KAAKzC,IAAL,CAAU,CAAV,CAD1E,EAEayC,IAFb,CAEkB,IAFlB,EAEwB,KAAK1C,IAAL,CAAU6C,CAAC,GAAG,KAAK9B,KAAT,GAAiB,KAAKD,IAAhC,CAFxB,EAE+D4B,IAF/D,CAEoE,IAFpE,EAE0E,KAAKzC,IAAL,CAAU,KAAKiB,MAAf,CAF1E;AAGH;;AAED,SAAKN,GAAL,CAAS6B,MAAT,CAAgB,MAAhB,EAAwBK,KAAxB,CAA8B,QAA9B,EAAwC,MAAxC,EACiBJ,IADjB,CACsB,IADtB,EAC4B,KAAK1C,IAAL,CAAU,CAAV,CAD5B,EAC0C0C,IAD1C,CAC+C,IAD/C,EACqD,KAAKzC,IAAL,CAAU,CAAV,CADrD,EAEiByC,IAFjB,CAEsB,IAFtB,EAE4B,KAAK1C,IAAL,CAAU,CAAV,CAF5B,EAE0C0C,IAF1C,CAE+C,IAF/C,EAEqD,KAAKzC,IAAL,CAAU,KAAKiB,MAAf,CAFrD;AAIA,SAAKhB,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,OAArB;AAEA,SAAKA,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB;AAEA,SAAKA,SAAL,CAAe,CAAf,EAAkB,GAAlB,EAAuB,SAAvB;AACA,SAAKA,SAAL,CAAe,CAAf,EAAkB,GAAlB,EAAuB,QAAvB;AAEA,SAAKQ,aAAL,CAAmB,CAAnB;AACA,SAAKA,aAAL,CAAmB,CAAnB;AACH;;AAEDC,EAAAA,UAAU,CAACoC,KAAD,EAAQ;AACd,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAIP,EAAE,GAAG,OAAOS,KAAP,GAAe,GAAf,GAAqBF,CAA9B;AACA3D,MAAAA,EAAE,CAACyD,SAAH,CAAa,MAAML,EAAnB,EAAuBU,MAAvB;AACH;AACJ;;AAEDtC,EAAAA,aAAa,CAACqC,KAAD,EAAQ;AACjB,QAAIE,MAAM,GAAG,IAAb;;AACA,QAAIF,KAAK,KAAK,CAAd,EAAiB;AACbE,MAAAA,MAAM,GAAG,KAAK3D,KAAL,CAAWC,UAApB;AACH,KAFD,MAEO,IAAIwD,KAAK,KAAK,CAAd,EAAiB;AACpBE,MAAAA,MAAM,GAAG,KAAK3D,KAAL,CAAWE,WAApB;AACH;;AACD,SAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,MAAM,CAAChB,MAA3B,EAAmCY,CAAC,EAApC,EAAwC;AACpC,UAAIK,GAAG,GAAGD,MAAM,CAACJ,CAAD,CAAhB;AACA,WAAK1C,WAAL,CAAiB4C,KAAjB,EAAyB,IAAIF,CAAJ,GAAQ,CAAjC,EAAqC,CAArC,EAAwC,CAAxC,EAA2CK,GAA3C,EAAgD,OAAOH,KAAP,GAAe,GAAf,GAAqBF,CAArE,EAAwE,MAAxE,EAAgF,OAAhF;AACH;AACJ;;AAGDzC,EAAAA,MAAM,CAACkC,EAAD,EAAK;AACPpD,IAAAA,EAAE,CAACkB,MAAH,CAAU,MAAMkC,EAAN,GAAW,SAArB,EAAgCa,UAAhC,GAA6CC,QAA7C,CAAsD,GAAtD,EAA2DV,IAA3D,CAAgE,MAAhE,EAAwE,MAAxE;AACH;;AAEDrC,EAAAA,QAAQ,CAACiC,EAAD,EAAK;AACTpD,IAAAA,EAAE,CAACkB,MAAH,CAAU,MAAMkC,EAAN,GAAW,SAArB,EAAgCa,UAAhC,GAA6CC,QAA7C,CAAsD,GAAtD,EAA2DV,IAA3D,CAAgE,MAAhE,EAAwE,MAAxE;AACH;;AAEDW,EAAAA,MAAM,CAACf,EAAD,EAAK;AACPpD,IAAAA,EAAE,CAACkB,MAAH,CAAU,MAAMkC,EAAN,GAAW,SAArB,EAAgCa,UAAhC,GAA6CC,QAA7C,CAAsD,GAAtD,EAA2DV,IAA3D,CAAgE,MAAhE,EAAwE,OAAxE;AACH;;AAEDnC,EAAAA,MAAM,CAAC+B,EAAD,EAAKgB,KAAL,EAAY;AACd,QAAIC,SAAS,GAAGD,KAAK,CAAClB,KAAN,CAAY,GAAZ,CAAhB;AACA,QAAInB,IAAI,GAAG,CAAC,KAAKrB,GAAL,CAAS2D,SAAS,CAAC,CAAD,CAAlB,CAAZ;AACA,QAAIzC,IAAI,GAAG,CAACyC,SAAS,CAAC,CAAD,CAAV,GAAgB,CAA3B;AAEA,QAAIC,IAAI,GAAG,KAAK3C,SAAL,IAAkBC,IAAI,GAAG,CAAP,GAAW,KAAKU,OAAlC,CAAX;AACA,QAAIiC,IAAI,GAAG,KAAKzC,UAAL,IAAmBC,IAAI,GAAG,CAAP,GAAW,KAAKO,OAAnC,CAAX;AAEAtC,IAAAA,EAAE,CAACkB,MAAH,CAAU,MAAMkC,EAAhB,EAAoBa,UAApB,GAAiCC,QAAjC,CAA0C,GAA1C,EACKV,IADL,CACU,WADV,EACuB,eAAe,KAAK1C,IAAL,CAAUwD,IAAV,CAAf,GAAiC,IAAjC,GAAwC,KAAKvD,IAAL,CAAUwD,IAAV,CAAxC,GAA0D,GADjF;;AAGA,QAAIxC,IAAI,KAAK,KAAKrB,GAAL,CAAS,QAAT,CAAb,EAAiC;AAC7B,WAAKyD,MAAL,CAAYf,EAAZ;AACH;AACJ;;AAED9B,EAAAA,OAAO,CAACkD,GAAD,EAAMC,GAAN,EAAW;AACdzE,IAAAA,EAAE,CAACkB,MAAH,CAAU,MAAMsD,GAAN,GAAY,SAAtB,EAAiCP,UAAjC,GAA8CC,QAA9C,CAAuD,GAAvD,EAA4DV,IAA5D,CAAiE,MAAjE,EAAyE,MAAzE;AACAxD,IAAAA,EAAE,CAACkB,MAAH,CAAU,MAAMuD,GAAN,GAAY,SAAtB,EAAiCR,UAAjC,GAA8CC,QAA9C,CAAuD,GAAvD,EAA4DV,IAA5D,CAAiE,MAAjE,EAAyE,MAAzE;AACH;;AAGDxC,EAAAA,SAAS,CAAC0D,KAAD,EAAQC,GAAR,EAAaC,IAAb,EAAmB;AACxB,QAAIC,aAAa,GAAG,IAApB;AAEA,QAAIhD,KAAK,GAAG,KAAKF,SAAL,GAAiB,GAAjB,GAAuBgD,GAAnC;AACA,QAAI3C,MAAM,GAAG,CAAC,IAAI,IAAI6C,aAAT,IAA0B,KAAK/C,UAA5C;AAEA,QAAIU,CAAC,GAAG,MAAM,KAAKb,SAAnB;AACA,QAAIc,CAAC,GAAG,CAACiC,KAAK,GAAG,CAAT,IAAc,KAAK5C,UAAnB,GAAgC+C,aAAa,GAAG,KAAK/C,UAA7D;AAEA,QAAIgD,KAAK,GAAGtC,CAAC,GAAG,MAAM,KAAKb,SAA3B;AACA,QAAIoD,KAAK,GAAG,CAACL,KAAK,GAAG,CAAT,IAAc,KAAK5C,UAAnB,GAAgC,MAAM,KAAKA,UAAvD;AACA,QAAIkD,QAAQ,GAAG,KAAKrD,SAAL,GAAiB,GAAhC;AAEA,SAAKD,GAAL,CAAS6B,MAAT,CAAgB,MAAhB,EACSC,IADT,CACc,GADd,EACmB,KAAK1C,IAAL,CAAU0B,CAAV,CADnB,EACiCgB,IADjC,CACsC,GADtC,EAC2C,KAAKzC,IAAL,CAAU0B,CAAV,CAD3C,EAESe,IAFT,CAEc,IAFd,EAEoB,CAFpB,EAEuBA,IAFvB,CAE4B,IAF5B,EAEkC,CAFlC,EAGSA,IAHT,CAGc,OAHd,EAGuB3B,KAHvB,EAG8B2B,IAH9B,CAGmC,QAHnC,EAG6CxB,MAH7C,EAGqDwB,IAHrD,CAG0D,MAH1D,EAGkE,WAHlE;AAIA,SAAK9B,GAAL,CAAS6B,MAAT,CAAgB,MAAhB,EACSC,IADT,CACc,GADd,EACmB,KAAK1C,IAAL,CAAUgE,KAAV,CADnB,EAEStB,IAFT,CAEc,GAFd,EAEmB,KAAKzC,IAAL,CAAUgE,KAAV,CAFnB,EAGSvB,IAHT,CAGc,MAHd,EAGsB,OAHtB,EAISA,IAJT,CAIc,WAJd,EAI2BwB,QAAQ,GAAG,IAJtC,EAKSJ,IALT,CAKcA,IALd;AAMH;;AAED3D,EAAAA,WAAW,CAACP,GAAD,EAAMuE,GAAN,EAAWC,SAAX,EAAsBC,UAAtB,EAAkCP,IAAlC,EAAwCxB,EAAxC,EAA4CgC,QAA5C,EAAsDC,SAAtD,EAAiE;AACxE,QAAI/C,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIT,KAAK,GAAG,CAAC,IAAI,IAAIS,OAAT,IAAoB,KAAKX,SAAzB,GAAqCuD,SAAjD;AACA,QAAIlD,MAAM,GAAG,CAAC,IAAI,IAAIM,OAAT,IAAoB,KAAKR,UAAzB,GAAsCqD,UAAnD;AACA,QAAI3C,CAAC,GAAG,CAACyC,GAAG,GAAG,CAAN,GAAU3C,OAAX,IAAsB,KAAKX,SAAnC;AACA,QAAIc,CAAC,GAAG,CAAC/B,GAAG,GAAG,CAAN,GAAU4B,OAAX,IAAsB,KAAKR,UAAnC;AAEA,QAAIwD,SAAS,GAAG,KAAK5D,GAAL,CAAS6B,MAAT,CAAgB,GAAhB,EACXC,IADW,CACN,IADM,EACAJ,EADA,EAEXI,IAFW,CAEN,WAFM,EAEO,eAAe,KAAK1C,IAAL,CAAU0B,CAAV,CAAf,GAA8B,IAA9B,GAAqC,KAAKzB,IAAL,CAAU0B,CAAV,CAArC,GAAoD,GAF3D,CAAhB;AAIA,QAAIqC,KAAK,GAAG,CAAC,MAAMxC,OAAP,IAAkB,KAAKX,SAAnC;AACA,QAAIoD,KAAK,GAAG,CAAC,MAAMzC,OAAP,IAAkB,KAAKR,UAAnC;AACA,QAAIkD,QAAQ,GAAG,IAAI,KAAnB;AAEAM,IAAAA,SAAS,CAAC/B,MAAV,CAAiB,MAAjB,EACSC,IADT,CACc,IADd,EACoB,CADpB,EACuBA,IADvB,CAC4B,IAD5B,EACkC,CADlC,EAESA,IAFT,CAEc,OAFd,EAEuB3B,KAFvB,EAE8B2B,IAF9B,CAEmC,QAFnC,EAE6CxB,MAF7C,EAEqDwB,IAFrD,CAE0D,MAF1D,EAEkE4B,QAFlE;AAIAE,IAAAA,SAAS,CAAC/B,MAAV,CAAiB,MAAjB,EAAyBC,IAAzB,CAA8B,MAA9B,EAAsC6B,SAAtC,EACazB,KADb,CACmB,aADnB,EACkC,QADlC,EAEaA,KAFb,CAEmB,oBAFnB,EAEyC,SAFzC,EAGaJ,IAHb,CAGkB,WAHlB,EAG+BwB,QAH/B,EAIaxB,IAJb,CAIkB,IAJlB,EAIwBuB,KAJxB,EAKavB,IALb,CAKkB,IALlB,EAKwBsB,KALxB,EAMaF,IANb,CAMkBA,IANlB;AAOH;;AAEDrD,EAAAA,mBAAmB,GAAG;AAClB,QAAIwB,MAAM,GAAGwC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoB,CAA/B,CAAb;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAApB,EAA4BY,CAAC,EAA7B,EAAiC;AAC7B+B,MAAAA,QAAQ,CAAC/B,CAAD,CAAR,GAAc4B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAd;AACH;;AACD,WAAOC,QAAQ,CAACC,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAC,aAAOD,CAAC,GAAGC,CAAX;AAAa,KAAtC,CAAP;AACH;;AAGDlF,EAAAA,QAAQ,CAACmF,MAAD,EAASC,MAAT,EAAiB;AACrB,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG,CAAC,OAAD,CAAhB;AAEA,QAAItC,CAAC,GAAG,CAAR;AACA,QAAIuC,CAAC,GAAG,CAAR;;AAGA,WAAMvC,CAAC,GAAGmC,MAAM,CAAC/C,MAAX,IAAqBmD,CAAC,GAAGH,MAAM,CAAChD,MAAtC,EAA8C;AAE1C,UAAIoD,MAAM,GAAG,OAAO,CAAP,GAAW,GAAX,GAAiBxC,CAA9B;AACA,UAAIyC,IAAI,GAAGN,MAAM,CAACnC,CAAD,CAAjB;AAEAsC,MAAAA,SAAS,CAACI,IAAV,CAAe,YAAYF,MAA3B;AACAF,MAAAA,SAAS,CAACI,IAAV,CAAe,UAAUF,MAAV,GAAmB,YAAlC;AAEA,UAAIG,MAAM,GAAG,OAAO,CAAP,GAAW,GAAX,GAAiBJ,CAA9B;AACA,UAAIK,IAAI,GAAGR,MAAM,CAACG,CAAD,CAAjB;AACAD,MAAAA,SAAS,CAACI,IAAV,CAAe,cAAcF,MAA7B;AACAF,MAAAA,SAAS,CAACI,IAAV,CAAe,YAAYC,MAA3B;AACAL,MAAAA,SAAS,CAACI,IAAV,CAAe,UAAUC,MAAV,GAAmB,YAAlC;AACAL,MAAAA,SAAS,CAACI,IAAV,CAAe,cAAcC,MAA7B;AAEAL,MAAAA,SAAS,CAACI,IAAV,CAAe,aAAaF,MAAb,GAAsB,GAAtB,GAA4BG,MAA3C;;AAGA,UAAIF,IAAI,GAAGG,IAAX,EAAiB;AACbP,QAAAA,MAAM,CAACK,IAAP,CAAYD,IAAZ;AACAH,QAAAA,SAAS,CAACI,IAAV,CAAe,cAAcC,MAA7B;AACAL,QAAAA,SAAS,CAACI,IAAV,CAAe,UAAUF,MAAV,GAAmB,UAAnB,GAAiCH,MAAM,CAACjD,MAAvD;AACAY,QAAAA,CAAC;AACDsC,QAAAA,SAAS,CAACI,IAAV,CAAe,YAAYC,MAA3B;AACAL,QAAAA,SAAS,CAACI,IAAV,CAAe,UAAUC,MAAV,GAAmB,WAAlC;AACAL,QAAAA,SAAS,CAACI,IAAV,CAAe,cAAcC,MAA7B;AACH,OARD,MAQO;AACHN,QAAAA,MAAM,CAACK,IAAP,CAAYE,IAAZ;AACAN,QAAAA,SAAS,CAACI,IAAV,CAAe,cAAcF,MAA7B;AACAF,QAAAA,SAAS,CAACI,IAAV,CAAe,UAAUC,MAAV,GAAmB,UAAnB,GAAgCN,MAAM,CAACjD,MAAtD;AACAmD,QAAAA,CAAC;AACDD,QAAAA,SAAS,CAACI,IAAV,CAAe,YAAYF,MAA3B;AACAF,QAAAA,SAAS,CAACI,IAAV,CAAe,UAAUF,MAAV,GAAmB,UAAlC;AACAF,QAAAA,SAAS,CAACI,IAAV,CAAe,cAAcF,MAA7B;AACH;AACJ;;AAED,WAAMxC,CAAC,GAAGmC,MAAM,CAAC/C,MAAjB,EAAyB;AACrBiD,MAAAA,MAAM,CAACK,IAAP,CAAYP,MAAM,CAACnC,CAAD,CAAlB;AACA,UAAIwC,MAAM,GAAG,OAAO,CAAP,GAAW,GAAX,GAAiBxC,CAA9B;AACAsC,MAAAA,SAAS,CAACI,IAAV,CAAe,YAAYF,MAA3B;AACAF,MAAAA,SAAS,CAACI,IAAV,CAAe,UAAUF,MAAV,GAAmB,UAAnB,GAAgCH,MAAM,CAACjD,MAAtD;AACAY,MAAAA,CAAC;AACJ;;AAED,WAAMuC,CAAC,GAAGH,MAAM,CAAChD,MAAjB,EAAyB;AACrBiD,MAAAA,MAAM,CAACK,IAAP,CAAYN,MAAM,CAACG,CAAD,CAAlB;AACA,UAAII,MAAM,GAAG,OAAO,CAAP,GAAW,GAAX,GAAiBJ,CAA9B;AACAD,MAAAA,SAAS,CAACI,IAAV,CAAe,YAAYC,MAA3B;AACAL,MAAAA,SAAS,CAACI,IAAV,CAAe,UAAUC,MAAV,GAAkB,UAAlB,GAA+BN,MAAM,CAACjD,MAArD;AACAmD,MAAAA,CAAC;AACJ;;AAED,WAAOD,SAAP;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,QAAIC,OAAO,GAAG,UAAd;AACA,QAAIzD,MAAM,GAAG,KAAK5C,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWI,IAA9B,CAAb;;AACA,QAAIwC,MAAJ,EAAY;AACRyD,MAAAA,OAAO,IAAIzD,MAAX;AACH,KAFD,MAEO;AACHyD,MAAAA,OAAO,IAAI,eAAX;AACH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,OAAN,CADJ,EAEI;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnB,aAAK9D,QAAL,CAAc;AACVnC,UAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IAAX,GAAkB;AADd,SAAd;AAGH,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAQI;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnB,YAAIsF,MAAM,GAAG,KAAKvE,mBAAL,EAAb;AACA,YAAIwE,MAAM,GAAG,KAAKxE,mBAAL,EAAb;AACA,YAAImF,UAAU,GAAG,KAAK/F,QAAL,CAAcmF,MAAd,EAAsBC,MAAtB,CAAjB;AACA,aAAKpD,QAAL,CAAc;AACVlC,UAAAA,YAAY,EAAE,IADJ;AAEVJ,UAAAA,UAAU,EAAEyF,MAFF;AAGVxF,UAAAA,WAAW,EAAEyF,MAHH;AAIVxF,UAAAA,OAAO,EAAEmG,UAJC;AAKVlG,UAAAA,IAAI,EAAC;AALK,SAAd;AAOH,OAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ,CADJ;AAuBH;;AAvWuC","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\n\nexport class SortTwoArray extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            firstArray: [1, 2, 4, 5],\n            secondArray: [2, 3, 4, 7, 8],\n            actions: [],\n            step: 0,\n            setNewArrays: false\n        }\n\n        this.row = {\n            \"first\": 1,\n            \"second\": 2,\n            \"compare\": 4,\n            \"result\": 6\n        }\n\n        this.getSteps = this.getSteps.bind(this);\n        this.svgInitialize = this.svgInitialize.bind(this);\n        this.getX = this.getX.bind(this);\n        this.getY = this.getY.bind(this);\n        this.appendTag = this.appendTag.bind(this);\n        this.visulizeBox = this.visulizeBox.bind(this);\n        this.select = this.select.bind(this);\n        this.deselect = this.deselect.bind(this);\n        this.visulizeStep = this.visulizeStep.bind(this);\n        this.moveTo = this.moveTo.bind(this);\n        this.compare = this.compare.bind(this);\n        this.generateRandomArray = this.generateRandomArray.bind(this);\n        this.visulizeArray = this.visulizeArray.bind(this);\n        this.clearArray = this.clearArray.bind(this);\n\n        this.svg = null;\n\n        this.gridWidth = 30;\n        this.nCol = 13;\n        this.width = this.nCol * this.gridWidth;\n\n        this.gridHeight = 30;\n        this.nRow = 6;\n        this.height = this.gridHeight * this.nRow;\n\n        this.margin = {\n            top: 20, right: 20, bottom: 20, left: 20\n        }\n\n        this.padding = 0.05;\n\n        this.arrayItem = null;\n    }\n\n    getX(x) {\n        return(x + this.margin.left);\n    }\n\n    getY(y) {\n        return(y + this.margin.top)\n    }\n\n    componentDidMount() {\n        let actions = this.getSteps(this.state.firstArray, this.state.secondArray);\n\n        this.setState({\n            actions: actions\n        })\n\n        this.svgInitialize();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.step !== prevState.step && !this.state.setNewArrays) {\n            this.visulizeStep();\n        } \n        \n        if (this.state.setNewArrays) {\n            //this.setNewArrays();\n            this.clearArray(1)\n            this.clearArray(2)\n\n            this.visulizeArray(1)\n            this.visulizeArray(2)\n        \n        \n            this.setState({\n                setNewArrays: false\n            })\n        }\n        \n        //if ()\n    }\n\n    visulizeStep() {\n        if (this.state.step < this.state.actions.length) {\n            let action = this.state.actions[this.state.step]\n            let actionList = action.split(\" \")\n            let actionName = actionList[0]\n            let id = actionList[1];\n            if (actionName === \"Select\") {\n                this.select(id)\n            } else if (actionName === \"Move\") {\n                this.moveTo(id, actionList[2])\n            } else if (actionName === \"Deselect\") {\n                this.deselect(id)\n            } else if (actionName === \"Compare\") {\n                this.compare(id, actionList[2])\n            } \n            console.log(action)\n        }\n    }\n\n    svgInitialize() {\n        this.svg = d3.select(\"body\").append(\"svg\")\n                    .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                    .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n        \n        this.arrayItem = d3.select(\"svg\").selectAll(\"g\").enter();\n\n        for (let i = 0; i <= this.nRow; i++) {\n            this.svg.append(\"line\").style(\"stroke\", \"gray\")\n                        .attr(\"x1\", this.getX(0)).attr(\"y1\", this.getY(i * this.height / this.nRow))\n                        .attr(\"x2\", this.getX(this.width)).attr(\"y2\", this.getY(i * this.height / this.nRow))\n        }\n\n        for (let i = 3; i <= this.nCol; i++) {\n            this.svg.append(\"line\").style(\"stroke\", \"gray\")\n                        .attr(\"x1\", this.getX(i * this.width / this.nCol)).attr(\"y1\", this.getY(0))\n                        .attr(\"x2\", this.getX(i * this.width / this.nCol)).attr(\"y2\", this.getY(this.height))\n        }\n\n        this.svg.append(\"line\").style(\"stroke\", \"gray\")\n                        .attr(\"x1\", this.getX(0)).attr(\"y1\", this.getY(0))\n                        .attr(\"x2\", this.getX(0)).attr(\"y2\", this.getY(this.height))\n        \n        this.appendTag(1, 2, \"First\")\n\n        this.appendTag(2, 3, \"Second\")\n\n        this.appendTag(4, 3.4, \"Compare\")\n        this.appendTag(6, 2.4, \"Result\")\n\n        this.visulizeArray(1);\n        this.visulizeArray(2);\n    }\n\n    clearArray(order) {\n        for (let i = 0; i < 5; i++) {\n            let id = \"ID\" + order + \"-\" + i;\n            d3.selectAll(\"#\" + id).remove();\n        }\n    }\n\n    visulizeArray(order) {\n        let target = null;\n        if (order === 1) {\n            target = this.state.firstArray;\n        } else if (order === 2) {\n            target = this.state.secondArray;\n        }\n        for (let i = 0; i < target.length; i++) {\n            let num = target[i];\n            this.visulizeBox(order, (3 + i + 1), 1, 1, num, \"ID\" + order + \"-\" + i, \"gray\", \"white\");\n        }\n    }\n\n\n    select(id) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"blue\")\n    }\n\n    deselect(id) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"gray\")\n    }\n\n    sorted(id) {\n        d3.select(\"#\" + id + \" > rect\").transition().duration(500).attr(\"fill\", \"green\")\n    }\n\n    moveTo(id, place) {\n        let placeList = place.split(\"-\")\n        let nRow = +this.row[placeList[0]]\n        let nCol = +placeList[1] + 3\n\n        let newX = this.gridWidth * (nCol - 1 + this.padding)\n        let newY = this.gridHeight * (nRow - 1 + this.padding)\n\n        d3.select(\"#\" + id).transition().duration(500)\n            .attr(\"transform\", \"translate(\" + this.getX(newX) + \", \" + this.getY(newY) + \")\")\n        \n        if (nRow === this.row[\"result\"]) {\n            this.sorted(id);\n        }\n    }\n\n    compare(id1, id2) {\n        d3.select(\"#\" + id1 + \" > rect\").transition().duration(500).attr(\"fill\", \"blue\")\n        d3.select(\"#\" + id2 + \" > rect\").transition().duration(500).attr(\"fill\", \"blue\")\n    }\n\n\n    appendTag(level, box, text) {\n        let heightPadding = 0.05;        \n\n        let width = this.gridWidth * 0.8 * box;\n        let height = (1 - 2 * heightPadding) * this.gridHeight;\n\n        let x = 0.1 * this.gridWidth;\n        let y = (level - 1) * this.gridHeight + heightPadding * this.gridHeight;\n\n        let textX = x + 0.1 * this.gridWidth;\n        let textY = (level - 1) * this.gridHeight + 0.7 * this.gridHeight;\n        let textSize = this.gridWidth * 0.6;\n\n        this.svg.append(\"rect\")\n                .attr(\"x\", this.getX(x)).attr(\"y\", this.getY(y))\n                .attr(\"rx\", 5).attr(\"ry\", 5)\n                .attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"steelblue\")\n        this.svg.append(\"text\")\n                .attr(\"x\", this.getX(textX))\n                .attr(\"y\", this.getY(textY))\n                .attr(\"fill\", \"white\")\n                .attr(\"font-size\", textSize + \"px\")\n                .text(text);\n    }\n\n    visulizeBox(row, col, widthGrid, heightGrid, text, id, boxColor, textColor) {\n        let padding = this.padding;\n        let width = (1 - 2 * padding) * this.gridWidth * widthGrid;\n        let height = (1 - 2 * padding) * this.gridHeight * heightGrid;\n        let x = (col - 1 + padding) * this.gridWidth;\n        let y = (row - 1 + padding) * this.gridHeight;\n\n        let rectGroup = this.svg.append(\"g\")\n            .attr(\"id\", id)\n            .attr(\"transform\", \"translate(\" + this.getX(x) + \", \" + this.getY(y) + \")\")\n\n        let textX = (0.5 - padding) * this.gridWidth;\n        let textY = (0.5 - padding) * this.gridHeight \n        let textSize = 1 + \"rem\";\n\n        rectGroup.append(\"rect\")\n                .attr(\"rx\", 5).attr(\"ry\", 5)\n                .attr(\"width\", width).attr(\"height\", height).attr(\"fill\", boxColor)\n        \n        rectGroup.append(\"text\").attr(\"fill\", textColor)\n                    .style(\"text-anchor\", \"middle\")\n                    .style(\"alignment-baseline\", \"central\")\n                    .attr(\"font-size\", textSize)\n                    .attr(\"dy\", textY)\n                    .attr(\"dx\", textX)\n                    .text(text)\n    }\n\n    generateRandomArray() {\n        let length = Math.floor(Math.random() * 2 + 3)\n        let newArray = []\n        for (let i = 0; i < length; i++) {\n            newArray[i] = Math.floor(Math.random() * 20)\n        }\n        return(newArray.sort((a, b) => {return a - b}));\n    }\n\n\n    getSteps(array1, array2) {\n        let result = [];\n        let newAction = [\"start\"]\n\n        let i = 0;\n        let j = 0;\n\n\n        while(i < array1.length && j < array2.length) {\n\n            let num1ID = \"ID\" + 1 + \"-\" + i;\n            let num1 = array1[i];\n\n            newAction.push(\"Select \" + num1ID)\n            newAction.push(\"Move \" + num1ID + \" compare-1\")\n\n            let num2ID = \"ID\" + 2 + \"-\" + j;\n            let num2 = array2[j];\n            newAction.push(\"Deselect \" + num1ID)\n            newAction.push(\"Select \" + num2ID)\n            newAction.push(\"Move \" + num2ID + \" compare-2\")\n            newAction.push(\"Deselect \" + num2ID)\n\n            newAction.push(\"Compare \" + num1ID + \" \" + num2ID)\n\n\n            if (num1 < num2) {\n                result.push(num1);\n                newAction.push(\"Deselect \" + num2ID)\n                newAction.push(\"Move \" + num1ID + \" result-\" + (result.length))\n                i++;\n                newAction.push(\"Select \" + num2ID)\n                newAction.push(\"Move \" + num2ID + \" second-1\")\n                newAction.push(\"Deselect \" + num2ID)\n            } else {\n                result.push(num2);\n                newAction.push(\"Deselect \" + num1ID)\n                newAction.push(\"Move \" + num2ID + \" result-\" + result.length)\n                j++;\n                newAction.push(\"Select \" + num1ID)\n                newAction.push(\"Move \" + num1ID + \" first-1\")\n                newAction.push(\"Deselect \" + num1ID)\n            }\n        }\n\n        while(i < array1.length) {\n            result.push(array1[i])\n            let num1ID = \"ID\" + 1 + \"-\" + i;\n            newAction.push(\"Select \" + num1ID)\n            newAction.push(\"Move \" + num1ID + \" result-\" + result.length)\n            i++;\n        }\n\n        while(j < array2.length) {\n            result.push(array2[j])\n            let num2ID = \"ID\" + 2 + \"-\" + j;\n            newAction.push(\"Select \" + num2ID)\n            newAction.push(\"Move \" + num2ID +\" result-\" + result.length)\n            j++;\n        }\n\n        return(newAction)\n    }\n\n    render() {\n        let display = \"Action: \";\n        let action = this.state.actions[this.state.step]\n        if (action) {\n            display += action\n        } else {\n            display += \"Sort Finished\"\n        }\n        return(\n            <div>\n                <div>{display}</div>\n                <button onClick={() => {\n                    this.setState({\n                        step: this.state.step + 1\n                    })\n                }} >Next</button>\n\n                <button onClick={() => {\n                    let array1 = this.generateRandomArray()\n                    let array2 = this.generateRandomArray()\n                    let newActions = this.getSteps(array1, array2)\n                    this.setState({\n                        setNewArrays: true,\n                        firstArray: array1,\n                        secondArray: array2,\n                        actions: newActions,\n                        step:0\n                    })\n                }} >New Arrays</button>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}