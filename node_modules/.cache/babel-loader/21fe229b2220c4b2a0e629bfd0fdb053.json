{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class Insertion extends GridStructure {\n  constructor(props) {\n    super(props, 30, 30, 3.5, 10, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"insertion\");\n    this.svg = null;\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.visFirst = this.visFirst.bind(this);\n    this.separatorInitial = {\n      row: 1,\n      col: 1\n    };\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    let initArray = [3, 2, 6, 2, 9, 8];\n    let actions = this.getAction(initArray);\n    this.state = {\n      array: initArray,\n      actions: actions,\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.initViz();\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col);\n    this.setState({\n      actions: this.getAction(this.state.array)\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.step < this.state.step) {\n      let instruction = this.state.actions[this.state.step];\n\n      if (instruction.desc === \"Move First Item into Sorted Array\") {\n        this.visFirst(instruction.how);\n      }\n    }\n  }\n\n  visFirst(how) {\n    let sepMove = how[0].split(\" \");\n    let sepTo = sepMove[3].split(\"-\");\n    this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n      let sortAct = how[1].split(\" \");\n      console.log(sortAct);\n      this.sorted(sortAct[1], this.state.speed);\n    }, this.state.speed);\n  }\n\n  clearViz() {\n    this.svg.selectAll(\"g\").remove();\n  }\n\n  initViz() {\n    let positionMap = this.getInitialPosition();\n\n    for (let i = 0; i < this.state.array.length; i++) {\n      let position = positionMap[i];\n      let num = this.state.array[i];\n      let id = \"insertion-\" + i;\n      this.visulizeBox(position.row, position.col, 1, 1, num, id);\n    }\n\n    this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"insertion\");\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, null, \"insertion\");\n    this.drawHorizontalGrid();\n    this.drawVerticalGrid();\n  }\n\n  getAction(array = this.state.array) {\n    let actions = [{\n      desc: \"Start Sorting\",\n      how: []\n    }];\n    let unsorted = [...array];\n    let sorted = [];\n    let positions = this.getInitialPosition(array);\n    let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n    let indicatorPosition = JSON.parse(JSON.stringify(this.indicatorInitial));\n    let initSep = sepPosition.row + \"-\" + sepPosition.col;\n    sepPosition.col++;\n    let newSep = sepPosition.row + \"-\" + sepPosition.col;\n    let firstElementRow = positions[0].row;\n    let firstElementCol = positions[0].col;\n    actions.push({\n      desc: \"Move First Item into Sorted Array\",\n      how: [\"Move separator-insertion \" + initSep + \" \" + newSep, \"Sort insertion-\" + firstElementRow + \"-\" + firstElementCol]\n    });\n    sorted.push({\n      num: unsorted.shift(),\n      index: 0\n    });\n    let size = unsorted.length;\n\n    for (let i = 0; i < size; i++) {\n      let num = unsorted.shift();\n      let numID = i + 1;\n      let elementPosition = positions[numID];\n      let elementID = \"selection-\" + numID;\n      let elementRow = elementPosition.row;\n      let elementCol = elementPosition.col;\n      indicatorPosition.row = 3;\n      indicatorPosition.col = firstElementCol - 0.5;\n      actions.push({\n        desc: \"Begin insertion\",\n        how: [\"Move indicator-insertion \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \" + 3 + \"-\" + (firstElementCol - 0.5), \"Move \" + elementID + \" \" + elementRow + \"-\" + elementCol + \" \" + 3.5 + \"-\" + (firstElementCol - 0.5)]\n      });\n      positions[numID].col = 3.5;\n      positions[numID].row = firstElementCol - 0.5;\n      let j = 0;\n      let hasSorted = false;\n\n      while (j < sorted.length && !hasSorted) {\n        let action1 = {};\n        let action2 = {};\n        let action3 = {};\n        let sortedIndex = sorted[j].index;\n        let sortPosition = positions[sortedIndex];\n        let sortedNum = sorted[j].num;\n\n        if (j === 0) {\n          action1.desc = \"Compare with the first\";\n          action1.how = [\"Select insertion-\" + sortedIndex, \"Select insertion-\" + numID];\n        } else {\n          action1.desc = \"Compare with the nearest two\";\n          action1.how = [\"Select insertion-\" + sortedIndex, \"Select insertion-\" + sorted[j - 1].index, \"Select insertion-\" + numID];\n        }\n\n        if (num <= sortedNum) {\n          hasSorted = true;\n          action2.desc = \"Yeah! We found the place\";\n          action2.how = [\"Sort insertion-\" + numID];\n          action3.desc = \"Inserting\";\n          sepPosition.col++;\n          let shiftElements = sorted.slice(j, sorted.length);\n\n          for (let k = 0; k < shiftElements.length; k++) {\n            shiftElements[k] = \"insertion-\" + shiftElements[k].index;\n          }\n\n          action3.how = [\"Shift \" + shiftElements + \" \" + sortPosition.row + \"-\" + sortPosition.col, \"Move separator-insertion \" + sepPosition.row + \"-\" + (sepPosition.col - 1) + \" \" + sepPosition.row + \"-\" + sepPosition.col, \"Move \" + elementID + \" \" + elementRow + \"-\" + elementPosition + \" \" + sortPosition.row + \"-\" + sortPosition.col, \"Move indicator-insertion \" + indicatorPosition.row + \"-\" + indicatorPosition.col + \" \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col, \"Sort insertion-\" + sortedIndex];\n\n          if (j > 0) {\n            action3.how.push(\"Sort insertion-\" + sorted[j - 1].index);\n          }\n\n          indicatorPosition.col = this.indicatorInitial.col;\n          indicatorPosition.row = this.indicatorInitial.row;\n          positions[numID].row = sortPosition.row;\n          positions[numID].col = sortPosition.col;\n\n          for (let k = j; k < sorted.length; k++) {\n            positions[sorted[k].index].col++;\n          }\n\n          sorted.push({\n            num: num,\n            index: numID\n          });\n          sorted.sort((a, b) => {\n            return a.num - b.num;\n          });\n        } else {\n          action2.desc = \"Seems like this is not the place\";\n          action2.how = [\"Warn insertion-\" + numID];\n          action3.desc = \"Go to the next insertion point\";\n          let numPosition = positions[numID];\n          let numPositionFrom = numPosition.row + \"-\" + numPosition.col;\n          numPosition.col++;\n          let newPositionTo = numPosition.row + \"-\" + numPosition.col;\n          let indicatorFrom = indicatorPosition.row + \"-\" + indicatorPosition.col;\n          indicatorPosition.col++;\n          let indicatorTo = indicatorPosition.row + \"-\" + indicatorPosition.col;\n          action3.how = [\"Move \" + elementID + \" \" + numPositionFrom + \" \" + newPositionTo, \"Move indicator-insertion \" + indicatorFrom + \" \" + indicatorTo, \"Sort insertion-\" + sortedIndex];\n\n          if (j > 0) {\n            action3.how.push(\"Sort insertion-\" + sorted[j - 1].index);\n          }\n        }\n\n        actions.push(action1);\n        actions.push(action2);\n        actions.push(action3);\n        j++;\n      }\n\n      if (!hasSorted) {\n        actions.push({\n          desc: \"Yeah! We found the place\",\n          how: [\"Sort \" + elementID]\n        });\n        actions.push({\n          desc: \"Inserting\",\n          how: [\"Move indicator-insertion \" + indicatorPosition.row + \"-\" + indicatorPosition.col + \" \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col, \"Move seperator-insertion \" + sepPosition.row + \"-\" + sepPosition.col + \" \" + sepPosition.row + \"-\" + (sepPosition.col + 1), \"Move \" + elementID + \" \" + positions[numID].row + \"-\" + positions[numID].col + \" \" + sepPosition.row + \"-\" + sepPosition.col]\n        });\n        positions[numID].row = sepPosition.row;\n        positions[numID].row = sepPosition.col;\n        sepPosition.col++;\n        indicatorPosition.row = this.indicatorInitial.row;\n        indicatorPosition.col = this.indicatorInitial.col;\n        sorted.push({\n          num: num,\n          index: numID\n        });\n        sorted.sort((a, b) => {\n          return a.num - b.num;\n        });\n      }\n    }\n\n    return actions;\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 2,\n        col: i + 2\n      };\n    }\n\n    return positionMap;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"insertion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, this.state.actions[this.state.step].desc), React.createElement(\"button\", {\n      onClick: () => {\n        this.setState({\n          step: this.state.step + 1\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Prev\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js"],"names":["React","Component","d3","GridStructure","Insertion","constructor","props","top","bottom","left","right","svg","getInitialPosition","bind","getAction","visFirst","separatorInitial","row","col","indicatorInitial","initArray","actions","state","array","step","speed","setNewArray","animation","componentDidMount","getSVG","drawBasicStructure","initViz","drawIndicator","setState","componentDidUpdate","prevProps","prevState","instruction","desc","how","sepMove","split","sepTo","move","sortAct","console","log","sorted","clearViz","selectAll","remove","positionMap","i","length","position","num","id","visulizeBox","drawSeparator","drawHorizontalGrid","drawVerticalGrid","unsorted","positions","sepPosition","JSON","parse","stringify","indicatorPosition","initSep","newSep","firstElementRow","firstElementCol","push","shift","index","size","numID","elementPosition","elementID","elementRow","elementCol","j","hasSorted","action1","action2","action3","sortedIndex","sortPosition","sortedNum","shiftElements","slice","k","sort","a","b","numPosition","numPositionFrom","newPositionTo","indicatorFrom","indicatorTo","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\nexport class Insertion extends GridStructure {\n    constructor(props) {\n        super(props, 30, 30, 3.5, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"insertion\")\n\n        this.svg = null;\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n        this.visFirst = this.visFirst.bind(this)\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        let initArray = [3, 2, 6, 2, 9, 8]\n\n        let actions = this.getAction(initArray)\n\n        this.state = {\n            array: initArray,\n            actions: actions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col);\n        this.setState({\n            actions: this.getAction(this.state.array)\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.step < this.state.step) {\n            let instruction = this.state.actions[this.state.step]\n\n            if (instruction.desc === \"Move First Item into Sorted Array\") {\n                this.visFirst(instruction.how)\n            }\n        }\n    }\n\n    visFirst(how) {\n        let sepMove = how[0].split(\" \")\n        let sepTo = sepMove[3].split(\"-\")\n        this.move(sepMove[1], +sepTo[0], +sepTo[1], 0.5, 1, () => {\n            let sortAct = how[1].split(\" \")\n            console.log(sortAct)\n            this.sorted(sortAct[1], this.state.speed)\n        }, this.state.speed)\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    initViz() {\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"insertion-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col, \"insertion\");\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, null, \"insertion\");\n        this.drawHorizontalGrid()\n        this.drawVerticalGrid()\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n        let unsorted = [...array];\n        let sorted = [];\n\n\n        let positions = this.getInitialPosition(array);\n        let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n        let indicatorPosition = JSON.parse(JSON.stringify(this.indicatorInitial));\n\n        let initSep = sepPosition.row + \"-\" + sepPosition.col\n\n        sepPosition.col++;\n\n        let newSep = sepPosition.row + \"-\" + sepPosition.col\n\n        let firstElementRow = positions[0].row\n        let firstElementCol = positions[0].col\n\n        actions.push({\n            desc: \"Move First Item into Sorted Array\",\n            how: [\n                \"Move separator-insertion \" + initSep + \" \" + newSep,\n                \"Sort insertion-\" + firstElementRow + \"-\" + firstElementCol \n            ]\n        })\n\n        sorted.push({\n            num: unsorted.shift(),\n            index: 0\n        });\n\n        let size = unsorted.length\n        for (let i = 0; i < size; i++) {\n            let num = unsorted.shift();\n            let numID = i + 1;\n            let elementPosition = positions[numID]\n            let elementID = \"selection-\" + (numID);\n\n            let elementRow = elementPosition.row;\n            let elementCol = elementPosition.col;\n\n            indicatorPosition.row = 3;\n            indicatorPosition.col = (firstElementCol - 0.5);\n            actions.push({\n                desc: \"Begin insertion\",\n                how: [\n                    \"Move indicator-insertion \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \"\n                                                + 3 + \"-\" + (firstElementCol - 0.5),\n                    \"Move \" + elementID + \" \" + elementRow + \"-\" + elementCol + \" \" +  3.5 + \"-\" + (firstElementCol - 0.5)\n                ]\n            })\n\n            positions[numID].col = 3.5\n            positions[numID].row = (firstElementCol - 0.5)\n\n\n            let j = 0;\n            let hasSorted = false;\n            while(j < sorted.length && !hasSorted) {\n                let action1 = {};\n                let action2 = {};\n                let action3 = {};\n\n                let sortedIndex = sorted[j].index;\n                let sortPosition = positions[sortedIndex]\n                let sortedNum = sorted[j].num;\n\n                if (j === 0) {\n                    action1.desc = \"Compare with the first\"\n                    action1.how = [\n                        \"Select insertion-\" + sortedIndex,\n                        \"Select insertion-\" + numID\n                    ]\n                } else {\n                    action1.desc = \"Compare with the nearest two\"\n                    action1.how = [\n                        \"Select insertion-\" + sortedIndex,\n                        \"Select insertion-\" + sorted[j - 1].index,\n                        \"Select insertion-\" + numID\n                    ]   \n                }\n\n                if (num <= sortedNum) {\n                    hasSorted = true;\n                    action2.desc = \"Yeah! We found the place\"\n                    action2.how = [\"Sort insertion-\" + numID]\n                    action3.desc = \"Inserting\"\n                    sepPosition.col++;\n\n\n                    let shiftElements = sorted.slice(j, sorted.length);\n                    \n                    for (let k = 0; k < shiftElements.length; k++) {\n                        shiftElements[k] = \"insertion-\" + shiftElements[k].index\n                    }\n                \n                    action3.how = [\n                        \"Shift \" + shiftElements + \" \" + sortPosition.row + \"-\" + sortPosition.col,\n                        \"Move separator-insertion \" + sepPosition.row + \"-\" + (sepPosition.col - 1) + \" \" \n                                                    + sepPosition.row + \"-\" + sepPosition.col,\n                        \"Move \" + elementID + \" \" + elementRow + \"-\" + elementPosition + \n                                              \" \" + sortPosition.row + \"-\" + sortPosition.col,\n                        \"Move indicator-insertion \" + indicatorPosition.row + \"-\" + indicatorPosition.col\n                                                        + \" \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col,\n                        \"Sort insertion-\" + sortedIndex\n\n                    ]\n\n                    if (j > 0) {\n                        action3.how.push(\"Sort insertion-\" + sorted[j - 1].index)\n                    }\n\n                    indicatorPosition.col = this.indicatorInitial.col\n                    indicatorPosition.row = this.indicatorInitial.row\n\n                    positions[numID].row = sortPosition.row\n                    positions[numID].col = sortPosition.col\n\n                    for (let k = j; k < sorted.length; k++) {\n                        positions[sorted[k].index].col++;\n                    }\n\n                    sorted.push({\n                        num: num,\n                        index: numID\n                    })\n\n                    sorted.sort((a, b) => {\n                        return a.num - b.num\n                    })\n                } else {\n                    action2.desc = \"Seems like this is not the place\"\n                    action2.how = [\"Warn insertion-\" + numID]\n\n                    action3.desc = \"Go to the next insertion point\"\n\n                    let numPosition = positions[numID]\n                    let numPositionFrom = numPosition.row + \"-\" + numPosition.col\n                    numPosition.col++;\n                    let newPositionTo = numPosition.row + \"-\" + numPosition.col\n\n                    let indicatorFrom = indicatorPosition.row + \"-\" + indicatorPosition.col\n                    indicatorPosition.col++;\n                    let indicatorTo = indicatorPosition.row + \"-\" + indicatorPosition.col\n\n                    action3.how = [\n                        \"Move \" + elementID + \" \" + numPositionFrom + \" \" + newPositionTo,\n                        \"Move indicator-insertion \" + indicatorFrom + \" \" + indicatorTo,\n                        \"Sort insertion-\" + sortedIndex\n                    ]\n\n                    if (j > 0) {\n                        action3.how.push(\"Sort insertion-\" + sorted[j - 1].index)\n                    }\n\n                }\n                actions.push(action1)\n                actions.push(action2)\n                actions.push(action3)\n                j++\n            }\n\n            if (!hasSorted) {\n                actions.push({\n                    desc: \"Yeah! We found the place\",\n                    \n                    how: [\n                        \"Sort \" + elementID\n                    ]\n                })\n\n                actions.push({\n                    desc: \"Inserting\",\n                    how: [\n                        \"Move indicator-insertion \" + indicatorPosition.row + \"-\" + indicatorPosition.col  + \" \" \n                                                    + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col,\n                        \"Move seperator-insertion \" + sepPosition.row + \"-\" + sepPosition.col + \" \" \n                                                    + sepPosition.row + \"-\" + (sepPosition.col + 1),\n                        \"Move \" + elementID + \" \" + positions[numID].row + \"-\" + positions[numID].col \n                                            + \" \" + sepPosition.row + \"-\" + sepPosition.col\n                        \n                    ]\n                })\n                positions[numID].row = sepPosition.row\n                positions[numID].row = sepPosition.col\n                sepPosition.col++;\n                indicatorPosition.row = this.indicatorInitial.row\n                indicatorPosition.col = this.indicatorInitial.col\n\n                sorted.push({\n                    num: num,\n                    index: numID\n                })\n                sorted.sort((a, b) => {\n                    return a.num - b.num\n                })\n            }\n        }\n        return(actions)\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 2\n            }\n        } \n        return(positionMap)\n    }\n\n    render() {\n        return(\n            <div id=\"insertion\">\n                <div>{this.state.actions[this.state.step].desc}</div>\n                <button onClick = {() => {\n                    this.setState({\n                        step: this.state.step + 1\n                    })\n                }}>Next</button>\n                <button>Prev</button>\n            </div>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}