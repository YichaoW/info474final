{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSort.js\";\nimport React from 'react';\nimport { GridStructure } from './GridStructure';\nexport class MergeSort extends GridStructure {\n  constructor(props) {\n    // 1: Grid Width 30px\n    // 2: Grid Height 30px\n    // 3: nRow: 4\n    // 4: nCol: 15\n    // 5: padding: 0.05\n    // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n    super(props, 30, 30, 4, 15, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"MergeSort\");\n    this.drawMergeGrid = this.drawMergeGrid.bind(this);\n    this.initViz = this.initViz.bind(this);\n    this.clearViz = this.clearViz.bind(this);\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.getActionHandler = this.getActionHandler.bind(this);\n    this.visSplit = this.visSplit.bind(this);\n    this.vizSort = this.vizSort.bind(this);\n    this.vizMerge = this.vizMerge.bind(this);\n    this.vizPush = this.vizPush.bind(this);\n    let initArray = [3, 2, 6, 2, 9, 8, 4, -3];\n    this.arrayStartCol = 1;\n    let actions = this.getAction(initArray);\n    this.state = {\n      array: initArray,\n      actions: actions,\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.drawHorizontalGrid();\n    this.drawMergeGrid();\n    this.initViz();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.setNewArray) {\n      this.clearViz();\n      this.initViz();\n      this.setState({\n        setNewArray: false\n      });\n    } else {\n      let inverse = this.state.step < prevState.step;\n      let action = this.state.actions[this.state.step];\n\n      if (inverse) {\n        action = prevState.actions[prevState.step];\n      }\n\n      if (action.desc === \"Split Array into Smaller Pieces\") {\n        this.visSplit(action.how, inverse);\n      } else if (action.desc === \"Array with Single Item is Sorted\") {\n        this.vizSort(action.how, inverse);\n      } else if (action.desc === \"Merge Two Sorted Array\") {\n        this.vizMerge(action.how, inverse);\n      } else if (action.desc === \"Push the Minimum to Next Level\") {\n        this.vizPush(action.how, inverse);\n      }\n    }\n  }\n\n  initViz() {\n    for (let i = 0; i < this.state.array.length; i++) {\n      this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.array[i], \"MergeSort-\" + i, \"gray\", \"white\");\n    }\n\n    this.visulizeBox(2, 8, 1, 1, \"\", \"Barriar-1\", \"black\", \"white\", 0);\n  }\n\n  clearViz() {\n    this.svg.selectAll(\"g\").remove();\n  }\n\n  visSplit(how, inverse) {\n    let shift = how[0].split(\" \");\n    let shiftCommand = shift[0] + \" \" + shift[1] + \" \" + shift[2];\n    let shiftLength = +shift[3];\n    let moveDir = 3;\n\n    if (inverse) {\n      shiftLength = 0;\n      moveDir = 2;\n    }\n\n    if (!inverse) {\n      this.shift(shiftCommand, () => {\n        for (let i = 1; i < how.length; i++) {\n          let move = how[i].split(\" \");\n          let moveTarget = move[moveDir].split(\"-\");\n          this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, null, this.state.speed);\n        }\n      }, this.state.speed, shiftLength);\n    } else {\n      let callBack = null;\n\n      for (let i = 1; i < how.length; i++) {\n        let move = how[i].split(\" \");\n        let moveTarget = move[moveDir].split(\"-\");\n\n        if (i === how.length - 1) {\n          callBack = () => {\n            this.shift(shiftCommand, null, this.state.speed, shiftLength);\n          };\n        }\n\n        this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, callBack, this.state.speed);\n      }\n    }\n  }\n\n  vizSort(how, inverse) {\n    if (inverse) {\n      this.deselect(how[0].split(\" \")[1], null, this.state.speed);\n    } else {\n      this.sorted(how[0].split(\" \")[1], null, this.state.speed);\n    }\n  }\n\n  vizMerge(how, inverse) {\n    for (let i = 0; i < how.length; i++) {\n      if (inverse) {\n        this.sorted(how[i].split(\" \")[1], null, this.state.speed);\n      } else {\n        this.select(how[i].split(\" \")[1], null, this.state.speed);\n      }\n    }\n  }\n\n  vizPush(how, inverse) {\n    let moveDir = 3;\n\n    if (inverse) {\n      moveDir = 2;\n      this.select(how[0].split(\" \")[1], null, this.state.speed);\n    } else {\n      this.sorted(how[0].split(\" \")[1], null, this.state.speed);\n    }\n\n    let move = how[1].split(\" \");\n    let moveTarget = move[moveDir].split(\"-\");\n    this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, null, this.state.speed);\n  }\n\n  drawMergeGrid() {\n    for (let i = 1; i <= 14; i++) {\n      this.drawLine(i * 30, 90, i * 30, 120);\n    }\n\n    this.drawLine(210, 30, 210, 60);\n    this.drawLine(240, 30, 240, 60);\n\n    for (let i = 1; i <= 3; i++) {\n      this.drawLine(120 * i, 60, 120 * i, 90);\n      this.drawLine(120 * i - 30, 60, 120 * i - 30, 90);\n    }\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 1,\n        col: i + this.arrayStartCol\n      };\n    }\n\n    return positionMap;\n  }\n\n  getAction(array) {\n    let actions = [{\n      desc: \"Start Sort\",\n      how: []\n    }];\n    let newArray = [];\n\n    for (let i = 0; i < array.length; i++) {\n      newArray.push({\n        num: array[i],\n        id: i\n      });\n    }\n\n    let position = this.getInitialPosition(array);\n    this.getActionHandler(newArray, position, 1, actions);\n    actions.push({\n      desc: \"Sort Finish\",\n      how: []\n    });\n    return actions;\n  }\n\n  getActionHandler(array, position, level, actions) {\n    if (array.length === 1) {\n      let id = \"MergeSort-\" + array[0].id;\n      actions.push({\n        desc: \"Array with Single Item is Sorted\",\n        how: [\"Sort \" + id]\n      });\n    } else {\n      let shiftLength = Math.ceil(array.length / 2);\n      let shiftStartIndex = Math.floor(array.length / 2);\n      let shiftInitPosition = position[array[shiftStartIndex].id];\n      let initCoordinate = shiftInitPosition.row + \"-\" + shiftInitPosition.col;\n      let shiftCommand = \"Shift \";\n      let shift = [];\n\n      for (let i = shiftStartIndex; i < array.length; i++) {\n        let id = array[i].id;\n        shift.push(\"MergeSort-\" + id);\n        position[id].col += shiftLength;\n      }\n\n      shiftCommand += shift + \" \" + initCoordinate + \" \" + shiftLength;\n      let action = {};\n      action.desc = \"Split Array into Smaller Pieces\";\n      action.how = [shiftCommand];\n\n      for (let i = 0; i < array.length; i++) {\n        let id = array[i].id;\n        let initPosition = position[id].row + \"-\" + position[id].col;\n        position[id].row++;\n        let newPosition = position[id].row + \"-\" + position[id].col;\n        action.how.push(\"Move MergeSort-\" + id + \" \" + initPosition + \" \" + newPosition);\n      }\n\n      actions.push(action);\n      let copyArray1 = [...array];\n      let copyArray2 = copyArray1.splice(shiftStartIndex);\n      let copyArray3 = [...array];\n      this.getActionHandler(copyArray1, position, level + 1, actions);\n      this.getActionHandler(copyArray2, position, level + 1, actions);\n      let sortNewAction = {};\n      sortNewAction.desc = \"Merge Two Sorted Array\";\n      sortNewAction.how = [];\n\n      for (let i = 0; i < copyArray3.length; i++) {\n        sortNewAction.how.push(\"Select MergeSort-\" + array[i].id);\n      }\n\n      actions.push(sortNewAction);\n      let copyArray4 = copyArray3.splice(shiftStartIndex);\n      copyArray3.sort((a, b) => {\n        return a.num - b.num;\n      });\n      copyArray4.sort((a, b) => {\n        return a.num - b.num;\n      });\n      let initPosition = position[copyArray3[0].id];\n      let initRow = initPosition.row - 1;\n      let initCol = initPosition.col;\n      let i = 0;\n      let j = 0;\n      let result = [];\n\n      while (i < copyArray3.length && j < copyArray4.length) {\n        let num1 = copyArray3[i].num;\n        let num2 = copyArray4[j].num;\n        let pushAction = {\n          desc: \"Push the Minimum to Next Level\"\n        };\n        let numID = copyArray3[i].id;\n\n        if (num2 < num1) {\n          numID = copyArray4[j].id;\n          j++;\n        } else {\n          i++;\n        }\n\n        let originalPosit = position[numID].row + \"-\" + position[numID].col;\n        let newPosit = initRow + \"-\" + (initCol + result.length);\n        position[numID].row = initRow;\n        position[numID].col = initCol + result.length;\n        result.push(numID);\n        pushAction.how = [\"Sort MergeSort-\" + numID, \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit];\n        actions.push(pushAction);\n      }\n\n      while (i < copyArray3.length) {\n        let pushAction = {\n          desc: \"Push the Minimum to Next Level\"\n        };\n        let numID = copyArray3[i].id;\n        i++;\n        let originalPosit = position[numID].row + \"-\" + position[numID].col;\n        let newPosit = initRow + \"-\" + (initCol + result.length);\n        position[numID].row = initRow;\n        position[numID].col = initCol + result.length;\n        result.push(numID);\n        pushAction.how = [\"Sort MergeSort-\" + numID, \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit];\n        actions.push(pushAction);\n      }\n\n      while (j < copyArray4.length) {\n        let pushAction = {\n          desc: \"Push the Minimum to Next Level\"\n        };\n        let numID = copyArray4[j].id;\n        j++;\n        let originalPosit = position[numID].row + \"-\" + position[numID].col;\n        let newPosit = initRow + \"-\" + (initCol + result.length);\n        position[numID].row = initRow;\n        position[numID].col = initCol + result.length;\n        result.push(numID);\n        pushAction.how = [\"Sort MergeSort-\" + numID, \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit];\n        actions.push(pushAction);\n      }\n    }\n  }\n\n  render() {\n    let actionDisplay = \"Finding Algorithm\";\n\n    if (this.state.actions.length > 0) {\n      let cur = Math.min(this.state.actions.length - 1, this.state.step);\n      actionDisplay = this.state.actions[cur].desc;\n    }\n\n    let animationSign = \"Run!\";\n\n    if (this.state.animation) {\n      animationSign = \"Stop!\";\n    }\n\n    return React.createElement(\"div\", {\n      id: \"MergeSort\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, actionDisplay), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step > 0) {\n          this.setState({\n            step: this.state.step - 1\n          });\n        }\n      },\n      disabled: this.state.step === 0 || this.state.animation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Prev\"), React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step < this.state.actions.length - 1) {\n          this.setState({\n            step: this.state.step + 1\n          });\n        }\n      },\n      disabled: this.state.step === this.state.actions.length - 1 || this.state.animation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      onClick: () => {\n        let newArray = this.generateRandomArray(8, 8);\n        let newAction = this.getAction(newArray);\n        this.setState({\n          array: newArray,\n          actions: newAction,\n          step: 0,\n          setNewArray: true\n        });\n      },\n      disabled: this.state.animation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"New Array\"), React.createElement(\"button\", {\n      onClick: () => {\n        if (!this.state.animation) {\n          let animationStep = () => {\n            this.setState({\n              animation: window.setInterval(() => {\n                if (this.state.step < this.state.actions.length - 1) {\n                  this.setState({\n                    step: this.state.step + 1\n                  });\n                } else {\n                  window.clearInterval(this.state.animation);\n                  this.setState({\n                    animation: false\n                  });\n                }\n              }, 700)\n            });\n          };\n\n          if (this.state.step === this.state.actions.length - 1) {\n            this.setState({\n              step: 0\n            }, () => {\n              this.clearViz();\n              this.initViz();\n              animationStep();\n            });\n          } else {\n            animationStep();\n          }\n        } else {\n          window.clearInterval(this.state.animation);\n          this.setState({\n            animation: false\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, animationSign)));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSort.js"],"names":["React","GridStructure","MergeSort","constructor","props","top","bottom","left","right","drawMergeGrid","bind","initViz","clearViz","getInitialPosition","getAction","getActionHandler","visSplit","vizSort","vizMerge","vizPush","initArray","arrayStartCol","actions","state","array","step","speed","setNewArray","animation","componentDidMount","svg","getSVG","drawBasicStructure","drawHorizontalGrid","componentDidUpdate","prevProps","prevState","setState","inverse","action","desc","how","i","length","visulizeBox","selectAll","remove","shift","split","shiftCommand","shiftLength","moveDir","move","moveTarget","callBack","deselect","sorted","select","drawLine","positionMap","row","col","newArray","push","num","id","position","level","Math","ceil","shiftStartIndex","floor","shiftInitPosition","initCoordinate","initPosition","newPosition","copyArray1","copyArray2","splice","copyArray3","sortNewAction","copyArray4","sort","a","b","initRow","initCol","j","result","num1","num2","pushAction","numID","originalPosit","newPosit","render","actionDisplay","cur","min","animationSign","generateRandomArray","newAction","animationStep","window","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {GridStructure} from './GridStructure'\n\nexport class MergeSort extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 4\n        // 4: nCol: 15\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 4, 15, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"MergeSort\")\n\n        this.drawMergeGrid = this.drawMergeGrid.bind(this);\n        this.initViz = this.initViz.bind(this)\n        this.clearViz = this.clearViz.bind(this)\n        this.getInitialPosition = this.getInitialPosition.bind(this)\n        this.getAction = this.getAction.bind(this)\n        this.getActionHandler = this.getActionHandler.bind(this)\n        this.visSplit = this.visSplit.bind(this)\n        this.vizSort = this.vizSort.bind(this)\n        this.vizMerge = this.vizMerge.bind(this)\n        this.vizPush = this.vizPush.bind(this)\n\n        let initArray = [3, 2, 6, 2, 9, 8, 4, -3]\n        this.arrayStartCol = 1;\n\n        let actions = this.getAction(initArray)\n        this.state = {\n            array: initArray,\n            actions: actions,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.drawHorizontalGrid();\n        this.drawMergeGrid();\n        this.initViz();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.setNewArray) {\n            this.clearViz();\n            this.initViz();\n            this.setState({\n                setNewArray: false\n            })\n        } else {\n            let inverse = this.state.step < prevState.step\n            let action = this.state.actions[this.state.step];\n            if (inverse) {\n                action = prevState.actions[prevState.step];\n            }\n            \n            if (action.desc === \"Split Array into Smaller Pieces\") {\n                this.visSplit(action.how, inverse)\n            } else if (action.desc === \"Array with Single Item is Sorted\") {\n                this.vizSort(action.how, inverse)\n            } else if (action.desc === \"Merge Two Sorted Array\") {\n                this.vizMerge(action.how, inverse)\n            } else if (action.desc === \"Push the Minimum to Next Level\") {\n                this.vizPush(action.how, inverse)\n            }\n         \n        }\n    }\n\n    initViz() {\n        for (let i = 0; i < this.state.array.length; i++) {\n            this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.array[i], \"MergeSort-\" + i, \"gray\", \"white\")\n        }\n        this.visulizeBox(2, 8, 1, 1, \"\", \"Barriar-1\", \"black\", \"white\", 0)\n\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    visSplit(how, inverse) {\n        let shift = how[0].split(\" \")\n        let shiftCommand = shift[0] + \" \" + shift[1] + \" \" + shift[2]\n        let shiftLength = +shift[3]\n        let moveDir = 3;\n        if (inverse) {\n            shiftLength = 0;\n            moveDir = 2\n        }\n        if (!inverse) {\n            this.shift(shiftCommand, () => {\n                for (let i = 1; i < how.length; i++) {\n                    let move = how[i].split(\" \")\n                    let moveTarget = move[moveDir].split(\"-\")\n                    this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, null, this.state.speed)\n                }\n            }, this.state.speed, shiftLength)\n        } else {\n\n            let callBack = null;\n            for (let i = 1; i < how.length; i++) {\n                let move = how[i].split(\" \")\n                let moveTarget = move[moveDir].split(\"-\")\n                if (i === how.length - 1) {\n                    callBack = () => {\n                        this.shift(shiftCommand, null, this.state.speed, shiftLength)\n                    }\n                }\n                this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, callBack, this.state.speed)\n            }\n        }\n    }\n\n    vizSort(how, inverse) {\n        if (inverse) {\n            this.deselect(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.sorted(how[0].split(\" \")[1], null, this.state.speed)\n        }\n    }\n\n    vizMerge(how, inverse) {\n        for (let i = 0; i < how.length; i++) {\n            if (inverse) {\n                this.sorted(how[i].split(\" \")[1], null, this.state.speed)\n            } else {\n                this.select(how[i].split(\" \")[1], null, this.state.speed)\n            }\n        } \n    }\n\n    vizPush(how, inverse) {\n        let moveDir = 3;\n        if (inverse) {\n            moveDir = 2;\n            this.select(how[0].split(\" \")[1], null, this.state.speed)\n        } else {\n            this.sorted(how[0].split(\" \")[1], null, this.state.speed)\n        }\n        let move = how[1].split(\" \")\n        let moveTarget = move[moveDir].split(\"-\")\n        this.move(move[1], moveTarget[0], moveTarget[1], 0.05, 0.05, null, this.state.speed)\n    }\n\n    drawMergeGrid() {\n        for (let i = 1; i <= 14; i++) {\n            this.drawLine(i * 30, 90, i * 30, 120)\n        }\n        this.drawLine(210, 30, 210, 60)\n        this.drawLine(240, 30, 240, 60)\n\n        for (let i = 1; i <= 3; i++) {\n            this.drawLine(120 * i, 60, 120 * i, 90)\n            this.drawLine(120 * i - 30, 60, 120 * i - 30, 90)\n        }\n        \n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 1,\n                col: i + this.arrayStartCol\n            }\n        } \n        return(positionMap)\n    }\n\n    getAction(array) {\n        let actions = [{\n            desc: \"Start Sort\",\n            how: []\n        }]\n\n        let newArray = []\n        for (let i = 0; i < array.length; i++) {\n            newArray.push({\n                num: array[i],\n                id: i\n            })\n        }\n        let position = this.getInitialPosition(array);\n        this.getActionHandler(newArray, position, 1, actions);\n\n        actions.push({\n            desc: \"Sort Finish\",\n            how: []\n        })\n        return(actions)\n    }\n\n    getActionHandler(array, position, level, actions) {\n        if (array.length === 1) {\n            let id = \"MergeSort-\" + array[0].id\n            actions.push({\n                desc: \"Array with Single Item is Sorted\",\n                how: [\"Sort \" + id]\n            })\n        } else {\n            let shiftLength = Math.ceil(array.length / 2)\n            let shiftStartIndex = Math.floor(array.length / 2)\n            let shiftInitPosition = position[array[shiftStartIndex].id]\n            let initCoordinate = shiftInitPosition.row + \"-\" + shiftInitPosition.col\n            let shiftCommand = \"Shift \"\n            let shift = []\n            for (let i = shiftStartIndex; i < array.length; i++) {\n                let id = array[i].id\n                shift.push(\"MergeSort-\" + id)\n                position[id].col += shiftLength\n            }\n            shiftCommand += shift + \" \" + initCoordinate + \" \" + shiftLength\n\n            let action = {};\n            action.desc = \"Split Array into Smaller Pieces\"\n            action.how = [shiftCommand]\n\n            for (let i = 0; i < array.length; i++) {\n                let id = array[i].id\n                let initPosition = position[id].row + \"-\" + position[id].col;\n                position[id].row++;\n                let newPosition = position[id].row + \"-\" + position[id].col;\n                action.how.push(\"Move MergeSort-\" + id + \" \" + initPosition + \" \" + newPosition)\n            }\n\n            actions.push(action)\n            let copyArray1 = [...array]\n            let copyArray2 = copyArray1.splice(shiftStartIndex)\n\n            let copyArray3 = [...array]\n            this.getActionHandler(copyArray1, position, level + 1, actions);\n            this.getActionHandler(copyArray2, position, level + 1, actions)\n\n            let sortNewAction = {};\n            sortNewAction.desc = \"Merge Two Sorted Array\"\n            sortNewAction.how = [];\n            for (let i = 0; i < copyArray3.length; i++) {\n                sortNewAction.how.push(\"Select MergeSort-\" + array[i].id)\n            }\n            actions.push(sortNewAction);\n            let copyArray4 = copyArray3.splice(shiftStartIndex)\n            copyArray3.sort((a, b) => {\n                return a.num - b.num\n            })\n\n            copyArray4.sort((a, b) => {\n                return a.num - b.num\n            })\n\n            let initPosition = position[copyArray3[0].id]\n            let initRow = initPosition.row - 1;\n            let initCol = initPosition.col;\n\n            let i = 0;\n            let j = 0;\n            let result = [];\n            while (i < copyArray3.length && j < copyArray4.length) {\n                let num1 = copyArray3[i].num\n                let num2 = copyArray4[j].num\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray3[i].id\n                if (num2 < num1) {\n                    numID = copyArray4[j].id\n                    j++;\n                } else {\n                    i++;\n                }\n                let originalPosit = position[numID].row + \"-\" + (position[numID].col);\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol+ result.length;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n\n            \n            while (i < copyArray3.length)  {\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray3[i].id\n                i++;\n                \n                let originalPosit = position[numID].row + \"-\" + position[numID].col\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol + result.length;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n\n            while (j < copyArray4.length) {\n                let pushAction = {\n                    desc: \"Push the Minimum to Next Level\"\n                }\n                \n                let numID = copyArray4[j].id\n                j++;\n                let originalPosit = position[numID].row + \"-\" + position[numID].col\n                let newPosit = initRow + \"-\" + (initCol + result.length)\n                position[numID].row = initRow;\n                position[numID].col = initCol + result.length;\n                result.push(numID)\n                pushAction.how = [\n                    \"Sort MergeSort-\" + numID,\n                    \"Move MergeSort-\" + numID + \" \" + originalPosit + \" \" + newPosit\n                ]\n                actions.push(pushAction)\n            }\n        }\n    }\n\n\n    render() {\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            let cur = Math.min(this.state.actions.length - 1, this.state.step)\n            actionDisplay = this.state.actions[cur].desc;\n        }\n\n        let animationSign = \"Run!\"\n        if (this.state.animation) {\n            animationSign = \"Stop!\"\n        }\n\n        return(\n            <div id=\"MergeSort\">\n                <div>{actionDisplay}</div>\n                <div>\n                    <button onClick={() => {\n                        if (this.state.step > 0) {\n                            this.setState({\n                                step: this.state.step - 1\n                            })\n                        }\n                    }} disabled={this.state.step === 0 || this.state.animation}>Prev</button>\n                    <button onClick={() => {\n                        if (this.state.step < this.state.actions.length - 1) {\n                            this.setState({\n                                step: this.state.step + 1\n                            })\n                        }\n                    }} disabled={this.state.step === this.state.actions.length - 1 || this.state.animation}>Next</button>\n\n                    <button onClick={() => {\n                        let newArray = this.generateRandomArray(8, 8);\n\n                        let newAction = this.getAction(newArray);\n                        this.setState({\n                            array: newArray,\n                            actions: newAction,\n                            step: 0,\n                            setNewArray: true\n                        })\n                    }} disabled={this.state.animation}>New Array</button>\n\n                    <button onClick={() => {\n                        if (!this.state.animation) {\n                            let animationStep = () => {\n                                this.setState({\n                                    animation: window.setInterval(() => {\n                                        if (this.state.step < this.state.actions.length - 1) {\n                                            this.setState({\n                                                step: this.state.step + 1\n                                            })   \n                                        } else {\n                                            window.clearInterval(this.state.animation);\n                                            this.setState({\n                                                animation: false\n                                            })\n                                        }\n                                }, 700)})}\n                            if (this.state.step === this.state.actions.length - 1) {\n                                this.setState({\n                                    step: 0\n                                }, () => {\n                                    this.clearViz();\n                                    this.initViz();\n                                    animationStep();\n                                })\n                            } else {\n                                animationStep();\n                            }\n                        } else {\n                            window.clearInterval(this.state.animation);\n                            this.setState({\n                                animation: false\n                            })\n                        }\n                    }}>{animationSign}</button>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}