{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSort.js\";\nimport React from 'react';\nimport { GridStructure } from './GridStructure';\nexport class MergeSort extends GridStructure {\n  constructor(props) {\n    // 1: Grid Width 30px\n    // 2: Grid Height 30px\n    // 3: nRow: 4\n    // 4: nCol: 15\n    // 5: padding: 0.05\n    // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n    super(props, 30, 30, 4, 15, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"MergeSort\");\n    this.drawMergeGrid = this.drawMergeGrid.bind(this);\n    this.initViz = this.initViz.bind(this);\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.getActionHandler = this.getActionHandler.bind(this);\n    let initArray = [3, 2, 6, 2, 9, 8, 4, -3];\n    this.arrayStartCol = 1;\n    console.log(this.getAction(initArray));\n    this.state = {\n      array: initArray,\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.drawHorizontalGrid();\n    this.drawMergeGrid();\n    this.initViz(); //this.setState({\n    //    actions: this.getAction()\n    //})\n  }\n\n  initViz() {\n    for (let i = 0; i < this.state.array.length; i++) {\n      this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.array[i], \"MergeSort-\" + i, \"gray\", \"white\");\n    }\n  }\n\n  drawMergeGrid() {\n    for (let i = 1; i <= 14; i++) {\n      this.drawLine(i * 30, 90, i * 30, 120);\n    }\n\n    this.drawLine(210, 30, 210, 60);\n    this.drawLine(240, 30, 240, 60);\n\n    for (let i = 1; i <= 3; i++) {\n      this.drawLine(120 * i, 60, 120 * i, 90);\n      this.drawLine(120 * i - 30, 60, 120 * i - 30, 90);\n    }\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 1,\n        col: i + this.arrayStartCol\n      };\n    }\n\n    return positionMap;\n  }\n\n  getAction(array) {\n    let actions = [{\n      desc: \"Start Sort\",\n      how: []\n    }];\n    let arrayCopy = [...array];\n    let position = this.getInitialPosition(arrayCopy);\n    this.getActionHandler(arrayCopy, position, 1, actions);\n    actions.push({\n      desc: \"Sort Finish\",\n      how: []\n    });\n    return actions;\n  }\n\n  getActionHandler(array, position, level, actions) {\n    if (array.length === 1) {\n      let id = \"MergeSort-\" + array[0].id;\n      actions.push({\n        desc: \"Single Element Array is Sorted\",\n        how: [\"Sort \" + id]\n      });\n    } else {\n      let shiftLength = Math.ceil(array.length / 2);\n      let shiftStartIndex = Math.floor(shiftLength);\n      let shiftInitPosition = position[array[shiftStartIndex].id];\n      let initCoordinate = shiftInitPosition.row + \"-\" + shiftInitPosition.col;\n      let shiftCommand = \"Shift \";\n      let shift = [];\n\n      for (let i = shiftStartIndex; i < array.length; i++) {\n        let id = array[i].id;\n        shift.push(\"MergeSort-\" + id);\n        position[id].col += shiftLength;\n      }\n\n      shiftCommand += shift + \" \" + initCoordinate + \" \" + shiftLength;\n      let action = {};\n      action.desc = \"Split Array into Smaller Pieces\";\n      action.how = [shiftCommand];\n\n      for (let i = 0; i < array.length; i++) {\n        let id = array[i].id;\n        let initPosition = position[id].row + \"-\" + position[id].col;\n        position[id].row++;\n        let newPosition = position[id].row + \"-\" + position[id].col;\n        action.how.push(\"Move MergeSort-\" + id + \" \" + initPosition + \" \" + newPosition);\n      }\n\n      let array1 = array.splice(0, shiftStartIndex);\n      let array2 = array.splice(shiftStartIndex);\n      this.getActionHandler(array1, position, level + 1, actions);\n      this.getActionHandler(array2, position, level + 1, actions);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"MergeSort\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/MergeSort.js"],"names":["React","GridStructure","MergeSort","constructor","props","top","bottom","left","right","drawMergeGrid","bind","initViz","getInitialPosition","getAction","getActionHandler","initArray","arrayStartCol","console","log","state","array","step","speed","setNewArray","animation","componentDidMount","svg","getSVG","drawBasicStructure","drawHorizontalGrid","i","length","visulizeBox","drawLine","positionMap","row","col","actions","desc","how","arrayCopy","position","push","level","id","shiftLength","Math","ceil","shiftStartIndex","floor","shiftInitPosition","initCoordinate","shiftCommand","shift","action","initPosition","newPosition","array1","splice","array2","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {GridStructure} from './GridStructure'\n\nexport class MergeSort extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 4\n        // 4: nCol: 15\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 4, 15, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"MergeSort\")\n\n        this.drawMergeGrid = this.drawMergeGrid.bind(this);\n        this.initViz = this.initViz.bind(this)\n        this.getInitialPosition = this.getInitialPosition.bind(this)\n        this.getAction = this.getAction.bind(this)\n        this.getActionHandler = this.getActionHandler.bind(this)\n\n        let initArray = [3, 2, 6, 2, 9, 8, 4, -3]\n        this.arrayStartCol = 1;\n\n        console.log(this.getAction(initArray))\n        this.state = {\n            array: initArray,\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.drawHorizontalGrid();\n        this.drawMergeGrid();\n        this.initViz();\n        //this.setState({\n        //    actions: this.getAction()\n        //})\n    }\n\n    initViz() {\n        for (let i = 0; i < this.state.array.length; i++) {\n            this.visulizeBox(1, i + this.arrayStartCol, 1, 1, this.state.array[i], \"MergeSort-\" + i, \"gray\", \"white\")\n        }\n    }\n\n    drawMergeGrid() {\n        for (let i = 1; i <= 14; i++) {\n            this.drawLine(i * 30, 90, i * 30, 120)\n        }\n        this.drawLine(210, 30, 210, 60)\n        this.drawLine(240, 30, 240, 60)\n\n        for (let i = 1; i <= 3; i++) {\n            this.drawLine(120 * i, 60, 120 * i, 90)\n            this.drawLine(120 * i - 30, 60, 120 * i - 30, 90)\n        }\n        \n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 1,\n                col: i + this.arrayStartCol\n            }\n        } \n        return(positionMap)\n    }\n\n    getAction(array) {\n        let actions = [{\n            desc: \"Start Sort\",\n            how: []\n        }]\n\n        let arrayCopy = [...array]\n        let position = this.getInitialPosition(arrayCopy);\n        this.getActionHandler(arrayCopy, position, 1, actions);\n\n        actions.push({\n            desc: \"Sort Finish\",\n            how: []\n        })\n        return(actions)\n    }\n\n    getActionHandler(array, position, level, actions) {\n        if (array.length === 1) {\n            let id = \"MergeSort-\" + array[0].id\n            actions.push({\n                desc: \"Single Element Array is Sorted\",\n                how: [\"Sort \" + id]\n            })\n        } else {\n            let shiftLength = Math.ceil(array.length / 2)\n            let shiftStartIndex = Math.floor(shiftLength)\n            let shiftInitPosition = position[array[shiftStartIndex].id]\n            let initCoordinate = shiftInitPosition.row + \"-\" + shiftInitPosition.col\n            let shiftCommand = \"Shift \"\n            let shift = []\n            for (let i = shiftStartIndex; i < array.length; i++) {\n                let id = array[i].id\n                shift.push(\"MergeSort-\" + id)\n                position[id].col += shiftLength\n            }\n            shiftCommand += shift + \" \" + initCoordinate + \" \" + shiftLength\n\n            let action = {};\n            action.desc = \"Split Array into Smaller Pieces\"\n            action.how = [shiftCommand]\n\n            for (let i = 0; i < array.length; i++) {\n                let id = array[i].id\n                let initPosition = position[id].row + \"-\" + position[id].col;\n                position[id].row++;\n                let newPosition = position[id].row + \"-\" + position[id].col;\n                action.how.push(\"Move MergeSort-\" + id + \" \" + initPosition + \" \" + newPosition)\n            }\n\n            let array1 = array.splice(0, shiftStartIndex)\n            let array2 = array.splice(shiftStartIndex)\n            this.getActionHandler(array1, position, level + 1, actions);\n            this.getActionHandler(array2, position, level + 1, actions)\n\n        }\n    }\n\n\n    render() {\n        return(<div id=\"MergeSort\">\n\n        </div>)\n    }\n}"]},"metadata":{},"sourceType":"module"}