{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/SelectionSort.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class SelectionSort extends GridStructure {\n  constructor(props) {\n    // 1: Grid Width 30px\n    // 2: Grid Height 30px\n    // 3: nRow: 3\n    // 4: nCol: 10\n    // 5: padding: 0.05\n    // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n    super(props, 30, 30, 3, 10, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"selection\");\n    this.svg = null;\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    this.separatorInitial = {\n      row: 1,\n      col: 2\n    };\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.visulizeFind = this.visulizeFind.bind(this);\n    let initArray = [3, 2, 6, 2, 9, 8];\n    this.state = {\n      array: initArray,\n      actions: [],\n      step: 0\n    };\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 2,\n        col: i + 3\n      };\n    }\n\n    return positionMap;\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    let positionMap = this.getInitialPosition();\n\n    for (let i = 0; i < this.state.array.length; i++) {\n      let position = positionMap[i];\n      let num = this.state.array[i];\n      let id = \"insertion-\" + i;\n      this.visulizeBox(position.row, position.col, 1, 1, num, id);\n    }\n\n    this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col);\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, \"min\");\n    this.drawHorizontalGrid();\n    this.drawVerticalGrid();\n    this.setState({\n      actions: this.getAction()\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.step > prevState.step) {\n      let action = this.state.actions[this.state.step];\n\n      if (action.desc === \"Find the Lowest #\") {\n        this.visulizeFind(action.how);\n      }\n    } else if (this.state.step < prevState.step) {\n      console.log(\"--\");\n    }\n  }\n\n  visulizeFind(how) {\n    let moveAction = how[0].split(\" \");\n    let id = moveAction[1];\n    let to = moveAction[3].split(\"-\");\n    console.log(to[0]);\n    console.log(to[1]);\n    this.move(id, to[0], to[1], -0.85, 0.05, () => {\n      let selectAction = how[1]; //console.log(selectAction)\n    });\n    console.log(moveAction);\n  }\n\n  getAction(array = this.state.array) {\n    let actions = [{\n      desc: \"Start Sorting\",\n      how: []\n    }];\n    let arrayMap = [];\n    let positions = this.getInitialPosition();\n    let indexes = [];\n    let indicatorRow = this.indicatorInitial.row;\n    let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n\n    for (let i = 0; i < array.length; i++) {\n      indexes.push(i);\n      arrayMap.push({\n        number: array[i],\n        index: i\n      });\n    }\n\n    arrayMap = arrayMap.sort((a, b) => {\n      return a.number - b.number;\n    });\n\n    for (let i = 0; i < arrayMap.length; i++) {\n      let index = arrayMap[i].index;\n      let elementPosition = positions[index];\n      let indicatorFrom = indicatorRow + \"-\" + this.indicatorInitial.col;\n      let indicatorTo = indicatorRow + \"-\" + elementPosition.col;\n      let elementID = \"insertion-\" + index;\n      let elementInitial = elementPosition.row + \"-\" + elementPosition.col;\n      let findMin = {\n        desc: \"Find the Lowest #\",\n        how: [\"Move indicator \" + indicatorFrom + \" \" + indicatorTo, \"Select \" + elementID]\n      };\n      indexes[index] = null;\n      let shift = [];\n      let shiftPosition = null;\n\n      for (let i = 0; i < index; i++) {\n        if (indexes[i] !== null) {\n          let index = indexes[i];\n\n          if (shift.length === 0) {\n            shiftPosition = positions[index].row + \"-\" + positions[index].col;\n          }\n\n          positions[index].col++;\n          shift.push(\"insertion-\" + index);\n        }\n      }\n\n      let sepCur = sepPosition.row + \"-\" + sepPosition.col;\n      let elementStage1 = elementPosition.row + 1 + \"-\" + elementPosition.col;\n      let elementNewCol = sepPosition.col;\n      let elementStage2 = elementPosition.row + 1 + \"-\" + elementNewCol;\n      let elementStage3 = elementPosition.row + \"-\" + elementNewCol;\n      sepPosition.col++;\n      let sepNext = sepPosition.row + \"-\" + sepPosition.col;\n      let move = {\n        desc: \"Move the Lowest # to the End of Sorted Array\",\n        how: [\"Move indicator \" + indicatorTo + \" \" + indicatorFrom, \"Move \" + elementID + \" \" + elementInitial + \" \" + elementStage1, \"Shift \" + shift + \" \" + shiftPosition, \"Move separator \" + sepCur + \" \" + sepNext, \"Move \" + elementID + \" \" + elementStage1 + \" \" + elementStage2, \"Move \" + elementID + \" \" + elementStage2 + \" \" + elementStage3]\n      };\n      actions.push(findMin);\n      actions.push(move);\n    }\n\n    actions.push({\n      desc: \"Sort Finished\",\n      how: []\n    });\n    return actions;\n  }\n\n  render() {\n    let actionDisplay = \"Finding Algorithm\";\n\n    if (this.state.actions.length > 0) {\n      actionDisplay = this.state.actions[this.state.step].desc;\n    }\n\n    return React.createElement(\"div\", {\n      id: \"selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, actionDisplay), React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step < this.state.actions.length - 1) {\n          this.setState({\n            step: this.state.step + 1\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.step > 0) {\n          this.setState({\n            step: this.state.step - 1\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Prev\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/SelectionSort.js"],"names":["React","Component","d3","GridStructure","SelectionSort","constructor","props","top","bottom","left","right","svg","indicatorInitial","row","col","separatorInitial","getInitialPosition","bind","getAction","visulizeFind","initArray","state","array","actions","step","positionMap","i","length","componentDidMount","getSVG","drawBasicStructure","position","num","id","visulizeBox","drawSeparator","drawIndicator","drawHorizontalGrid","drawVerticalGrid","setState","componentDidUpdate","prevProps","prevState","action","desc","how","console","log","moveAction","split","to","move","selectAction","arrayMap","positions","indexes","indicatorRow","sepPosition","JSON","parse","stringify","push","number","index","sort","a","b","elementPosition","indicatorFrom","indicatorTo","elementID","elementInitial","findMin","shift","shiftPosition","sepCur","elementStage1","elementNewCol","elementStage2","elementStage3","sepNext","render","actionDisplay"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AAGA,OAAO,MAAMC,aAAN,SAA4BD,aAA5B,CAA0C;AAC7CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AAGA,UAAMA,KAAN,EAAa,EAAb,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,IAA5B,EAAkC;AAC9BC,MAAAA,GAAG,EAAE,EADyB;AACrBC,MAAAA,MAAM,EAAE,EADa;AACTC,MAAAA,IAAI,EAAE,EADG;AACCC,MAAAA,KAAK,EAAE;AADR,KAAlC,EAEG,WAFH;AAIA,SAAKC,GAAL,GAAW,IAAX;AAEA,SAAKC,gBAAL,GAAwB;AACpBC,MAAAA,GAAG,EAAE,CADe;AAEpBC,MAAAA,GAAG,EAAE;AAFe,KAAxB;AAKA,SAAKC,gBAAL,GAAwB;AACpBF,MAAAA,GAAG,EAAE,CADe;AAEpBC,MAAAA,GAAG,EAAE;AAFe,KAAxB;AAKA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AAEA,QAAIG,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAhB;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAEF,SADE;AAETG,MAAAA,OAAO,EAAE,EAFA;AAGTC,MAAAA,IAAI,EAAE;AAHG,KAAb;AAKH;;AAEDR,EAAAA,kBAAkB,CAACM,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAApB,EAA2B;AACzC,QAAIG,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCD,MAAAA,WAAW,CAACC,CAAD,CAAX,GAAiB;AACbb,QAAAA,GAAG,EAAE,CADQ;AAEbC,QAAAA,GAAG,EAAEY,CAAC,GAAG;AAFI,OAAjB;AAIH;;AACD,WAAOD,WAAP;AACH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKjB,GAAL,GAAW,KAAKkB,MAAL,EAAX;AACA,SAAKC,kBAAL;AAEA,QAAIL,WAAW,GAAG,KAAKT,kBAAL,EAAlB;;AAEA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWC,KAAX,CAAiBK,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,UAAIK,QAAQ,GAAGN,WAAW,CAACC,CAAD,CAA1B;AACA,UAAIM,GAAG,GAAG,KAAKX,KAAL,CAAWC,KAAX,CAAiBI,CAAjB,CAAV;AACA,UAAIO,EAAE,GAAG,eAAeP,CAAxB;AACA,WAAKQ,WAAL,CAAiBH,QAAQ,CAAClB,GAA1B,EAA+BkB,QAAQ,CAACjB,GAAxC,EAA6C,CAA7C,EAAgD,CAAhD,EAAmDkB,GAAnD,EAAwDC,EAAxD;AACH;;AAED,SAAKE,aAAL,CAAmB,KAAKpB,gBAAL,CAAsBF,GAAzC,EAA8C,KAAKE,gBAAL,CAAsBD,GAApE;AACA,SAAKsB,aAAL,CAAmB,KAAKxB,gBAAL,CAAsBC,GAAzC,EAA8C,KAAKD,gBAAL,CAAsBE,GAApE,EAAyE,KAAzE;AACA,SAAKuB,kBAAL;AACA,SAAKC,gBAAL;AAEA,SAAKC,QAAL,CAAc;AACVhB,MAAAA,OAAO,EAAE,KAAKL,SAAL;AADC,KAAd;AAGH;;AAEDsB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAI,KAAKrB,KAAL,CAAWG,IAAX,GAAkBkB,SAAS,CAAClB,IAAhC,EAAsC;AAClC,UAAImB,MAAM,GAAG,KAAKtB,KAAL,CAAWE,OAAX,CAAmB,KAAKF,KAAL,CAAWG,IAA9B,CAAb;;AACA,UAAImB,MAAM,CAACC,IAAP,KAAgB,mBAApB,EAAyC;AACrC,aAAKzB,YAAL,CAAkBwB,MAAM,CAACE,GAAzB;AACH;AACJ,KALD,MAKO,IAAI,KAAKxB,KAAL,CAAWG,IAAX,GAAkBkB,SAAS,CAAClB,IAAhC,EAAsC;AACzCsB,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH;AACJ;;AAED5B,EAAAA,YAAY,CAAC0B,GAAD,EAAM;AACd,QAAIG,UAAU,GAAGH,GAAG,CAAC,CAAD,CAAH,CAAOI,KAAP,CAAa,GAAb,CAAjB;AAEA,QAAIhB,EAAE,GAAGe,UAAU,CAAC,CAAD,CAAnB;AACA,QAAIE,EAAE,GAAGF,UAAU,CAAC,CAAD,CAAV,CAAcC,KAAd,CAAoB,GAApB,CAAT;AAEAH,IAAAA,OAAO,CAACC,GAAR,CAAYG,EAAE,CAAC,CAAD,CAAd;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,EAAE,CAAC,CAAD,CAAd;AACA,SAAKC,IAAL,CAAUlB,EAAV,EAAciB,EAAE,CAAC,CAAD,CAAhB,EAAqBA,EAAE,CAAC,CAAD,CAAvB,EAA4B,CAAC,IAA7B,EAAmC,IAAnC,EAAyC,MAAM;AAC3C,UAAIE,YAAY,GAAGP,GAAG,CAAC,CAAD,CAAtB,CAD2C,CAE3C;AACH,KAHD;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACH;;AAED9B,EAAAA,SAAS,CAACI,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAApB,EAA2B;AAChC,QAAIC,OAAO,GAAG,CAAC;AACXqB,MAAAA,IAAI,EAAE,eADK;AAEXC,MAAAA,GAAG,EAAE;AAFM,KAAD,CAAd;AAIA,QAAIQ,QAAQ,GAAG,EAAf;AACA,QAAIC,SAAS,GAAG,KAAKtC,kBAAL,EAAhB;AACA,QAAIuC,OAAO,GAAG,EAAd;AACA,QAAIC,YAAY,GAAG,KAAK5C,gBAAL,CAAsBC,GAAzC;AAEA,QAAI4C,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK7C,gBAApB,CAAX,CAAlB;;AAEA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC6B,MAAAA,OAAO,CAACM,IAAR,CAAanC,CAAb;AACA2B,MAAAA,QAAQ,CAACQ,IAAT,CAAc;AACVC,QAAAA,MAAM,EAAExC,KAAK,CAACI,CAAD,CADH;AAEVqC,QAAAA,KAAK,EAAErC;AAFG,OAAd;AAIH;;AAED2B,IAAAA,QAAQ,GAAGA,QAAQ,CAACW,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/B,aAAOD,CAAC,CAACH,MAAF,GAAWI,CAAC,CAACJ,MAApB;AACH,KAFU,CAAX;;AAIA,SAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,QAAQ,CAAC1B,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAIqC,KAAK,GAAGV,QAAQ,CAAC3B,CAAD,CAAR,CAAYqC,KAAxB;AACA,UAAII,eAAe,GAAGb,SAAS,CAACS,KAAD,CAA/B;AAEA,UAAIK,aAAa,GAAGZ,YAAY,GAAG,GAAf,GAAqB,KAAK5C,gBAAL,CAAsBE,GAA/D;AACA,UAAIuD,WAAW,GAAGb,YAAY,GAAG,GAAf,GAAqBW,eAAe,CAACrD,GAAvD;AAEA,UAAIwD,SAAS,GAAG,eAAeP,KAA/B;AACA,UAAIQ,cAAc,GAAGJ,eAAe,CAACtD,GAAhB,GAAsB,GAAtB,GAA4BsD,eAAe,CAACrD,GAAjE;AAEA,UAAI0D,OAAO,GAAG;AACV5B,QAAAA,IAAI,EAAE,mBADI;AAEVC,QAAAA,GAAG,EAAE,CAAC,oBAAoBuB,aAApB,GAAoC,GAApC,GAA0CC,WAA3C,EACG,YAAYC,SADf;AAFK,OAAd;AAMAf,MAAAA,OAAO,CAACQ,KAAD,CAAP,GAAiB,IAAjB;AAEA,UAAIU,KAAK,GAAG,EAAZ;AAEA,UAAIC,aAAa,GAAG,IAApB;;AAEA,WAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqC,KAApB,EAA2BrC,CAAC,EAA5B,EAAgC;AAC5B,YAAI6B,OAAO,CAAC7B,CAAD,CAAP,KAAe,IAAnB,EAAyB;AACrB,cAAIqC,KAAK,GAAGR,OAAO,CAAC7B,CAAD,CAAnB;;AACA,cAAI+C,KAAK,CAAC9C,MAAN,KAAiB,CAArB,EAAwB;AACpB+C,YAAAA,aAAa,GAAGpB,SAAS,CAACS,KAAD,CAAT,CAAiBlD,GAAjB,GAAuB,GAAvB,GAA6ByC,SAAS,CAACS,KAAD,CAAT,CAAiBjD,GAA9D;AACH;;AACDwC,UAAAA,SAAS,CAACS,KAAD,CAAT,CAAiBjD,GAAjB;AACA2D,UAAAA,KAAK,CAACZ,IAAN,CAAW,eAAeE,KAA1B;AACH;AACJ;;AAGD,UAAIY,MAAM,GAAGlB,WAAW,CAAC5C,GAAZ,GAAkB,GAAlB,GAAwB4C,WAAW,CAAC3C,GAAjD;AAGA,UAAI8D,aAAa,GAAIT,eAAe,CAACtD,GAAhB,GAAsB,CAAvB,GAA4B,GAA5B,GAAkCsD,eAAe,CAACrD,GAAtE;AACA,UAAI+D,aAAa,GAAGpB,WAAW,CAAC3C,GAAhC;AACA,UAAIgE,aAAa,GAAIX,eAAe,CAACtD,GAAhB,GAAsB,CAAvB,GAA4B,GAA5B,GAAkCgE,aAAtD;AACA,UAAIE,aAAa,GAAGZ,eAAe,CAACtD,GAAhB,GAAsB,GAAtB,GAA4BgE,aAAhD;AAEApB,MAAAA,WAAW,CAAC3C,GAAZ;AACA,UAAIkE,OAAO,GAAGvB,WAAW,CAAC5C,GAAZ,GAAkB,GAAlB,GAAwB4C,WAAW,CAAC3C,GAAlD;AAEA,UAAIqC,IAAI,GAAG;AACPP,QAAAA,IAAI,EAAE,8CADC;AAEPC,QAAAA,GAAG,EAAC,CAAC,oBAAoBwB,WAApB,GAAkC,GAAlC,GAAwCD,aAAzC,EACC,UAAUE,SAAV,GAAsB,GAAtB,GAA4BC,cAA5B,GAA6C,GAA7C,GAAmDK,aADpD,EAEC,WAAWH,KAAX,GAAmB,GAAnB,GAAyBC,aAF1B,EAGC,oBAAoBC,MAApB,GAA6B,GAA7B,GAAmCK,OAHpC,EAIC,UAAUV,SAAV,GAAsB,GAAtB,GAA4BM,aAA5B,GAA4C,GAA5C,GAAkDE,aAJnD,EAKC,UAAUR,SAAV,GAAsB,GAAtB,GAA4BQ,aAA5B,GAA4C,GAA5C,GAAkDC,aALnD;AAFG,OAAX;AAUAxD,MAAAA,OAAO,CAACsC,IAAR,CAAaW,OAAb;AACAjD,MAAAA,OAAO,CAACsC,IAAR,CAAaV,IAAb;AACH;;AAED5B,IAAAA,OAAO,CAACsC,IAAR,CAAa;AACTjB,MAAAA,IAAI,EAAE,eADG;AAETC,MAAAA,GAAG,EAAE;AAFI,KAAb;AAKA,WAAOtB,OAAP;AACH;;AAED0D,EAAAA,MAAM,GAAG;AAEL,QAAIC,aAAa,GAAG,mBAApB;;AAEA,QAAI,KAAK7D,KAAL,CAAWE,OAAX,CAAmBI,MAAnB,GAA4B,CAAhC,EAAmC;AAC/BuD,MAAAA,aAAa,GAAG,KAAK7D,KAAL,CAAWE,OAAX,CAAmB,KAAKF,KAAL,CAAWG,IAA9B,EAAoCoB,IAApD;AACH;;AAED,WACI;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMsC,aAAN,CADJ,EAEI;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnB,YAAI,KAAK7D,KAAL,CAAWG,IAAX,GAAkB,KAAKH,KAAL,CAAWE,OAAX,CAAmBI,MAAnB,GAA4B,CAAlD,EAAqD;AACjD,eAAKY,QAAL,CAAc;AACVf,YAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAAX,GAAkB;AADd,WAAd;AAGH;AACJ,OAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EASI;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnB,YAAI,KAAKH,KAAL,CAAWG,IAAX,GAAkB,CAAtB,EAAyB;AACrB,eAAKe,QAAL,CAAc;AACVf,YAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAAX,GAAkB;AADd,WAAd;AAGH;AACJ,OAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,CADJ;AAmBH;;AA1N4C","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\n\nexport class SelectionSort extends GridStructure {\n    constructor(props) {\n        // 1: Grid Width 30px\n        // 2: Grid Height 30px\n        // 3: nRow: 3\n        // 4: nCol: 10\n        // 5: padding: 0.05\n        // 6: margin: top: 20px, bottom: 20px, left: 20px, right: 20px\n\n\n        super(props, 30, 30, 3, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"selection\")\n\n        this.svg = null;\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        this.separatorInitial = {\n            row: 1,\n            col: 2\n        }\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n        this.visulizeFind = this.visulizeFind.bind(this);\n\n        let initArray = [3, 2, 6, 2, 9, 8]\n\n        this.state = {\n            array: initArray,\n            actions: [],\n            step: 0    \n        }\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 3\n            }\n        } \n        return(positionMap)\n    }\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"insertion-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col);\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col, \"min\");\n        this.drawHorizontalGrid()\n        this.drawVerticalGrid();\n\n        this.setState({\n            actions: this.getAction()\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.step > prevState.step) {\n            let action = this.state.actions[this.state.step];\n            if (action.desc === \"Find the Lowest #\") {\n                this.visulizeFind(action.how)\n            }\n        } else if (this.state.step < prevState.step) {\n            console.log(\"--\")\n        }   \n    }\n\n    visulizeFind(how) {\n        let moveAction = how[0].split(\" \")        \n\n        let id = moveAction[1]\n        let to = moveAction[3].split(\"-\")\n\n        console.log(to[0])\n        console.log(to[1])\n        this.move(id, to[0], to[1], -0.85, 0.05, () => {\n            let selectAction = how[1]\n            //console.log(selectAction)\n        })\n\n        console.log(moveAction)\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }];\n        let arrayMap = [];\n        let positions = this.getInitialPosition();\n        let indexes = [];\n        let indicatorRow = this.indicatorInitial.row;\n\n        let sepPosition = JSON.parse(JSON.stringify(this.separatorInitial));\n\n        for (let i = 0; i < array.length; i++) {\n            indexes.push(i);\n            arrayMap.push({\n                number: array[i],\n                index: i\n            })\n        }\n\n        arrayMap = arrayMap.sort((a, b) => {\n            return a.number - b.number;\n        })\n        \n        for (let i = 0; i < arrayMap.length; i++) {\n            let index = arrayMap[i].index;\n            let elementPosition = positions[index]\n\n            let indicatorFrom = indicatorRow + \"-\" + this.indicatorInitial.col;\n            let indicatorTo = indicatorRow + \"-\" + elementPosition.col;\n\n            let elementID = \"insertion-\" + index\n            let elementInitial = elementPosition.row + \"-\" + elementPosition.col;\n\n            let findMin = {\n                desc: \"Find the Lowest #\",\n                how: [\"Move indicator \" + indicatorFrom + \" \" + indicatorTo, \n                        \"Select \" + elementID]\n            }\n\n            indexes[index] = null;\n\n            let shift = [];\n\n            let shiftPosition = null\n\n            for (let i = 0; i < index; i++) {\n                if (indexes[i] !== null) {\n                    let index = indexes[i];\n                    if (shift.length === 0) {\n                        shiftPosition = positions[index].row + \"-\" + positions[index].col\n                    }\n                    positions[index].col++;\n                    shift.push(\"insertion-\" + index);\n                }\n            }\n\n\n            let sepCur = sepPosition.row + \"-\" + sepPosition.col;\n\n\n            let elementStage1 = (elementPosition.row + 1) + \"-\" + elementPosition.col;\n            let elementNewCol = sepPosition.col;\n            let elementStage2 = (elementPosition.row + 1) + \"-\" + elementNewCol;\n            let elementStage3 = elementPosition.row + \"-\" + elementNewCol;\n\n            sepPosition.col++;\n            let sepNext = sepPosition.row + \"-\" + sepPosition.col;\n\n            let move = {\n                desc: \"Move the Lowest # to the End of Sorted Array\",\n                how:[\"Move indicator \" + indicatorTo + \" \" + indicatorFrom,\n                     \"Move \" + elementID + \" \" + elementInitial + \" \" + elementStage1,\n                     \"Shift \" + shift + \" \" + shiftPosition,\n                     \"Move separator \" + sepCur + \" \" + sepNext,\n                     \"Move \" + elementID + \" \" + elementStage1 + \" \" + elementStage2,\n                     \"Move \" + elementID + \" \" + elementStage2 + \" \" + elementStage3\n                ]\n            }\n            actions.push(findMin);\n            actions.push(move);\n        }\n\n        actions.push({\n            desc: \"Sort Finished\",\n            how: []\n        })\n\n        return(actions)\n    }\n\n    render() {\n\n        let actionDisplay = \"Finding Algorithm\"\n\n        if (this.state.actions.length > 0) {\n            actionDisplay = this.state.actions[this.state.step].desc;\n        }\n\n        return(\n            <div id=\"selection\">\n                <div>{actionDisplay}</div>\n                <button onClick={() => {\n                    if (this.state.step < this.state.actions.length - 1) {\n                        this.setState({\n                            step: this.state.step + 1\n                        })\n                    }\n                }} >Next</button>\n                <button onClick={() => {\n                    if (this.state.step > 0) {\n                        this.setState({\n                            step: this.state.step - 1\n                        })\n                    }\n                }} >Prev</button>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}