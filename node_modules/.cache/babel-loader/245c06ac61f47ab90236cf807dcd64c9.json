{"ast":null,"code":"var _jsxFileName = \"/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { GridStructure } from './GridStructure';\nexport class Insertion extends GridStructure {\n  constructor(props) {\n    super(props, 30, 30, 3.5, 10, 0.05, {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    }, \"insertion\");\n    this.svg = null;\n    this.getInitialPosition = this.getInitialPosition.bind(this);\n    this.getAction = this.getAction.bind(this);\n    this.separatorInitial = {\n      row: 1,\n      col: 1\n    };\n    this.indicatorInitial = {\n      row: 3,\n      col: 10\n    };\n    let initArray = [3, 2, 6, 2, 9, 8];\n    this.state = {\n      array: initArray,\n      actions: [],\n      step: 0,\n      speed: 200,\n      setNewArray: false,\n      animation: false\n    };\n  }\n\n  componentDidMount() {\n    this.svg = this.getSVG();\n    this.drawBasicStructure();\n    this.initViz();\n    this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col);\n    this.setState({//actions: this.getAction()\n    });\n  }\n\n  clearViz() {\n    this.svg.selectAll(\"g\").remove();\n  }\n\n  initViz() {\n    let positionMap = this.getInitialPosition();\n\n    for (let i = 0; i < this.state.array.length; i++) {\n      let position = positionMap[i];\n      let num = this.state.array[i];\n      let id = \"insertion-\" + i;\n      this.visulizeBox(position.row, position.col, 1, 1, num, id);\n    }\n\n    this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col);\n    this.drawHorizontalGrid();\n    this.drawVerticalGrid();\n  }\n\n  getAction(array = this.state.array) {\n    let actions = [{\n      desc: \"Start Sorting\",\n      how: []\n    }];\n    let positions = this.getInitialPosition();\n    let firstRow = positions[0].row;\n    let firstCol = positions[0].col;\n\n    for (let i = 0; i < array.length; i++) {\n      let elementRow = positions[i].row;\n      let elementCol = positions[i].col;\n      let initPosition = elementRow + \"-\" + elementCol;\n      let elementID = \"insertion-\" + i;\n      let elementPosition1 = initPosition + \" \" + elementRow + \"-\" + 3.5;\n      let indicatorPosition1 = elementRow + \"-\" + \"3\";\n      let selectAction = {\n        desc: \"Select the First Unsorted Item\",\n        actions: [\"Move \" + elementID + \" \" + elementPosition1, \"Move indicator \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \" + indicatorPosition1]\n      };\n      let moveAction = {\n        desc: \"Start Inserting into Sorted Array\",\n        actions: [\"Move \" + elementID + \" \" + elementPosition1]\n      };\n      actions.push(selectAction); //for (let j = 0; j < )\n\n      console.log(selectAction);\n    }\n  }\n\n  getInitialPosition(array = this.state.array) {\n    let positionMap = {};\n\n    for (let i = 0; i < array.length; i++) {\n      positionMap[i] = {\n        row: 2,\n        col: i + 2\n      };\n    }\n\n    return positionMap;\n  }\n\n  render() {\n    this.getAction();\n    return React.createElement(\"div\", {\n      id: \"insertion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Insertion\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Prev\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/HowardPu/Documents/academic/info/info 474/info474final/src/Components/Insertion.js"],"names":["React","Component","d3","GridStructure","Insertion","constructor","props","top","bottom","left","right","svg","getInitialPosition","bind","getAction","separatorInitial","row","col","indicatorInitial","initArray","state","array","actions","step","speed","setNewArray","animation","componentDidMount","getSVG","drawBasicStructure","initViz","drawIndicator","setState","clearViz","selectAll","remove","positionMap","i","length","position","num","id","visulizeBox","drawSeparator","drawHorizontalGrid","drawVerticalGrid","desc","how","positions","firstRow","firstCol","elementRow","elementCol","initPosition","elementID","elementPosition1","indicatorPosition1","selectAction","moveAction","push","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport {GridStructure} from './GridStructure'\n\nexport class Insertion extends GridStructure {\n    constructor(props) {\n        super(props, 30, 30, 3.5, 10, 0.05, {\n            top: 20, bottom: 20, left: 20, right: 20\n        }, \"insertion\")\n\n        this.svg = null;\n\n        this.getInitialPosition = this.getInitialPosition.bind(this);\n        this.getAction = this.getAction.bind(this);\n\n        this.separatorInitial = {\n            row: 1,\n            col: 1\n        }\n\n        this.indicatorInitial = {\n            row: 3,\n            col: 10\n        }\n\n        let initArray = [3, 2, 6, 2, 9, 8]\n\n        this.state = {\n            array: initArray,\n            actions: [],\n            step: 0,\n            speed: 200,\n            setNewArray: false,\n            animation: false\n        }\n    }\n\n\n    componentDidMount() {\n        this.svg = this.getSVG();\n        this.drawBasicStructure();\n        this.initViz();\n        this.drawIndicator(this.indicatorInitial.row, this.indicatorInitial.col);\n        this.setState({\n            //actions: this.getAction()\n        })\n    }\n\n    clearViz() {\n        this.svg.selectAll(\"g\").remove();\n    }\n\n    initViz() {\n        let positionMap = this.getInitialPosition();\n\n        for (let i = 0; i < this.state.array.length; i++) {\n            let position = positionMap[i]\n            let num = this.state.array[i]\n            let id = \"insertion-\" + i\n            this.visulizeBox(position.row, position.col, 1, 1, num, id)\n        }\n\n        this.drawSeparator(this.separatorInitial.row, this.separatorInitial.col);\n        this.drawHorizontalGrid()\n        this.drawVerticalGrid()\n    }\n\n    getAction(array = this.state.array) {\n        let actions = [{\n            desc: \"Start Sorting\",\n            how: []\n        }]\n\n\n        let positions = this.getInitialPosition();\n\n        let firstRow = positions[0].row\n        let firstCol = positions[0].col\n        for (let i = 0; i < array.length; i++) {\n            let elementRow = positions[i].row;\n            let elementCol = positions[i].col;\n\n            let initPosition = elementRow + \"-\" + elementCol\n\n            let elementID = \"insertion-\" + i\n            let elementPosition1 = initPosition + \" \" + elementRow + \"-\" + 3.5\n            let indicatorPosition1 = elementRow + \"-\" + \"3\"; \n\n            let selectAction = {\n                desc: \"Select the First Unsorted Item\",\n                actions: [\n                    \"Move \" + elementID + \" \" + elementPosition1,\n                    \"Move indicator \" + this.indicatorInitial.row + \"-\" + this.indicatorInitial.col + \" \" + indicatorPosition1 \n                ]\n            }\n\n            let moveAction = {\n                desc: \"Start Inserting into Sorted Array\",\n                actions: [\n                    \"Move \" + elementID + \" \" + elementPosition1 \n                ]\n            }\n\n            actions.push(selectAction);\n\n\n\n            //for (let j = 0; j < )\n            console.log(selectAction)\n        }\n\n    }\n\n    getInitialPosition(array = this.state.array) {\n        let positionMap = {}\n        for (let i = 0; i < array.length; i++) {\n            positionMap[i] = {\n                row: 2,\n                col: i + 2\n            }\n        } \n        return(positionMap)\n    }\n\n    render() {\n        this.getAction();\n        return(\n            <div id=\"insertion\">\n                <div>Insertion</div>\n                <button>Next</button>\n                <button>Prev</button>\n            </div>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}